
EFG_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000687c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800693c  0800693c  0000793c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aa8  08006aa8  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006aa8  08006aa8  00007aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ab0  08006ab0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ab0  08006ab0  00007ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ab4  08006ab4  00007ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006ab8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000068  08006b20  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006b20  000083c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001209f  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284d  00000000  00000000  0001a12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001c980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce7  00000000  00000000  0001da18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001329c  00000000  00000000  0001e6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001335d  00000000  00000000  0003199b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076dc3  00000000  00000000  00044cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbabb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c8  00000000  00000000  000bbb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000bfbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006924 	.word	0x08006924

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006924 	.word	0x08006924

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1824      	adds	r4, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	42a3      	cmp	r3, r4
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	@ 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0424      	lsls	r4, r4, #16
 80002d2:	1960      	adds	r0, r4, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			@ (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	@ (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <app_main>:
#include "app_main.h"
void app_main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	initSystem(&g_ctx);
 80004d0:	4b04      	ldr	r3, [pc, #16]	@ (80004e4 <app_main+0x18>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 f8b6 	bl	8000644 <initSystem>

	while(1)
	{
		processState(&g_ctx);
 80004d8:	4b02      	ldr	r3, [pc, #8]	@ (80004e4 <app_main+0x18>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 f8fa 	bl	80006d4 <processState>
 80004e0:	e7fa      	b.n	80004d8 <app_main+0xc>
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	200000bc 	.word	0x200000bc

080004e8 <HAL_GPIO_EXTI_Callback>:
	}
}
// Callback function for rising edge interrupt on GPIO EXTI line
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	0002      	movs	r2, r0
 80004f0:	1dbb      	adds	r3, r7, #6
 80004f2:	801a      	strh	r2, [r3, #0]
	SystemClock_Config();
 80004f4:	f000 fc92 	bl	8000e1c <SystemClock_Config>
	HAL_ResumeTick();
 80004f8:	f001 faa8 	bl	8001a4c <HAL_ResumeTick>
	if(GPIO_Pin == GPIO_PIN_15)
 80004fc:	1dbb      	adds	r3, r7, #6
 80004fe:	881a      	ldrh	r2, [r3, #0]
 8000500:	2380      	movs	r3, #128	@ 0x80
 8000502:	021b      	lsls	r3, r3, #8
 8000504:	429a      	cmp	r2, r3
 8000506:	d12f      	bne.n	8000568 <HAL_GPIO_EXTI_Callback+0x80>
	{
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET) // Rising edge
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	021a      	lsls	r2, r3, #8
 800050c:	23a0      	movs	r3, #160	@ 0xa0
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	0011      	movs	r1, r2
 8000512:	0018      	movs	r0, r3
 8000514:	f002 f948 	bl	80027a8 <HAL_GPIO_ReadPin>
 8000518:	0003      	movs	r3, r0
 800051a:	2b01      	cmp	r3, #1
 800051c:	d10e      	bne.n	800053c <HAL_GPIO_EXTI_Callback+0x54>
		{
			if (buttonState == 1)
 800051e:	4b1e      	ldr	r3, [pc, #120]	@ (8000598 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	2b01      	cmp	r3, #1
 8000526:	d102      	bne.n	800052e <HAL_GPIO_EXTI_Callback+0x46>
			{
				holdTime = 0;
 8000528:	4b1c      	ldr	r3, [pc, #112]	@ (800059c <HAL_GPIO_EXTI_Callback+0xb4>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
			}
			wupFlag = 1;
 800052e:	4b1c      	ldr	r3, [pc, #112]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
			buttonState = 0;
 8000534:	4b18      	ldr	r3, [pc, #96]	@ (8000598 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET) // Falling edge
		{
			HAL_TIM_Base_Start_IT(&htim21);
		}
	}
}
 800053a:	e029      	b.n	8000590 <HAL_GPIO_EXTI_Callback+0xa8>
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET) // Falling edge
 800053c:	2380      	movs	r3, #128	@ 0x80
 800053e:	021a      	lsls	r2, r3, #8
 8000540:	23a0      	movs	r3, #160	@ 0xa0
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	0011      	movs	r1, r2
 8000546:	0018      	movs	r0, r3
 8000548:	f002 f92e 	bl	80027a8 <HAL_GPIO_ReadPin>
 800054c:	1e03      	subs	r3, r0, #0
 800054e:	d11f      	bne.n	8000590 <HAL_GPIO_EXTI_Callback+0xa8>
			buttonState = 1;
 8000550:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
			holdTime = HAL_GetTick(); // Record button hold time
 8000556:	f001 fa3d 	bl	80019d4 <HAL_GetTick>
 800055a:	0002      	movs	r2, r0
 800055c:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <HAL_GPIO_EXTI_Callback+0xb4>)
 800055e:	601a      	str	r2, [r3, #0]
			wupFlag = 1;
 8000560:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
}
 8000566:	e013      	b.n	8000590 <HAL_GPIO_EXTI_Callback+0xa8>
	else if(GPIO_Pin == GPIO_PIN_9)
 8000568:	1dbb      	adds	r3, r7, #6
 800056a:	881a      	ldrh	r2, [r3, #0]
 800056c:	2380      	movs	r3, #128	@ 0x80
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	429a      	cmp	r2, r3
 8000572:	d10d      	bne.n	8000590 <HAL_GPIO_EXTI_Callback+0xa8>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET) // Falling edge
 8000574:	1dbb      	adds	r3, r7, #6
 8000576:	881a      	ldrh	r2, [r3, #0]
 8000578:	23a0      	movs	r3, #160	@ 0xa0
 800057a:	05db      	lsls	r3, r3, #23
 800057c:	0011      	movs	r1, r2
 800057e:	0018      	movs	r0, r3
 8000580:	f002 f912 	bl	80027a8 <HAL_GPIO_ReadPin>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d103      	bne.n	8000590 <HAL_GPIO_EXTI_Callback+0xa8>
			HAL_TIM_Base_Start_IT(&htim21);
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800058a:	0018      	movs	r0, r3
 800058c:	f004 f95a 	bl	8004844 <HAL_TIM_Base_Start_IT>
}
 8000590:	46c0      	nop			@ (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200000b1 	.word	0x200000b1
 800059c:	200000b4 	.word	0x200000b4
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000238 	.word	0x20000238

080005a8 <HAL_RTC_AlarmAEventCallback>:

// Callback function for RTC Alarm A event
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 80005b0:	f000 fc34 	bl	8000e1c <SystemClock_Config>
	HAL_ResumeTick();
 80005b4:	f001 fa4a 	bl	8001a4c <HAL_ResumeTick>
	wupFlag = 1;
 80005b8:	4b04      	ldr	r3, [pc, #16]	@ (80005cc <HAL_RTC_AlarmAEventCallback+0x24>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	rtcFlag = 1;
 80005be:	4b04      	ldr	r3, [pc, #16]	@ (80005d0 <HAL_RTC_AlarmAEventCallback+0x28>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
}
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b002      	add	sp, #8
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000000 	.word	0x20000000
 80005d0:	200000ac 	.word	0x200000ac

080005d4 <HAL_TIM_PeriodElapsedCallback>:

// Callback function for TIM21 period elapsed interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if(htim == &htim21)
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d110      	bne.n	8000606 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET)
 80005e4:	2380      	movs	r3, #128	@ 0x80
 80005e6:	009a      	lsls	r2, r3, #2
 80005e8:	23a0      	movs	r3, #160	@ 0xa0
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	0011      	movs	r1, r2
 80005ee:	0018      	movs	r0, r3
 80005f0:	f002 f8da 	bl	80027a8 <HAL_GPIO_ReadPin>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d102      	bne.n	80005fe <HAL_TIM_PeriodElapsedCallback+0x2a>
		{
			floodFlag = 1; // Set flood flag
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
		}
		HAL_TIM_Base_Stop_IT(&htim21);
 80005fe:	4b04      	ldr	r3, [pc, #16]	@ (8000610 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000600:	0018      	movs	r0, r3
 8000602:	f004 f963 	bl	80048cc <HAL_TIM_Base_Stop_IT>
	}
}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	20000238 	.word	0x20000238
 8000614:	200000b0 	.word	0x200000b0

08000618 <HAL_LPTIM_CompareMatchCallback>:
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8000620:	f000 fbfc 	bl	8000e1c <SystemClock_Config>
	HAL_ResumeTick();
 8000624:	f001 fa12 	bl	8001a4c <HAL_ResumeTick>
	wupFlag = 1;
 8000628:	4b04      	ldr	r3, [pc, #16]	@ (800063c <HAL_LPTIM_CompareMatchCallback+0x24>)
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
	alert_flag = 1;
 800062e:	4b04      	ldr	r3, [pc, #16]	@ (8000640 <HAL_LPTIM_CompareMatchCallback+0x28>)
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
}
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b002      	add	sp, #8
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000000 	.word	0x20000000
 8000640:	200000ad 	.word	0x200000ad

08000644 <initSystem>:

void initSystem(SystemContext *ctx)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	ctx->currentState = STATE_INIT;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]

	RTC_ExitInitMode(&hrtc);
 8000652:	4b1c      	ldr	r3, [pc, #112]	@ (80006c4 <initSystem+0x80>)
 8000654:	0018      	movs	r0, r3
 8000656:	f004 f843 	bl	80046e0 <RTC_ExitInitMode>
	strcpy(message, "EFloodGuardLP(v3.4)\r\n");
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <initSystem+0x84>)
 800065c:	4a1b      	ldr	r2, [pc, #108]	@ (80006cc <initSystem+0x88>)
 800065e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000660:	c313      	stmia	r3!, {r0, r1, r4}
 8000662:	ca03      	ldmia	r2!, {r0, r1}
 8000664:	c303      	stmia	r3!, {r0, r1}
 8000666:	8812      	ldrh	r2, [r2, #0]
 8000668:	801a      	strh	r2, [r3, #0]
	console(message);
 800066a:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <initSystem+0x84>)
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fb99 	bl	8000da4 <console>

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 8000672:	2380      	movs	r3, #128	@ 0x80
 8000674:	009a      	lsls	r2, r3, #2
 8000676:	23a0      	movs	r3, #160	@ 0xa0
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	0011      	movs	r1, r2
 800067c:	0018      	movs	r0, r3
 800067e:	f002 f893 	bl	80027a8 <HAL_GPIO_ReadPin>
 8000682:	0003      	movs	r3, r0
 8000684:	2b01      	cmp	r3, #1
 8000686:	d10b      	bne.n	80006a0 <initSystem+0x5c>
	{
		floodFlag = 0;
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <initSystem+0x8c>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 800068e:	2064      	movs	r0, #100	@ 0x64
 8000690:	f001 f9aa 	bl	80019e8 <HAL_Delay>
		openValve();
 8000694:	f000 f92c 	bl	80008f0 <openValve>
		ctx->currentState = STATE_NORMAL;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
 800069e:	e00a      	b.n	80006b6 <initSystem+0x72>
	}
	else
	{
		floodFlag = 1;
 80006a0:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <initSystem+0x8c>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80006a6:	2064      	movs	r0, #100	@ 0x64
 80006a8:	f001 f99e 	bl	80019e8 <HAL_Delay>
		closeValve();
 80006ac:	f000 f952 	bl	8000954 <closeValve>
		ctx->currentState = STATE_FLOOD;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2202      	movs	r2, #2
 80006b4:	701a      	strb	r2, [r3, #0]
	}
	alert();
 80006b6:	f000 fb03 	bl	8000cc0 <alert>
}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b003      	add	sp, #12
 80006c0:	bd90      	pop	{r4, r7, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	200001d4 	.word	0x200001d4
 80006c8:	20000084 	.word	0x20000084
 80006cc:	0800693c 	.word	0x0800693c
 80006d0:	200000b0 	.word	0x200000b0

080006d4 <processState>:

void processState(SystemContext *ctx)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	uint32_t now = HAL_GetTick();
 80006dc:	f001 f97a 	bl	80019d4 <HAL_GetTick>
 80006e0:	0003      	movs	r3, r0
 80006e2:	60fb      	str	r3, [r7, #12]
	switch(ctx->currentState)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d100      	bne.n	80006ee <processState+0x1a>
 80006ec:	e0ad      	b.n	800084a <processState+0x176>
 80006ee:	dd00      	ble.n	80006f2 <processState+0x1e>
 80006f0:	e0d0      	b.n	8000894 <processState+0x1c0>
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d002      	beq.n	80006fc <processState+0x28>
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d062      	beq.n	80007c0 <processState+0xec>
 80006fa:	e0cb      	b.n	8000894 <processState+0x1c0>
	{
	case STATE_NORMAL:
		if((floodFlag && Low_battery != 2) || (!floodFlag && Low_battery == 0))
 80006fc:	4b6a      	ldr	r3, [pc, #424]	@ (80008a8 <processState+0x1d4>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d004      	beq.n	8000710 <processState+0x3c>
 8000706:	4b69      	ldr	r3, [pc, #420]	@ (80008ac <processState+0x1d8>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b02      	cmp	r3, #2
 800070e:	d109      	bne.n	8000724 <processState+0x50>
 8000710:	4b65      	ldr	r3, [pc, #404]	@ (80008a8 <processState+0x1d4>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d12c      	bne.n	8000774 <processState+0xa0>
 800071a:	4b64      	ldr	r3, [pc, #400]	@ (80008ac <processState+0x1d8>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d127      	bne.n	8000774 <processState+0xa0>
		{
			if((now - holdTime >= 1000) && buttonState)
 8000724:	4b62      	ldr	r3, [pc, #392]	@ (80008b0 <processState+0x1dc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	1ad2      	subs	r2, r2, r3
 800072c:	23fa      	movs	r3, #250	@ 0xfa
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	429a      	cmp	r2, r3
 8000732:	d31f      	bcc.n	8000774 <processState+0xa0>
 8000734:	4b5f      	ldr	r3, [pc, #380]	@ (80008b4 <processState+0x1e0>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d01a      	beq.n	8000774 <processState+0xa0>
			{
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 800073e:	2380      	movs	r3, #128	@ 0x80
 8000740:	009a      	lsls	r2, r3, #2
 8000742:	23a0      	movs	r3, #160	@ 0xa0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f002 f82d 	bl	80027a8 <HAL_GPIO_ReadPin>
 800074e:	0003      	movs	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	d10d      	bne.n	8000770 <processState+0x9c>
				{
					strcpy(message, "Reset\r\n");
 8000754:	4b58      	ldr	r3, [pc, #352]	@ (80008b8 <processState+0x1e4>)
 8000756:	4a59      	ldr	r2, [pc, #356]	@ (80008bc <processState+0x1e8>)
 8000758:	ca03      	ldmia	r2!, {r0, r1}
 800075a:	c303      	stmia	r3!, {r0, r1}
					console(message);
 800075c:	4b56      	ldr	r3, [pc, #344]	@ (80008b8 <processState+0x1e4>)
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fb20 	bl	8000da4 <console>
					holdTime = 0;
 8000764:	4b52      	ldr	r3, [pc, #328]	@ (80008b0 <processState+0x1dc>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
					resetFloodEvent();
 800076a:	f000 f927 	bl	80009bc <resetFloodEvent>
 800076e:	e001      	b.n	8000774 <processState+0xa0>
				}
				else
				{
					removeFloodAlert();
 8000770:	f000 face 	bl	8000d10 <removeFloodAlert>
				}
			}
		}
		if (floodFlag)
 8000774:	4b4c      	ldr	r3, [pc, #304]	@ (80008a8 <processState+0x1d4>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d003      	beq.n	8000786 <processState+0xb2>
		{
			ctx->currentState = STATE_FLOOD;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2202      	movs	r2, #2
 8000782:	701a      	strb	r2, [r3, #0]
		}
		else if(wupFlag)
		{
			ctx->currentState = STATE_SLEEP;
		}
		break;
 8000784:	e08a      	b.n	800089c <processState+0x1c8>
		else if(rtcFlag)
 8000786:	4b4e      	ldr	r3, [pc, #312]	@ (80008c0 <processState+0x1ec>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00e      	beq.n	80007ae <processState+0xda>
			ctx->currentState = STATE_NORMAL ;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
			strcpy(message, "RTC Event\r\n");
 8000796:	4b48      	ldr	r3, [pc, #288]	@ (80008b8 <processState+0x1e4>)
 8000798:	4a4a      	ldr	r2, [pc, #296]	@ (80008c4 <processState+0x1f0>)
 800079a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800079c:	c313      	stmia	r3!, {r0, r1, r4}
			console(message);
 800079e:	4b46      	ldr	r3, [pc, #280]	@ (80008b8 <processState+0x1e4>)
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 faff 	bl	8000da4 <console>
			rtcFlag = 0;
 80007a6:	4b46      	ldr	r3, [pc, #280]	@ (80008c0 <processState+0x1ec>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
		break;
 80007ac:	e076      	b.n	800089c <processState+0x1c8>
		else if(wupFlag)
 80007ae:	4b46      	ldr	r3, [pc, #280]	@ (80008c8 <processState+0x1f4>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d071      	beq.n	800089c <processState+0x1c8>
			ctx->currentState = STATE_SLEEP;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2203      	movs	r2, #3
 80007bc:	701a      	strb	r2, [r3, #0]
		break;
 80007be:	e06d      	b.n	800089c <processState+0x1c8>

	case STATE_FLOOD:
		if(valve_open == 1)
 80007c0:	4b42      	ldr	r3, [pc, #264]	@ (80008cc <processState+0x1f8>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d120      	bne.n	800080c <processState+0x138>
		{
			HAL_LPTIM_TimeOut_Start_IT(&hlptim1, 10239, 10239);
 80007ca:	4a41      	ldr	r2, [pc, #260]	@ (80008d0 <processState+0x1fc>)
 80007cc:	4940      	ldr	r1, [pc, #256]	@ (80008d0 <processState+0x1fc>)
 80007ce:	4b41      	ldr	r3, [pc, #260]	@ (80008d4 <processState+0x200>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f002 f8cb 	bl	800296c <HAL_LPTIM_TimeOut_Start_IT>
			strcpy(message, "Closing Valve\r\n");
 80007d6:	4b38      	ldr	r3, [pc, #224]	@ (80008b8 <processState+0x1e4>)
 80007d8:	4a3f      	ldr	r2, [pc, #252]	@ (80008d8 <processState+0x204>)
 80007da:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007dc:	c313      	stmia	r3!, {r0, r1, r4}
 80007de:	6812      	ldr	r2, [r2, #0]
 80007e0:	601a      	str	r2, [r3, #0]
			console(message);
 80007e2:	4b35      	ldr	r3, [pc, #212]	@ (80008b8 <processState+0x1e4>)
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 fadd 	bl	8000da4 <console>
			closeValve();
 80007ea:	f000 f8b3 	bl	8000954 <closeValve>
			strcpy(message, "Valve closed\r\n");
 80007ee:	4b32      	ldr	r3, [pc, #200]	@ (80008b8 <processState+0x1e4>)
 80007f0:	4a3a      	ldr	r2, [pc, #232]	@ (80008dc <processState+0x208>)
 80007f2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007f4:	c313      	stmia	r3!, {r0, r1, r4}
 80007f6:	8811      	ldrh	r1, [r2, #0]
 80007f8:	8019      	strh	r1, [r3, #0]
 80007fa:	7892      	ldrb	r2, [r2, #2]
 80007fc:	709a      	strb	r2, [r3, #2]
			console(message);
 80007fe:	4b2e      	ldr	r3, [pc, #184]	@ (80008b8 <processState+0x1e4>)
 8000800:	0018      	movs	r0, r3
 8000802:	f000 facf 	bl	8000da4 <console>
			alert_flag = 1;
 8000806:	4b36      	ldr	r3, [pc, #216]	@ (80008e0 <processState+0x20c>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
		}
		if(alert_flag == 1)
 800080c:	4b34      	ldr	r3, [pc, #208]	@ (80008e0 <processState+0x20c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b01      	cmp	r3, #1
 8000814:	d10c      	bne.n	8000830 <processState+0x15c>
		{
			strcpy(message, "Flood\r\n");
 8000816:	4b28      	ldr	r3, [pc, #160]	@ (80008b8 <processState+0x1e4>)
 8000818:	4a32      	ldr	r2, [pc, #200]	@ (80008e4 <processState+0x210>)
 800081a:	ca03      	ldmia	r2!, {r0, r1}
 800081c:	c303      	stmia	r3!, {r0, r1}
			console(message);
 800081e:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <processState+0x1e4>)
 8000820:	0018      	movs	r0, r3
 8000822:	f000 fabf 	bl	8000da4 <console>
			alert();
 8000826:	f000 fa4b 	bl	8000cc0 <alert>
			alert_flag = 0;
 800082a:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <processState+0x20c>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
		}
		if(!buttonState)
 8000830:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <processState+0x1e0>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d103      	bne.n	8000842 <processState+0x16e>
		{
			ctx->currentState = STATE_SLEEP;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2203      	movs	r2, #3
 800083e:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			ctx->currentState = STATE_NORMAL;
		}
		break;
 8000840:	e02d      	b.n	800089e <processState+0x1ca>
			ctx->currentState = STATE_NORMAL;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
		break;
 8000848:	e029      	b.n	800089e <processState+0x1ca>

	case STATE_SLEEP:
		monitorBattery();
 800084a:	f000 f941 	bl	8000ad0 <monitorBattery>
		wupFlag = 0;
 800084e:	4b1e      	ldr	r3, [pc, #120]	@ (80008c8 <processState+0x1f4>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
		strcpy(message, "Entering Sleep\r\n");
 8000854:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <processState+0x1e4>)
 8000856:	4a24      	ldr	r2, [pc, #144]	@ (80008e8 <processState+0x214>)
 8000858:	ca13      	ldmia	r2!, {r0, r1, r4}
 800085a:	c313      	stmia	r3!, {r0, r1, r4}
 800085c:	6811      	ldr	r1, [r2, #0]
 800085e:	6019      	str	r1, [r3, #0]
 8000860:	7912      	ldrb	r2, [r2, #4]
 8000862:	711a      	strb	r2, [r3, #4]
		console(message);
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <processState+0x1e4>)
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fa9c 	bl	8000da4 <console>
		HAL_SuspendTick();
 800086c:	f001 f8e0 	bl	8001a30 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000870:	2101      	movs	r1, #1
 8000872:	2001      	movs	r0, #1
 8000874:	f002 fb16 	bl	8002ea4 <HAL_PWR_EnterSTOPMode>
		strcpy(message, "After Sleep\r\n");
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <processState+0x1e4>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	@ (80008ec <processState+0x218>)
 800087c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800087e:	c313      	stmia	r3!, {r0, r1, r4}
 8000880:	8812      	ldrh	r2, [r2, #0]
 8000882:	801a      	strh	r2, [r3, #0]
		console(message);
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <processState+0x1e4>)
 8000886:	0018      	movs	r0, r3
 8000888:	f000 fa8c 	bl	8000da4 <console>
		ctx->currentState = STATE_NORMAL;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2201      	movs	r2, #1
 8000890:	701a      	strb	r2, [r3, #0]
		break;
 8000892:	e004      	b.n	800089e <processState+0x1ca>

	default:
		ctx->currentState = STATE_NORMAL;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]
		break;
 800089a:	e000      	b.n	800089e <processState+0x1ca>
		break;
 800089c:	46c0      	nop			@ (mov r8, r8)
	}
}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b005      	add	sp, #20
 80008a4:	bd90      	pop	{r4, r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	200000b0 	.word	0x200000b0
 80008ac:	200000ae 	.word	0x200000ae
 80008b0:	200000b4 	.word	0x200000b4
 80008b4:	200000b1 	.word	0x200000b1
 80008b8:	20000084 	.word	0x20000084
 80008bc:	08006954 	.word	0x08006954
 80008c0:	200000ac 	.word	0x200000ac
 80008c4:	0800695c 	.word	0x0800695c
 80008c8:	20000000 	.word	0x20000000
 80008cc:	200000af 	.word	0x200000af
 80008d0:	000027ff 	.word	0x000027ff
 80008d4:	2000011c 	.word	0x2000011c
 80008d8:	08006968 	.word	0x08006968
 80008dc:	08006978 	.word	0x08006978
 80008e0:	200000ad 	.word	0x200000ad
 80008e4:	08006988 	.word	0x08006988
 80008e8:	08006990 	.word	0x08006990
 80008ec:	080069a4 	.word	0x080069a4

080008f0 <openValve>:
// Function to open the valve
void openValve(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // Activate valve
 80008f4:	23a0      	movs	r3, #160	@ 0xa0
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	2201      	movs	r2, #1
 80008fa:	2180      	movs	r1, #128	@ 0x80
 80008fc:	0018      	movs	r0, r3
 80008fe:	f001 ff70 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Start PWM signal for valve control
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <openValve+0x5c>)
 8000904:	2100      	movs	r1, #0
 8000906:	0018      	movs	r0, r3
 8000908:	f004 f846 	bl	8004998 <HAL_TIM_PWM_Start>
	HAL_Delay(50);
 800090c:	2032      	movs	r0, #50	@ 0x32
 800090e:	f001 f86b 	bl	80019e8 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000); // Set PWM duty cycle for valve closing
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <openValve+0x5c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	22fa      	movs	r2, #250	@ 0xfa
 8000918:	0092      	lsls	r2, r2, #2
 800091a:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(200);
 800091c:	20c8      	movs	r0, #200	@ 0xc8
 800091e:	f001 f863 	bl	80019e8 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); // Stop PWM signal
 8000922:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <openValve+0x5c>)
 8000924:	2100      	movs	r1, #0
 8000926:	0018      	movs	r0, r3
 8000928:	f004 f8ba 	bl	8004aa0 <HAL_TIM_PWM_Stop>
	HAL_Delay(50);
 800092c:	2032      	movs	r0, #50	@ 0x32
 800092e:	f001 f85b 	bl	80019e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Deactivate valve
 8000932:	23a0      	movs	r3, #160	@ 0xa0
 8000934:	05db      	lsls	r3, r3, #23
 8000936:	2200      	movs	r2, #0
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	0018      	movs	r0, r3
 800093c:	f001 ff51 	bl	80027e2 <HAL_GPIO_WritePin>
	valve_open = 1;
 8000940:	4b03      	ldr	r3, [pc, #12]	@ (8000950 <openValve+0x60>)
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]
}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200001f8 	.word	0x200001f8
 8000950:	200000af 	.word	0x200000af

08000954 <closeValve>:

// Function to close the valve
void closeValve(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // Activate valve
 8000958:	23a0      	movs	r3, #160	@ 0xa0
 800095a:	05db      	lsls	r3, r3, #23
 800095c:	2201      	movs	r2, #1
 800095e:	2180      	movs	r1, #128	@ 0x80
 8000960:	0018      	movs	r0, r3
 8000962:	f001 ff3e 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Start PWM signal for valve control
 8000966:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <closeValve+0x5c>)
 8000968:	2100      	movs	r1, #0
 800096a:	0018      	movs	r0, r3
 800096c:	f004 f814 	bl	8004998 <HAL_TIM_PWM_Start>
	HAL_Delay(50);
 8000970:	2032      	movs	r0, #50	@ 0x32
 8000972:	f001 f839 	bl	80019e8 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1900); // Set PWM duty cycle for valve closing
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <closeValve+0x5c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a0e      	ldr	r2, [pc, #56]	@ (80009b4 <closeValve+0x60>)
 800097c:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(200);
 800097e:	20c8      	movs	r0, #200	@ 0xc8
 8000980:	f001 f832 	bl	80019e8 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); // Stop PWM signal
 8000984:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <closeValve+0x5c>)
 8000986:	2100      	movs	r1, #0
 8000988:	0018      	movs	r0, r3
 800098a:	f004 f889 	bl	8004aa0 <HAL_TIM_PWM_Stop>
	HAL_Delay(50);
 800098e:	2032      	movs	r0, #50	@ 0x32
 8000990:	f001 f82a 	bl	80019e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Deactivate valve
 8000994:	23a0      	movs	r3, #160	@ 0xa0
 8000996:	05db      	lsls	r3, r3, #23
 8000998:	2200      	movs	r2, #0
 800099a:	2180      	movs	r1, #128	@ 0x80
 800099c:	0018      	movs	r0, r3
 800099e:	f001 ff20 	bl	80027e2 <HAL_GPIO_WritePin>
	valve_open = 0;
 80009a2:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <closeValve+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
}
 80009a8:	46c0      	nop			@ (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	200001f8 	.word	0x200001f8
 80009b4:	0000076c 	.word	0x0000076c
 80009b8:	200000af 	.word	0x200000af

080009bc <resetFloodEvent>:

// Function to reset flood event
void resetFloodEvent(void)
{
 80009bc:	b5b0      	push	{r4, r5, r7, lr}
 80009be:	af00      	add	r7, sp, #0
	// Check if the button is pressed and the valve is open
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 80009c0:	2380      	movs	r3, #128	@ 0x80
 80009c2:	009a      	lsls	r2, r3, #2
 80009c4:	23a0      	movs	r3, #160	@ 0xa0
 80009c6:	05db      	lsls	r3, r3, #23
 80009c8:	0011      	movs	r1, r2
 80009ca:	0018      	movs	r0, r3
 80009cc:	f001 feec 	bl	80027a8 <HAL_GPIO_ReadPin>
 80009d0:	0003      	movs	r3, r0
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d117      	bne.n	8000a06 <resetFloodEvent+0x4a>
	{
		if(valve_open == 0)
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <resetFloodEvent+0x50>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d101      	bne.n	80009e4 <resetFloodEvent+0x28>
		{
			openValve(); // Open the valve
 80009e0:	f7ff ff86 	bl	80008f0 <openValve>
		}
		strcpy(message, "Valve open\r\n");
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <resetFloodEvent+0x54>)
 80009e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000a14 <resetFloodEvent+0x58>)
 80009e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009ea:	c313      	stmia	r3!, {r0, r1, r4}
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	701a      	strb	r2, [r3, #0]
		console(message);
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <resetFloodEvent+0x54>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 f9d6 	bl	8000da4 <console>
		floodFlag = 0; // Clear the flood flag
 80009f8:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <resetFloodEvent+0x5c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_TimeOut_Stop_IT(&hlptim1);
 80009fe:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <resetFloodEvent+0x60>)
 8000a00:	0018      	movs	r0, r3
 8000a02:	f002 f829 	bl	8002a58 <HAL_LPTIM_TimeOut_Stop_IT>
	}
}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a0c:	200000af 	.word	0x200000af
 8000a10:	20000084 	.word	0x20000084
 8000a14:	080069b4 	.word	0x080069b4
 8000a18:	200000b0 	.word	0x200000b0
 8000a1c:	2000011c 	.word	0x2000011c

08000a20 <measureBattery>:

// Function to measure battery voltage
uint16_t measureBattery(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); 	// Enable battery voltage measurement
 8000a26:	2380      	movs	r3, #128	@ 0x80
 8000a28:	021b      	lsls	r3, r3, #8
 8000a2a:	4825      	ldr	r0, [pc, #148]	@ (8000ac0 <measureBattery+0xa0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	0019      	movs	r1, r3
 8000a30:	f001 fed7 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc); 									// Start ADC conversion
 8000a34:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <measureBattery+0xa4>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 f98a 	bl	8001d50 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY); 		// Wait for ADC conversion to complete
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	425a      	negs	r2, r3
 8000a40:	4b20      	ldr	r3, [pc, #128]	@ (8000ac4 <measureBattery+0xa4>)
 8000a42:	0011      	movs	r1, r2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f001 fa17 	bl	8001e78 <HAL_ADC_PollForConversion>
	uint16_t analogbatt = HAL_ADC_GetValue(&hadc); 			// Read ADC value
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac4 <measureBattery+0xa4>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f001 faaf 	bl	8001fb0 <HAL_ADC_GetValue>
 8000a52:	0002      	movs	r2, r0
 8000a54:	1dbb      	adds	r3, r7, #6
 8000a56:	801a      	strh	r2, [r3, #0]
	HAL_Delay(5);
 8000a58:	2005      	movs	r0, #5
 8000a5a:	f000 ffc5 	bl	80019e8 <HAL_Delay>
	HAL_ADC_Stop(&hadc); 									// Stop ADC conversion
 8000a5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <measureBattery+0xa4>)
 8000a60:	0018      	movs	r0, r3
 8000a62:	f001 f9c9 	bl	8001df8 <HAL_ADC_Stop>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); 	// Disable battery voltage measurement
 8000a66:	2380      	movs	r3, #128	@ 0x80
 8000a68:	021b      	lsls	r3, r3, #8
 8000a6a:	4815      	ldr	r0, [pc, #84]	@ (8000ac0 <measureBattery+0xa0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0019      	movs	r1, r3
 8000a70:	f001 feb7 	bl	80027e2 <HAL_GPIO_WritePin>

	// Check battery voltage threshold
	if(analogbatt < 3200 && analogbatt >= 3100)
 8000a74:	1dbb      	adds	r3, r7, #6
 8000a76:	881a      	ldrh	r2, [r3, #0]
 8000a78:	23c8      	movs	r3, #200	@ 0xc8
 8000a7a:	011b      	lsls	r3, r3, #4
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d208      	bcs.n	8000a92 <measureBattery+0x72>
 8000a80:	1dbb      	adds	r3, r7, #6
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	4a10      	ldr	r2, [pc, #64]	@ (8000ac8 <measureBattery+0xa8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d903      	bls.n	8000a92 <measureBattery+0x72>
	{
		Low_battery = 1; 									// Set low battery flag if voltage is below threshold
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <measureBattery+0xac>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	e010      	b.n	8000ab4 <measureBattery+0x94>
	}
	else if(analogbatt < 2800 && analogbatt > 0)
 8000a92:	1dbb      	adds	r3, r7, #6
 8000a94:	881a      	ldrh	r2, [r3, #0]
 8000a96:	23af      	movs	r3, #175	@ 0xaf
 8000a98:	011b      	lsls	r3, r3, #4
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d207      	bcs.n	8000aae <measureBattery+0x8e>
 8000a9e:	1dbb      	adds	r3, r7, #6
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <measureBattery+0x8e>
	{
		Low_battery = 2; 									// Set low battery flag flag if voltage is below critical threshold
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <measureBattery+0xac>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	701a      	strb	r2, [r3, #0]
 8000aac:	e002      	b.n	8000ab4 <measureBattery+0x94>
	}
	else
	{
		Low_battery = 0;
 8000aae:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <measureBattery+0xac>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
	}
	return analogbatt; 										// Return battery voltage reading
 8000ab4:	1dbb      	adds	r3, r7, #6
 8000ab6:	881b      	ldrh	r3, [r3, #0]
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b002      	add	sp, #8
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	50000400 	.word	0x50000400
 8000ac4:	200000c0 	.word	0x200000c0
 8000ac8:	00000c1b 	.word	0x00000c1b
 8000acc:	200000ae 	.word	0x200000ae

08000ad0 <monitorBattery>:

// Function to monitor battery voltage
void monitorBattery(void)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
	uint16_t vBatt = measureBattery(); 						// Measure battery voltage
 8000ad6:	1dbc      	adds	r4, r7, #6
 8000ad8:	f7ff ffa2 	bl	8000a20 <measureBattery>
 8000adc:	0003      	movs	r3, r0
 8000ade:	8023      	strh	r3, [r4, #0]
	if(Low_battery == 1)
 8000ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b90 <monitorBattery+0xc0>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d112      	bne.n	8000b10 <monitorBattery+0x40>
	{
		batteryAlarm();
 8000aea:	f000 f861 	bl	8000bb0 <batteryAlarm>
		RTC_AlarmConfig(second[0]);
 8000aee:	4b29      	ldr	r3, [pc, #164]	@ (8000b94 <monitorBattery+0xc4>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 f881 	bl	8000bfc <RTC_AlarmConfig>
		strcpy(message, "Battery low\r\n");
 8000afa:	4b27      	ldr	r3, [pc, #156]	@ (8000b98 <monitorBattery+0xc8>)
 8000afc:	4a27      	ldr	r2, [pc, #156]	@ (8000b9c <monitorBattery+0xcc>)
 8000afe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b00:	c313      	stmia	r3!, {r0, r1, r4}
 8000b02:	8812      	ldrh	r2, [r2, #0]
 8000b04:	801a      	strh	r2, [r3, #0]
		console(message);
 8000b06:	4b24      	ldr	r3, [pc, #144]	@ (8000b98 <monitorBattery+0xc8>)
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 f94b 	bl	8000da4 <console>
 8000b0e:	e02f      	b.n	8000b70 <monitorBattery+0xa0>
	}
	else if(Low_battery == 2)
 8000b10:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <monitorBattery+0xc0>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d12a      	bne.n	8000b70 <monitorBattery+0xa0>
	{
		batteryAlarm();
 8000b1a:	f000 f849 	bl	8000bb0 <batteryAlarm>
		if(item>=6)
 8000b1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <monitorBattery+0xd0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b05      	cmp	r3, #5
 8000b26:	d902      	bls.n	8000b2e <monitorBattery+0x5e>
		{
			item = 0;
 8000b28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba0 <monitorBattery+0xd0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
		}
		RTC_AlarmConfig(second[item++]);
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <monitorBattery+0xd0>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	b2d1      	uxtb	r1, r2
 8000b38:	4a19      	ldr	r2, [pc, #100]	@ (8000ba0 <monitorBattery+0xd0>)
 8000b3a:	7011      	strb	r1, [r2, #0]
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <monitorBattery+0xc4>)
 8000b40:	5c9b      	ldrb	r3, [r3, r2]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	0018      	movs	r0, r3
 8000b46:	f000 f859 	bl	8000bfc <RTC_AlarmConfig>
		if (valve_open == 1)
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <monitorBattery+0xd4>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d101      	bne.n	8000b58 <monitorBattery+0x88>
		{
			closeValve();									// Close Valve if Critically low Battery
 8000b54:	f7ff fefe 	bl	8000954 <closeValve>
		}
		strcpy(message, "Battery critically low\r\n");
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <monitorBattery+0xc8>)
 8000b5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ba8 <monitorBattery+0xd8>)
 8000b5c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b5e:	c313      	stmia	r3!, {r0, r1, r4}
 8000b60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b62:	c313      	stmia	r3!, {r0, r1, r4}
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	701a      	strb	r2, [r3, #0]
		console(message);
 8000b68:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <monitorBattery+0xc8>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 f91a 	bl	8000da4 <console>
	}
	sprintf(message, "Battery Voltage: %d\r\n", vBatt); 	// Format battery voltage message
 8000b70:	1dbb      	adds	r3, r7, #6
 8000b72:	881a      	ldrh	r2, [r3, #0]
 8000b74:	490d      	ldr	r1, [pc, #52]	@ (8000bac <monitorBattery+0xdc>)
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <monitorBattery+0xc8>)
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f005 fa35 	bl	8005fe8 <siprintf>
	console(message); 										// Send battery voltage message via UART
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <monitorBattery+0xc8>)
 8000b80:	0018      	movs	r0, r3
 8000b82:	f000 f90f 	bl	8000da4 <console>
}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b003      	add	sp, #12
 8000b8c:	bd90      	pop	{r4, r7, pc}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	200000ae 	.word	0x200000ae
 8000b94:	20000004 	.word	0x20000004
 8000b98:	20000084 	.word	0x20000084
 8000b9c:	080069c4 	.word	0x080069c4
 8000ba0:	200000b8 	.word	0x200000b8
 8000ba4:	200000af 	.word	0x200000af
 8000ba8:	080069d4 	.word	0x080069d4
 8000bac:	080069f0 	.word	0x080069f0

08000bb0 <batteryAlarm>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); 	// Deactivate battery LED
}

// Function to activate battery Alarm
void batteryAlarm(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); 	// Activate battery LED
 8000bb4:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <batteryAlarm+0x48>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2180      	movs	r1, #128	@ 0x80
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 fe11 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); 	// Activate battery LED
 8000bc0:	2380      	movs	r3, #128	@ 0x80
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <batteryAlarm+0x48>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	0019      	movs	r1, r3
 8000bca:	f001 fe0a 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_Delay(500); 										// Delay for LED indication
 8000bce:	23fa      	movs	r3, #250	@ 0xfa
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 ff08 	bl	80019e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); 	// Deactivate battery LED
 8000bd8:	2380      	movs	r3, #128	@ 0x80
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4806      	ldr	r0, [pc, #24]	@ (8000bf8 <batteryAlarm+0x48>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	0019      	movs	r1, r3
 8000be2:	f001 fdfe 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); 	// Deactivate battery LED
 8000be6:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <batteryAlarm+0x48>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	2180      	movs	r1, #128	@ 0x80
 8000bec:	0018      	movs	r0, r3
 8000bee:	f001 fdf8 	bl	80027e2 <HAL_GPIO_WritePin>
}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	50000400 	.word	0x50000400

08000bfc <RTC_AlarmConfig>:

void RTC_AlarmConfig(uint8_t seconds)
{
 8000bfc:	b5b0      	push	{r4, r5, r7, lr}
 8000bfe:	b092      	sub	sp, #72	@ 0x48
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	0002      	movs	r2, r0
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	701a      	strb	r2, [r3, #0]
	RTC_TimeTypeDef sTime;
	RTC_AlarmTypeDef sAlarm;             					// Declare RTC Alarm structure


	memset(&sAlarm, 0, sizeof(sAlarm));
 8000c08:	2408      	movs	r4, #8
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	2228      	movs	r2, #40	@ 0x28
 8000c0e:	2100      	movs	r1, #0
 8000c10:	0018      	movs	r0, r3
 8000c12:	f005 fa09 	bl	8006028 <memset>
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000c16:	2380      	movs	r3, #128	@ 0x80
 8000c18:	005a      	lsls	r2, r3, #1
 8000c1a:	4b27      	ldr	r3, [pc, #156]	@ (8000cb8 <RTC_AlarmConfig+0xbc>)
 8000c1c:	0011      	movs	r1, r2
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f003 fc02 	bl	8004428 <HAL_RTC_DeactivateAlarm>

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000c24:	2530      	movs	r5, #48	@ 0x30
 8000c26:	1979      	adds	r1, r7, r5
 8000c28:	4b23      	ldr	r3, [pc, #140]	@ (8000cb8 <RTC_AlarmConfig+0xbc>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f003 f9a7 	bl	8003f80 <HAL_RTC_GetTime>
	uint8_t curr_sec = sTime.Seconds + seconds;
 8000c32:	197b      	adds	r3, r7, r5
 8000c34:	7899      	ldrb	r1, [r3, #2]
 8000c36:	2047      	movs	r0, #71	@ 0x47
 8000c38:	183b      	adds	r3, r7, r0
 8000c3a:	1dfa      	adds	r2, r7, #7
 8000c3c:	7812      	ldrb	r2, [r2, #0]
 8000c3e:	188a      	adds	r2, r1, r2
 8000c40:	701a      	strb	r2, [r3, #0]

	sAlarm.AlarmTime.Hours = 0x0;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = curr_sec;
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	183a      	adds	r2, r7, r0
 8000c52:	7812      	ldrb	r2, [r2, #0]
 8000c54:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000c56:	0020      	movs	r0, r4
 8000c58:	183b      	adds	r3, r7, r0
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c5e:	183b      	adds	r3, r7, r0
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c64:	183b      	adds	r3, r7, r0
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000c6a:	183b      	adds	r3, r7, r0
 8000c6c:	4a13      	ldr	r2, [pc, #76]	@ (8000cbc <RTC_AlarmConfig+0xc0>)
 8000c6e:	615a      	str	r2, [r3, #20]
			|RTC_ALARMMASK_MINUTES;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c70:	183b      	adds	r3, r7, r0
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c76:	183b      	adds	r3, r7, r0
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 8000c7c:	183b      	adds	r3, r7, r0
 8000c7e:	2220      	movs	r2, #32
 8000c80:	2101      	movs	r1, #1
 8000c82:	5499      	strb	r1, [r3, r2]
	sAlarm.Alarm = RTC_ALARM_A;
 8000c84:	0001      	movs	r1, r0
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2280      	movs	r2, #128	@ 0x80
 8000c8a:	0052      	lsls	r2, r2, #1
 8000c8c:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD);
 8000c8e:	000c      	movs	r4, r1
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <RTC_AlarmConfig+0xbc>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	0018      	movs	r0, r3
 8000c98:	f003 fa64 	bl	8004164 <HAL_RTC_SetAlarm_IT>

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c9c:	1939      	adds	r1, r7, r4
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <RTC_AlarmConfig+0xbc>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f003 fa5e 	bl	8004164 <HAL_RTC_SetAlarm_IT>
 8000ca8:	1e03      	subs	r3, r0, #0
 8000caa:	d001      	beq.n	8000cb0 <RTC_AlarmConfig+0xb4>
	{
		Error_Handler();
 8000cac:	f000 fbf2 	bl	8001494 <Error_Handler>
	}

}
 8000cb0:	46c0      	nop			@ (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b012      	add	sp, #72	@ 0x48
 8000cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb8:	200001d4 	.word	0x200001d4
 8000cbc:	80808000 	.word	0x80808000

08000cc0 <alert>:

// Function to activate buzzer and warning LED
void alert(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); 		// Activate buzzer
 8000cc4:	2380      	movs	r3, #128	@ 0x80
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4810      	ldr	r0, [pc, #64]	@ (8000d0c <alert+0x4c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	0019      	movs	r1, r3
 8000cce:	f001 fd88 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); 		// Activate warning LED
 8000cd2:	2380      	movs	r3, #128	@ 0x80
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <alert+0x4c>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	0019      	movs	r1, r3
 8000cdc:	f001 fd81 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_Delay(1000);	 										// Delay for alert indication
 8000ce0:	23fa      	movs	r3, #250	@ 0xfa
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f000 fe7f 	bl	80019e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); 		// Deactivate buzzer
 8000cea:	2380      	movs	r3, #128	@ 0x80
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4807      	ldr	r0, [pc, #28]	@ (8000d0c <alert+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	f001 fd75 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); 		// Deactivate warning LED
 8000cf8:	2380      	movs	r3, #128	@ 0x80
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4803      	ldr	r0, [pc, #12]	@ (8000d0c <alert+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	0019      	movs	r1, r3
 8000d02:	f001 fd6e 	bl	80027e2 <HAL_GPIO_WritePin>
}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	50000400 	.word	0x50000400

08000d10 <removeFloodAlert>:
void removeFloodAlert(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); 		// Activate buzzer
 8000d14:	2380      	movs	r3, #128	@ 0x80
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4821      	ldr	r0, [pc, #132]	@ (8000da0 <removeFloodAlert+0x90>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	f001 fd60 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); 		// Activate warning LED
 8000d22:	2380      	movs	r3, #128	@ 0x80
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	481e      	ldr	r0, [pc, #120]	@ (8000da0 <removeFloodAlert+0x90>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	f001 fd59 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_Delay(200);	 											// Delay for alert indication
 8000d30:	20c8      	movs	r0, #200	@ 0xc8
 8000d32:	f000 fe59 	bl	80019e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); 		// Deactivate buzzer
 8000d36:	2380      	movs	r3, #128	@ 0x80
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4819      	ldr	r0, [pc, #100]	@ (8000da0 <removeFloodAlert+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	0019      	movs	r1, r3
 8000d40:	f001 fd4f 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); 		// Deactivate warning LED
 8000d44:	2380      	movs	r3, #128	@ 0x80
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4815      	ldr	r0, [pc, #84]	@ (8000da0 <removeFloodAlert+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	f001 fd48 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_Delay(500);												// Delay for alert indication
 8000d52:	23fa      	movs	r3, #250	@ 0xfa
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 fe46 	bl	80019e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); 		// Activate buzzer
 8000d5c:	2380      	movs	r3, #128	@ 0x80
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	480f      	ldr	r0, [pc, #60]	@ (8000da0 <removeFloodAlert+0x90>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	0019      	movs	r1, r3
 8000d66:	f001 fd3c 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); 		// Activate warning LED
 8000d6a:	2380      	movs	r3, #128	@ 0x80
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <removeFloodAlert+0x90>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	0019      	movs	r1, r3
 8000d74:	f001 fd35 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_Delay(200);	 											// Delay for alert indication
 8000d78:	20c8      	movs	r0, #200	@ 0xc8
 8000d7a:	f000 fe35 	bl	80019e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); 		// Deactivate buzzer
 8000d7e:	2380      	movs	r3, #128	@ 0x80
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4807      	ldr	r0, [pc, #28]	@ (8000da0 <removeFloodAlert+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	0019      	movs	r1, r3
 8000d88:	f001 fd2b 	bl	80027e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); 		// Deactivate warning LED
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <removeFloodAlert+0x90>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	0019      	movs	r1, r3
 8000d96:	f001 fd24 	bl	80027e2 <HAL_GPIO_WritePin>
}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	50000400 	.word	0x50000400

08000da4 <console>:
// Function to transmit messages via UART
void console(char *log)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)log, strlen(log), HAL_MAX_DELAY); // Transmit message via UART
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff f9aa 	bl	8000108 <strlen>
 8000db4:	0003      	movs	r3, r0
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	2301      	movs	r3, #1
 8000dba:	425b      	negs	r3, r3
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	480a      	ldr	r0, [pc, #40]	@ (8000de8 <console+0x44>)
 8000dc0:	f004 fbfe 	bl	80055c0 <HAL_UART_Transmit>
	HAL_Delay(10);
 8000dc4:	200a      	movs	r0, #10
 8000dc6:	f000 fe0f 	bl	80019e8 <HAL_Delay>
	memset(log, '\0', strlen(log)); 										// Clear message buffer
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f7ff f99b 	bl	8000108 <strlen>
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f005 f925 	bl	8006028 <memset>
}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	2000014c 	.word	0x2000014c

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df0:	f000 fd8a 	bl	8001908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df4:	f000 f812 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df8:	f000 faa0 	bl	800133c <MX_GPIO_Init>
  MX_ADC_Init();
 8000dfc:	f000 f88c 	bl	8000f18 <MX_ADC_Init>
  MX_RTC_Init();
 8000e00:	f000 f948 	bl	8001094 <MX_RTC_Init>
  MX_TIM2_Init();
 8000e04:	f000 f9e4 	bl	80011d0 <MX_TIM2_Init>
  MX_TIM21_Init();
 8000e08:	f000 fa42 	bl	8001290 <MX_TIM21_Init>
  MX_LPUART1_UART_Init();
 8000e0c:	f000 f914 	bl	8001038 <MX_LPUART1_UART_Init>
  MX_LPTIM1_Init();
 8000e10:	f000 f8e8 	bl	8000fe4 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8000e14:	f7ff fb5a 	bl	80004cc <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	e7fd      	b.n	8000e18 <main+0x2c>

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b099      	sub	sp, #100	@ 0x64
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	242c      	movs	r4, #44	@ 0x2c
 8000e24:	193b      	adds	r3, r7, r4
 8000e26:	0018      	movs	r0, r3
 8000e28:	2334      	movs	r3, #52	@ 0x34
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f005 f8fb 	bl	8006028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e32:	2318      	movs	r3, #24
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	0018      	movs	r0, r3
 8000e38:	2314      	movs	r3, #20
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f005 f8f3 	bl	8006028 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e42:	003b      	movs	r3, r7
 8000e44:	0018      	movs	r0, r3
 8000e46:	2318      	movs	r3, #24
 8000e48:	001a      	movs	r2, r3
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f005 f8ec 	bl	8006028 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e50:	4b2e      	ldr	r3, [pc, #184]	@ (8000f0c <SystemClock_Config+0xf0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a2e      	ldr	r2, [pc, #184]	@ (8000f10 <SystemClock_Config+0xf4>)
 8000e56:	401a      	ands	r2, r3
 8000e58:	4b2c      	ldr	r3, [pc, #176]	@ (8000f0c <SystemClock_Config+0xf0>)
 8000e5a:	2180      	movs	r1, #128	@ 0x80
 8000e5c:	0109      	lsls	r1, r1, #4
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e62:	f002 f811 	bl	8002e88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e66:	4b2b      	ldr	r3, [pc, #172]	@ (8000f14 <SystemClock_Config+0xf8>)
 8000e68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f14 <SystemClock_Config+0xf8>)
 8000e6c:	4928      	ldr	r1, [pc, #160]	@ (8000f10 <SystemClock_Config+0xf4>)
 8000e6e:	400a      	ands	r2, r1
 8000e70:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	2206      	movs	r2, #6
 8000e76:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	2280      	movs	r2, #128	@ 0x80
 8000e7c:	0052      	lsls	r2, r2, #1
 8000e7e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	2201      	movs	r2, #1
 8000e84:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e86:	193b      	adds	r3, r7, r4
 8000e88:	2210      	movs	r2, #16
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	0018      	movs	r0, r3
 8000e96:	f002 f861 	bl	8002f5c <HAL_RCC_OscConfig>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000e9e:	f000 faf9 	bl	8001494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea2:	2118      	movs	r1, #24
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2201      	movs	r2, #1
 8000eae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f002 fbc4 	bl	8003654 <HAL_RCC_ClockConfig>
 8000ecc:	1e03      	subs	r3, r0, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000ed0:	f000 fae0 	bl	8001494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_RTC
 8000ed4:	003b      	movs	r3, r7
 8000ed6:	22a4      	movs	r2, #164	@ 0xa4
 8000ed8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8000eda:	003b      	movs	r3, r7
 8000edc:	22c0      	movs	r2, #192	@ 0xc0
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	0252      	lsls	r2, r2, #9
 8000ee8:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8000eea:	003b      	movs	r3, r7
 8000eec:	22c0      	movs	r2, #192	@ 0xc0
 8000eee:	0312      	lsls	r2, r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef2:	003b      	movs	r3, r7
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f002 fdd1 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	1e03      	subs	r3, r0, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000efe:	f000 fac9 	bl	8001494 <Error_Handler>
  }
}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b019      	add	sp, #100	@ 0x64
 8000f08:	bd90      	pop	{r4, r7, pc}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	40007000 	.word	0x40007000
 8000f10:	ffffe7ff 	.word	0xffffe7ff
 8000f14:	40021000 	.word	0x40021000

08000f18 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1e:	003b      	movs	r3, r7
 8000f20:	0018      	movs	r0, r3
 8000f22:	2308      	movs	r3, #8
 8000f24:	001a      	movs	r2, r3
 8000f26:	2100      	movs	r1, #0
 8000f28:	f005 f87e 	bl	8006028 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8000fdc <MX_ADC_Init+0xc4>)
 8000f30:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000f32:	4b29      	ldr	r3, [pc, #164]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000f38:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f3a:	22c0      	movs	r2, #192	@ 0xc0
 8000f3c:	0612      	lsls	r2, r2, #24
 8000f3e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f40:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000f46:	4b24      	ldr	r3, [pc, #144]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f52:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f62:	2221      	movs	r2, #33	@ 0x21
 8000f64:	2100      	movs	r1, #0
 8000f66:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f70:	22c2      	movs	r2, #194	@ 0xc2
 8000f72:	32ff      	adds	r2, #255	@ 0xff
 8000f74:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f76:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f78:	222c      	movs	r2, #44	@ 0x2c
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f80:	2204      	movs	r2, #4
 8000f82:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000f90:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 fd62 	bl	8001a68 <HAL_ADC_Init>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000fa8:	f000 fa74 	bl	8001494 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fac:	003b      	movs	r3, r7
 8000fae:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe0 <MX_ADC_Init+0xc8>)
 8000fb0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2280      	movs	r2, #128	@ 0x80
 8000fb6:	0152      	lsls	r2, r2, #5
 8000fb8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fba:	003a      	movs	r2, r7
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <MX_ADC_Init+0xc0>)
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f001 f801 	bl	8001fc8 <HAL_ADC_ConfigChannel>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000fca:	f000 fa63 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	200000c0 	.word	0x200000c0
 8000fdc:	40012400 	.word	0x40012400
 8000fe0:	24000200 	.word	0x24000200

08000fe4 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000fe8:	4b10      	ldr	r3, [pc, #64]	@ (800102c <MX_LPTIM1_Init+0x48>)
 8000fea:	4a11      	ldr	r2, [pc, #68]	@ (8001030 <MX_LPTIM1_Init+0x4c>)
 8000fec:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <MX_LPTIM1_Init+0x48>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <MX_LPTIM1_Init+0x48>)
 8000ff6:	2280      	movs	r2, #128	@ 0x80
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <MX_LPTIM1_Init+0x48>)
 8000ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <MX_LPTIM1_Init+0x50>)
 8001000:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <MX_LPTIM1_Init+0x48>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <MX_LPTIM1_Init+0x48>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <MX_LPTIM1_Init+0x48>)
 8001010:	2200      	movs	r2, #0
 8001012:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <MX_LPTIM1_Init+0x48>)
 8001016:	0018      	movs	r0, r3
 8001018:	f001 fc1c 	bl	8002854 <HAL_LPTIM_Init>
 800101c:	1e03      	subs	r3, r0, #0
 800101e:	d001      	beq.n	8001024 <MX_LPTIM1_Init+0x40>
  {
    Error_Handler();
 8001020:	f000 fa38 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001024:	46c0      	nop			@ (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	2000011c 	.word	0x2000011c
 8001030:	40007c00 	.word	0x40007c00
 8001034:	0000ffff 	.word	0x0000ffff

08001038 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_LPUART1_UART_Init+0x54>)
 800103e:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <MX_LPUART1_UART_Init+0x58>)
 8001040:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <MX_LPUART1_UART_Init+0x54>)
 8001044:	2296      	movs	r2, #150	@ 0x96
 8001046:	0192      	lsls	r2, r2, #6
 8001048:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <MX_LPUART1_UART_Init+0x54>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_LPUART1_UART_Init+0x54>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001056:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <MX_LPUART1_UART_Init+0x54>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MX_LPUART1_UART_Init+0x54>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <MX_LPUART1_UART_Init+0x54>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_LPUART1_UART_Init+0x54>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <MX_LPUART1_UART_Init+0x54>)
 8001070:	2200      	movs	r2, #0
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <MX_LPUART1_UART_Init+0x54>)
 8001076:	0018      	movs	r0, r3
 8001078:	f004 fa4e 	bl	8005518 <HAL_UART_Init>
 800107c:	1e03      	subs	r3, r0, #0
 800107e:	d001      	beq.n	8001084 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001080:	f000 fa08 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001084:	46c0      	nop			@ (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	2000014c 	.word	0x2000014c
 8001090:	40004800 	.word	0x40004800

08001094 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b090      	sub	sp, #64	@ 0x40
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800109a:	232c      	movs	r3, #44	@ 0x2c
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	0018      	movs	r0, r3
 80010a0:	2314      	movs	r3, #20
 80010a2:	001a      	movs	r2, r3
 80010a4:	2100      	movs	r1, #0
 80010a6:	f004 ffbf 	bl	8006028 <memset>
  RTC_DateTypeDef sDate = {0};
 80010aa:	2328      	movs	r3, #40	@ 0x28
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80010b2:	003b      	movs	r3, r7
 80010b4:	0018      	movs	r0, r3
 80010b6:	2328      	movs	r3, #40	@ 0x28
 80010b8:	001a      	movs	r2, r3
 80010ba:	2100      	movs	r1, #0
 80010bc:	f004 ffb4 	bl	8006028 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010c0:	4b40      	ldr	r3, [pc, #256]	@ (80011c4 <MX_RTC_Init+0x130>)
 80010c2:	4a41      	ldr	r2, [pc, #260]	@ (80011c8 <MX_RTC_Init+0x134>)
 80010c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010c6:	4b3f      	ldr	r3, [pc, #252]	@ (80011c4 <MX_RTC_Init+0x130>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010cc:	4b3d      	ldr	r3, [pc, #244]	@ (80011c4 <MX_RTC_Init+0x130>)
 80010ce:	227f      	movs	r2, #127	@ 0x7f
 80010d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010d2:	4b3c      	ldr	r3, [pc, #240]	@ (80011c4 <MX_RTC_Init+0x130>)
 80010d4:	22ff      	movs	r2, #255	@ 0xff
 80010d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010d8:	4b3a      	ldr	r3, [pc, #232]	@ (80011c4 <MX_RTC_Init+0x130>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010de:	4b39      	ldr	r3, [pc, #228]	@ (80011c4 <MX_RTC_Init+0x130>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010e4:	4b37      	ldr	r3, [pc, #220]	@ (80011c4 <MX_RTC_Init+0x130>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010ea:	4b36      	ldr	r3, [pc, #216]	@ (80011c4 <MX_RTC_Init+0x130>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010f0:	4b34      	ldr	r3, [pc, #208]	@ (80011c4 <MX_RTC_Init+0x130>)
 80010f2:	0018      	movs	r0, r3
 80010f4:	f002 fdfe 	bl	8003cf4 <HAL_RTC_Init>
 80010f8:	1e03      	subs	r3, r0, #0
 80010fa:	d001      	beq.n	8001100 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80010fc:	f000 f9ca 	bl	8001494 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x15;
 8001100:	212c      	movs	r1, #44	@ 0x2c
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2215      	movs	r2, #21
 8001106:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x49;
 8001108:	187b      	adds	r3, r7, r1
 800110a:	2249      	movs	r2, #73	@ 0x49
 800110c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800110e:	187b      	adds	r3, r7, r1
 8001110:	2200      	movs	r2, #0
 8001112:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001114:	187b      	adds	r3, r7, r1
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800111a:	187b      	adds	r3, r7, r1
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001120:	1879      	adds	r1, r7, r1
 8001122:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <MX_RTC_Init+0x130>)
 8001124:	2201      	movs	r2, #1
 8001126:	0018      	movs	r0, r3
 8001128:	f002 fe80 	bl	8003e2c <HAL_RTC_SetTime>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8001130:	f000 f9b0 	bl	8001494 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001134:	2128      	movs	r1, #40	@ 0x28
 8001136:	187b      	adds	r3, r7, r1
 8001138:	2203      	movs	r2, #3
 800113a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JULY;
 800113c:	187b      	adds	r3, r7, r1
 800113e:	2207      	movs	r2, #7
 8001140:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x26;
 8001142:	187b      	adds	r3, r7, r1
 8001144:	2226      	movs	r2, #38	@ 0x26
 8001146:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 8001148:	187b      	adds	r3, r7, r1
 800114a:	2224      	movs	r2, #36	@ 0x24
 800114c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800114e:	1879      	adds	r1, r7, r1
 8001150:	4b1c      	ldr	r3, [pc, #112]	@ (80011c4 <MX_RTC_Init+0x130>)
 8001152:	2201      	movs	r2, #1
 8001154:	0018      	movs	r0, r3
 8001156:	f002 ff71 	bl	800403c <HAL_RTC_SetDate>
 800115a:	1e03      	subs	r3, r0, #0
 800115c:	d001      	beq.n	8001162 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800115e:	f000 f999 	bl	8001494 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001162:	003b      	movs	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001168:	003b      	movs	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800116e:	003b      	movs	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001174:	003b      	movs	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800117a:	003b      	movs	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001180:	003b      	movs	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS;
 8001186:	003b      	movs	r3, r7
 8001188:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <MX_RTC_Init+0x138>)
 800118a:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800118c:	003b      	movs	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001192:	003b      	movs	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001198:	003b      	movs	r3, r7
 800119a:	2220      	movs	r2, #32
 800119c:	2101      	movs	r1, #1
 800119e:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80011a0:	003b      	movs	r3, r7
 80011a2:	2280      	movs	r2, #128	@ 0x80
 80011a4:	0052      	lsls	r2, r2, #1
 80011a6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80011a8:	0039      	movs	r1, r7
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_RTC_Init+0x130>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	0018      	movs	r0, r3
 80011b0:	f002 ffd8 	bl	8004164 <HAL_RTC_SetAlarm_IT>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d001      	beq.n	80011bc <MX_RTC_Init+0x128>
  {
    Error_Handler();
 80011b8:	f000 f96c 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011bc:	46c0      	nop			@ (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b010      	add	sp, #64	@ 0x40
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200001d4 	.word	0x200001d4
 80011c8:	40002800 	.word	0x40002800
 80011cc:	80800000 	.word	0x80800000

080011d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d6:	2310      	movs	r3, #16
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	0018      	movs	r0, r3
 80011dc:	2308      	movs	r3, #8
 80011de:	001a      	movs	r2, r3
 80011e0:	2100      	movs	r1, #0
 80011e2:	f004 ff21 	bl	8006028 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e6:	003b      	movs	r3, r7
 80011e8:	0018      	movs	r0, r3
 80011ea:	2310      	movs	r3, #16
 80011ec:	001a      	movs	r2, r3
 80011ee:	2100      	movs	r1, #0
 80011f0:	f004 ff1a 	bl	8006028 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f4:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <MX_TIM2_Init+0xb8>)
 80011f6:	2280      	movs	r2, #128	@ 0x80
 80011f8:	05d2      	lsls	r2, r2, #23
 80011fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <MX_TIM2_Init+0xb8>)
 80011fe:	2210      	movs	r2, #16
 8001200:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <MX_TIM2_Init+0xb8>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2100;
 8001208:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <MX_TIM2_Init+0xb8>)
 800120a:	4a20      	ldr	r2, [pc, #128]	@ (800128c <MX_TIM2_Init+0xbc>)
 800120c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <MX_TIM2_Init+0xb8>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <MX_TIM2_Init+0xb8>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800121a:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <MX_TIM2_Init+0xb8>)
 800121c:	0018      	movs	r0, r3
 800121e:	f003 fb7b 	bl	8004918 <HAL_TIM_PWM_Init>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001226:	f000 f935 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122a:	2110      	movs	r1, #16
 800122c:	187b      	adds	r3, r7, r1
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	187b      	adds	r3, r7, r1
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001238:	187a      	adds	r2, r7, r1
 800123a:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <MX_TIM2_Init+0xb8>)
 800123c:	0011      	movs	r1, r2
 800123e:	0018      	movs	r0, r3
 8001240:	f004 f91a 	bl	8005478 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	1e03      	subs	r3, r0, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001248:	f000 f924 	bl	8001494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124c:	003b      	movs	r3, r7
 800124e:	2260      	movs	r2, #96	@ 0x60
 8001250:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001252:	003b      	movs	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001258:	003b      	movs	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	003b      	movs	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001264:	0039      	movs	r1, r7
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <MX_TIM2_Init+0xb8>)
 8001268:	2200      	movs	r2, #0
 800126a:	0018      	movs	r0, r3
 800126c:	f003 fd3e 	bl	8004cec <HAL_TIM_PWM_ConfigChannel>
 8001270:	1e03      	subs	r3, r0, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001274:	f000 f90e 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <MX_TIM2_Init+0xb8>)
 800127a:	0018      	movs	r0, r3
 800127c:	f000 fa2c 	bl	80016d8 <HAL_TIM_MspPostInit>

}
 8001280:	46c0      	nop			@ (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b006      	add	sp, #24
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200001f8 	.word	0x200001f8
 800128c:	00000834 	.word	0x00000834

08001290 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	2308      	movs	r3, #8
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	0018      	movs	r0, r3
 800129c:	2310      	movs	r3, #16
 800129e:	001a      	movs	r2, r3
 80012a0:	2100      	movs	r1, #0
 80012a2:	f004 fec1 	bl	8006028 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a6:	003b      	movs	r3, r7
 80012a8:	0018      	movs	r0, r3
 80012aa:	2308      	movs	r3, #8
 80012ac:	001a      	movs	r2, r3
 80012ae:	2100      	movs	r1, #0
 80012b0:	f004 feba 	bl	8006028 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <MX_TIM21_Init+0xa0>)
 80012b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001334 <MX_TIM21_Init+0xa4>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 31;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001330 <MX_TIM21_Init+0xa0>)
 80012bc:	221f      	movs	r2, #31
 80012be:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <MX_TIM21_Init+0xa0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 49999;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <MX_TIM21_Init+0xa0>)
 80012c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001338 <MX_TIM21_Init+0xa8>)
 80012ca:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <MX_TIM21_Init+0xa0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d2:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <MX_TIM21_Init+0xa0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <MX_TIM21_Init+0xa0>)
 80012da:	0018      	movs	r0, r3
 80012dc:	f003 fa72 	bl	80047c4 <HAL_TIM_Base_Init>
 80012e0:	1e03      	subs	r3, r0, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 80012e4:	f000 f8d6 	bl	8001494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e8:	2108      	movs	r1, #8
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	2280      	movs	r2, #128	@ 0x80
 80012ee:	0152      	lsls	r2, r2, #5
 80012f0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80012f2:	187a      	adds	r2, r7, r1
 80012f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <MX_TIM21_Init+0xa0>)
 80012f6:	0011      	movs	r1, r2
 80012f8:	0018      	movs	r0, r3
 80012fa:	f003 fdbd 	bl	8004e78 <HAL_TIM_ConfigClockSource>
 80012fe:	1e03      	subs	r3, r0, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8001302:	f000 f8c7 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001306:	003b      	movs	r3, r7
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130c:	003b      	movs	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001312:	003a      	movs	r2, r7
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <MX_TIM21_Init+0xa0>)
 8001316:	0011      	movs	r1, r2
 8001318:	0018      	movs	r0, r3
 800131a:	f004 f8ad 	bl	8005478 <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	1e03      	subs	r3, r0, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8001322:	f000 f8b7 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	46bd      	mov	sp, r7
 800132a:	b006      	add	sp, #24
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	20000238 	.word	0x20000238
 8001334:	40010800 	.word	0x40010800
 8001338:	0000c34f 	.word	0x0000c34f

0800133c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b089      	sub	sp, #36	@ 0x24
 8001340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	240c      	movs	r4, #12
 8001344:	193b      	adds	r3, r7, r4
 8001346:	0018      	movs	r0, r3
 8001348:	2314      	movs	r3, #20
 800134a:	001a      	movs	r2, r3
 800134c:	2100      	movs	r1, #0
 800134e:	f004 fe6b 	bl	8006028 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	4b4d      	ldr	r3, [pc, #308]	@ (8001488 <MX_GPIO_Init+0x14c>)
 8001354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001356:	4b4c      	ldr	r3, [pc, #304]	@ (8001488 <MX_GPIO_Init+0x14c>)
 8001358:	2104      	movs	r1, #4
 800135a:	430a      	orrs	r2, r1
 800135c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800135e:	4b4a      	ldr	r3, [pc, #296]	@ (8001488 <MX_GPIO_Init+0x14c>)
 8001360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001362:	2204      	movs	r2, #4
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b47      	ldr	r3, [pc, #284]	@ (8001488 <MX_GPIO_Init+0x14c>)
 800136c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800136e:	4b46      	ldr	r3, [pc, #280]	@ (8001488 <MX_GPIO_Init+0x14c>)
 8001370:	2101      	movs	r1, #1
 8001372:	430a      	orrs	r2, r1
 8001374:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001376:	4b44      	ldr	r3, [pc, #272]	@ (8001488 <MX_GPIO_Init+0x14c>)
 8001378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137a:	2201      	movs	r2, #1
 800137c:	4013      	ands	r3, r2
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b41      	ldr	r3, [pc, #260]	@ (8001488 <MX_GPIO_Init+0x14c>)
 8001384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001386:	4b40      	ldr	r3, [pc, #256]	@ (8001488 <MX_GPIO_Init+0x14c>)
 8001388:	2102      	movs	r1, #2
 800138a:	430a      	orrs	r2, r1
 800138c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800138e:	4b3e      	ldr	r3, [pc, #248]	@ (8001488 <MX_GPIO_Init+0x14c>)
 8001390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001392:	2202      	movs	r2, #2
 8001394:	4013      	ands	r3, r2
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800139a:	23a0      	movs	r3, #160	@ 0xa0
 800139c:	05db      	lsls	r3, r3, #23
 800139e:	2200      	movs	r2, #0
 80013a0:	21a0      	movs	r1, #160	@ 0xa0
 80013a2:	0018      	movs	r0, r3
 80013a4:	f001 fa1d 	bl	80027e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80013a8:	4938      	ldr	r1, [pc, #224]	@ (800148c <MX_GPIO_Init+0x150>)
 80013aa:	4b39      	ldr	r3, [pc, #228]	@ (8001490 <MX_GPIO_Init+0x154>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	0018      	movs	r0, r3
 80013b0:	f001 fa17 	bl	80027e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	2220      	movs	r2, #32
 80013b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	193b      	adds	r3, r7, r4
 80013bc:	2201      	movs	r2, #1
 80013be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	193b      	adds	r3, r7, r4
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	193b      	adds	r3, r7, r4
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	193a      	adds	r2, r7, r4
 80013ce:	23a0      	movs	r3, #160	@ 0xa0
 80013d0:	05db      	lsls	r3, r3, #23
 80013d2:	0011      	movs	r1, r2
 80013d4:	0018      	movs	r0, r3
 80013d6:	f001 f879 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	2280      	movs	r2, #128	@ 0x80
 80013de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	193b      	adds	r3, r7, r4
 80013e2:	2201      	movs	r2, #1
 80013e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013e6:	193b      	adds	r3, r7, r4
 80013e8:	2202      	movs	r2, #2
 80013ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	193b      	adds	r3, r7, r4
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	193a      	adds	r2, r7, r4
 80013f4:	23a0      	movs	r3, #160	@ 0xa0
 80013f6:	05db      	lsls	r3, r3, #23
 80013f8:	0011      	movs	r1, r2
 80013fa:	0018      	movs	r0, r3
 80013fc:	f001 f866 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001400:	193b      	adds	r3, r7, r4
 8001402:	4a22      	ldr	r2, [pc, #136]	@ (800148c <MX_GPIO_Init+0x150>)
 8001404:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	193b      	adds	r3, r7, r4
 8001408:	2201      	movs	r2, #1
 800140a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	193b      	adds	r3, r7, r4
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	193b      	adds	r3, r7, r4
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	193b      	adds	r3, r7, r4
 800141a:	4a1d      	ldr	r2, [pc, #116]	@ (8001490 <MX_GPIO_Init+0x154>)
 800141c:	0019      	movs	r1, r3
 800141e:	0010      	movs	r0, r2
 8001420:	f001 f854 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001424:	193b      	adds	r3, r7, r4
 8001426:	2280      	movs	r2, #128	@ 0x80
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800142c:	193b      	adds	r3, r7, r4
 800142e:	2284      	movs	r2, #132	@ 0x84
 8001430:	0392      	lsls	r2, r2, #14
 8001432:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	193b      	adds	r3, r7, r4
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	193a      	adds	r2, r7, r4
 800143c:	23a0      	movs	r3, #160	@ 0xa0
 800143e:	05db      	lsls	r3, r3, #23
 8001440:	0011      	movs	r1, r2
 8001442:	0018      	movs	r0, r3
 8001444:	f001 f842 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001448:	0021      	movs	r1, r4
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2280      	movs	r2, #128	@ 0x80
 800144e:	0212      	lsls	r2, r2, #8
 8001450:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001452:	187b      	adds	r3, r7, r1
 8001454:	22c4      	movs	r2, #196	@ 0xc4
 8001456:	0392      	lsls	r2, r2, #14
 8001458:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	187b      	adds	r3, r7, r1
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	187a      	adds	r2, r7, r1
 8001462:	23a0      	movs	r3, #160	@ 0xa0
 8001464:	05db      	lsls	r3, r3, #23
 8001466:	0011      	movs	r1, r2
 8001468:	0018      	movs	r0, r3
 800146a:	f001 f82f 	bl	80024cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	2007      	movs	r0, #7
 8001474:	f000 fff8 	bl	8002468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001478:	2007      	movs	r0, #7
 800147a:	f001 f80a 	bl	8002492 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b009      	add	sp, #36	@ 0x24
 8001484:	bd90      	pop	{r4, r7, pc}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	40021000 	.word	0x40021000
 800148c:	00008380 	.word	0x00008380
 8001490:	50000400 	.word	0x50000400

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149c:	46c0      	nop			@ (mov r8, r8)
 800149e:	e7fd      	b.n	800149c <Error_Handler+0x8>

080014a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a4:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <HAL_MspInit+0x34>)
 80014a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014a8:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_MspInit+0x34>)
 80014aa:	2101      	movs	r1, #1
 80014ac:	430a      	orrs	r2, r1
 80014ae:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <HAL_MspInit+0x34>)
 80014b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014b4:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <HAL_MspInit+0x34>)
 80014b6:	2180      	movs	r1, #128	@ 0x80
 80014b8:	0549      	lsls	r1, r1, #21
 80014ba:	430a      	orrs	r2, r1
 80014bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	2004      	movs	r0, #4
 80014c4:	f000 ffd0 	bl	8002468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80014c8:	2004      	movs	r0, #4
 80014ca:	f000 ffe2 	bl	8002492 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000

080014d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b089      	sub	sp, #36	@ 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	240c      	movs	r4, #12
 80014e2:	193b      	adds	r3, r7, r4
 80014e4:	0018      	movs	r0, r3
 80014e6:	2314      	movs	r3, #20
 80014e8:	001a      	movs	r2, r3
 80014ea:	2100      	movs	r1, #0
 80014ec:	f004 fd9c 	bl	8006028 <memset>
  if(hadc->Instance==ADC1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a14      	ldr	r2, [pc, #80]	@ (8001548 <HAL_ADC_MspInit+0x70>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d121      	bne.n	800153e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014fa:	4b14      	ldr	r3, [pc, #80]	@ (800154c <HAL_ADC_MspInit+0x74>)
 80014fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014fe:	4b13      	ldr	r3, [pc, #76]	@ (800154c <HAL_ADC_MspInit+0x74>)
 8001500:	2180      	movs	r1, #128	@ 0x80
 8001502:	0089      	lsls	r1, r1, #2
 8001504:	430a      	orrs	r2, r1
 8001506:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b10      	ldr	r3, [pc, #64]	@ (800154c <HAL_ADC_MspInit+0x74>)
 800150a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <HAL_ADC_MspInit+0x74>)
 800150e:	2102      	movs	r1, #2
 8001510:	430a      	orrs	r2, r1
 8001512:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001514:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <HAL_ADC_MspInit+0x74>)
 8001516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001518:	2202      	movs	r2, #2
 800151a:	4013      	ands	r3, r2
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001520:	193b      	adds	r3, r7, r4
 8001522:	2202      	movs	r2, #2
 8001524:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001526:	193b      	adds	r3, r7, r4
 8001528:	2203      	movs	r2, #3
 800152a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	193b      	adds	r3, r7, r4
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	193b      	adds	r3, r7, r4
 8001534:	4a06      	ldr	r2, [pc, #24]	@ (8001550 <HAL_ADC_MspInit+0x78>)
 8001536:	0019      	movs	r1, r3
 8001538:	0010      	movs	r0, r2
 800153a:	f000 ffc7 	bl	80024cc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b009      	add	sp, #36	@ 0x24
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	40012400 	.word	0x40012400
 800154c:	40021000 	.word	0x40021000
 8001550:	50000400 	.word	0x50000400

08001554 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <HAL_LPTIM_MspInit+0x38>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10e      	bne.n	8001584 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_LPTIM_MspInit+0x3c>)
 8001568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <HAL_LPTIM_MspInit+0x3c>)
 800156c:	2180      	movs	r1, #128	@ 0x80
 800156e:	0609      	lsls	r1, r1, #24
 8001570:	430a      	orrs	r2, r1
 8001572:	639a      	str	r2, [r3, #56]	@ 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2100      	movs	r1, #0
 8001578:	200d      	movs	r0, #13
 800157a:	f000 ff75 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800157e:	200d      	movs	r0, #13
 8001580:	f000 ff87 	bl	8002492 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 8001584:	46c0      	nop			@ (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	b002      	add	sp, #8
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40007c00 	.word	0x40007c00
 8001590:	40021000 	.word	0x40021000

08001594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b089      	sub	sp, #36	@ 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	240c      	movs	r4, #12
 800159e:	193b      	adds	r3, r7, r4
 80015a0:	0018      	movs	r0, r3
 80015a2:	2314      	movs	r3, #20
 80015a4:	001a      	movs	r2, r3
 80015a6:	2100      	movs	r1, #0
 80015a8:	f004 fd3e 	bl	8006028 <memset>
  if(huart->Instance==LPUART1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a18      	ldr	r2, [pc, #96]	@ (8001614 <HAL_UART_MspInit+0x80>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d129      	bne.n	800160a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80015b6:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <HAL_UART_MspInit+0x84>)
 80015b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015ba:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <HAL_UART_MspInit+0x84>)
 80015bc:	2180      	movs	r1, #128	@ 0x80
 80015be:	02c9      	lsls	r1, r1, #11
 80015c0:	430a      	orrs	r2, r1
 80015c2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_UART_MspInit+0x84>)
 80015c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <HAL_UART_MspInit+0x84>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	430a      	orrs	r2, r1
 80015ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_UART_MspInit+0x84>)
 80015d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d4:	2201      	movs	r2, #1
 80015d6:	4013      	ands	r3, r2
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015dc:	0021      	movs	r1, r4
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	220c      	movs	r2, #12
 80015e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	2202      	movs	r2, #2
 80015e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	2203      	movs	r2, #3
 80015f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	2206      	movs	r2, #6
 80015fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	187a      	adds	r2, r7, r1
 80015fe:	23a0      	movs	r3, #160	@ 0xa0
 8001600:	05db      	lsls	r3, r3, #23
 8001602:	0011      	movs	r1, r2
 8001604:	0018      	movs	r0, r3
 8001606:	f000 ff61 	bl	80024cc <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800160a:	46c0      	nop			@ (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b009      	add	sp, #36	@ 0x24
 8001610:	bd90      	pop	{r4, r7, pc}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	40004800 	.word	0x40004800
 8001618:	40021000 	.word	0x40021000

0800161c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <HAL_RTC_MspInit+0x38>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d10e      	bne.n	800164c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800162e:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_RTC_MspInit+0x3c>)
 8001630:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <HAL_RTC_MspInit+0x3c>)
 8001634:	2180      	movs	r1, #128	@ 0x80
 8001636:	02c9      	lsls	r1, r1, #11
 8001638:	430a      	orrs	r2, r1
 800163a:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2002      	movs	r0, #2
 8001642:	f000 ff11 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001646:	2002      	movs	r0, #2
 8001648:	f000 ff23 	bl	8002492 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800164c:	46c0      	nop			@ (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b002      	add	sp, #8
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40002800 	.word	0x40002800
 8001658:	40021000 	.word	0x40021000

0800165c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	2380      	movs	r3, #128	@ 0x80
 800166a:	05db      	lsls	r3, r3, #23
 800166c:	429a      	cmp	r2, r3
 800166e:	d10d      	bne.n	800168c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <HAL_TIM_PWM_MspInit+0x38>)
 8001672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001674:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <HAL_TIM_PWM_MspInit+0x38>)
 8001676:	2101      	movs	r1, #1
 8001678:	430a      	orrs	r2, r1
 800167a:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	200f      	movs	r0, #15
 8001682:	f000 fef1 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001686:	200f      	movs	r0, #15
 8001688:	f000 ff03 	bl	8002492 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800168c:	46c0      	nop			@ (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	b002      	add	sp, #8
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <HAL_TIM_Base_MspInit+0x38>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d10d      	bne.n	80016c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <HAL_TIM_Base_MspInit+0x3c>)
 80016ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <HAL_TIM_Base_MspInit+0x3c>)
 80016b0:	2104      	movs	r1, #4
 80016b2:	430a      	orrs	r2, r1
 80016b4:	635a      	str	r2, [r3, #52]	@ 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2014      	movs	r0, #20
 80016bc:	f000 fed4 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80016c0:	2014      	movs	r0, #20
 80016c2:	f000 fee6 	bl	8002492 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM21_MspInit 1 */

  }

}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b002      	add	sp, #8
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	40010800 	.word	0x40010800
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b089      	sub	sp, #36	@ 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	240c      	movs	r4, #12
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	0018      	movs	r0, r3
 80016e6:	2314      	movs	r3, #20
 80016e8:	001a      	movs	r2, r3
 80016ea:	2100      	movs	r1, #0
 80016ec:	f004 fc9c 	bl	8006028 <memset>
  if(htim->Instance==TIM2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2380      	movs	r3, #128	@ 0x80
 80016f6:	05db      	lsls	r3, r3, #23
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d123      	bne.n	8001744 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <HAL_TIM_MspPostInit+0x74>)
 80016fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <HAL_TIM_MspPostInit+0x74>)
 8001702:	2101      	movs	r1, #1
 8001704:	430a      	orrs	r2, r1
 8001706:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <HAL_TIM_MspPostInit+0x74>)
 800170a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170c:	2201      	movs	r2, #1
 800170e:	4013      	ands	r3, r2
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA8     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001714:	193b      	adds	r3, r7, r4
 8001716:	2280      	movs	r2, #128	@ 0x80
 8001718:	0052      	lsls	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	0021      	movs	r1, r4
 800171e:	187b      	adds	r3, r7, r1
 8001720:	2202      	movs	r2, #2
 8001722:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	187b      	adds	r3, r7, r1
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	187b      	adds	r3, r7, r1
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8001730:	187b      	adds	r3, r7, r1
 8001732:	2205      	movs	r2, #5
 8001734:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	187a      	adds	r2, r7, r1
 8001738:	23a0      	movs	r3, #160	@ 0xa0
 800173a:	05db      	lsls	r3, r3, #23
 800173c:	0011      	movs	r1, r2
 800173e:	0018      	movs	r0, r3
 8001740:	f000 fec4 	bl	80024cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001744:	46c0      	nop			@ (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	b009      	add	sp, #36	@ 0x24
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	40021000 	.word	0x40021000

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001754:	46c0      	nop			@ (mov r8, r8)
 8001756:	e7fd      	b.n	8001754 <NMI_Handler+0x4>

08001758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175c:	46c0      	nop			@ (mov r8, r8)
 800175e:	e7fd      	b.n	800175c <HardFault_Handler+0x4>

08001760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001764:	46c0      	nop			@ (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 f91a 	bl	80019b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	46c0      	nop			@ (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <RTC_IRQHandler+0x14>)
 800178a:	0018      	movs	r0, r3
 800178c:	f002 feee 	bl	800456c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001790:	46c0      	nop			@ (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	200001d4 	.word	0x200001d4

0800179c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80017a0:	46c0      	nop			@ (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	0018      	movs	r0, r3
 80017b0:	f001 f834 	bl	800281c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80017b4:	2380      	movs	r3, #128	@ 0x80
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	0018      	movs	r0, r3
 80017ba:	f001 f82f 	bl	800281c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <LPTIM1_IRQHandler+0x14>)
 80017ca:	0018      	movs	r0, r3
 80017cc:	f001 f97e 	bl	8002acc <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80017d0:	46c0      	nop			@ (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	2000011c 	.word	0x2000011c

080017dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <TIM2_IRQHandler+0x14>)
 80017e2:	0018      	movs	r0, r3
 80017e4:	f003 f99a 	bl	8004b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017e8:	46c0      	nop			@ (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	200001f8 	.word	0x200001f8

080017f4 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <TIM21_IRQHandler+0x14>)
 80017fa:	0018      	movs	r0, r3
 80017fc:	f003 f98e 	bl	8004b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001800:	46c0      	nop			@ (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	20000238 	.word	0x20000238

0800180c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001814:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	18d3      	adds	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800183c:	f004 fbfc 	bl	8006038 <__errno>
 8001840:	0003      	movs	r3, r0
 8001842:	220c      	movs	r2, #12
 8001844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001846:	2301      	movs	r3, #1
 8001848:	425b      	negs	r3, r3
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800184c:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001852:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	18d2      	adds	r2, r2, r3
 800185a:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <_sbrk+0x64>)
 800185c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	0018      	movs	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	b006      	add	sp, #24
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20002000 	.word	0x20002000
 800186c:	00000400 	.word	0x00000400
 8001870:	20000278 	.word	0x20000278
 8001874:	200003c8 	.word	0x200003c8

08001878 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800187c:	46c0      	nop			@ (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001884:	4813      	ldr	r0, [pc, #76]	@ (80018d4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001886:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001888:	f7ff fff6 	bl	8001878 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800188c:	4812      	ldr	r0, [pc, #72]	@ (80018d8 <LoopForever+0x6>)
    LDR R1, [R0]
 800188e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001890:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001892:	4a12      	ldr	r2, [pc, #72]	@ (80018dc <LoopForever+0xa>)
    CMP R1, R2
 8001894:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001896:	d105      	bne.n	80018a4 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001898:	4811      	ldr	r0, [pc, #68]	@ (80018e0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800189a:	4912      	ldr	r1, [pc, #72]	@ (80018e4 <LoopForever+0x12>)
    STR R1, [R0]
 800189c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800189e:	4812      	ldr	r0, [pc, #72]	@ (80018e8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80018a0:	4912      	ldr	r1, [pc, #72]	@ (80018ec <LoopForever+0x1a>)
    STR R1, [R0]
 80018a2:	6001      	str	r1, [r0, #0]

080018a4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a4:	4812      	ldr	r0, [pc, #72]	@ (80018f0 <LoopForever+0x1e>)
  ldr r1, =_edata
 80018a6:	4913      	ldr	r1, [pc, #76]	@ (80018f4 <LoopForever+0x22>)
  ldr r2, =_sidata
 80018a8:	4a13      	ldr	r2, [pc, #76]	@ (80018f8 <LoopForever+0x26>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ac:	e002      	b.n	80018b4 <LoopCopyDataInit>

080018ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b2:	3304      	adds	r3, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b8:	d3f9      	bcc.n	80018ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ba:	4a10      	ldr	r2, [pc, #64]	@ (80018fc <LoopForever+0x2a>)
  ldr r4, =_ebss
 80018bc:	4c10      	ldr	r4, [pc, #64]	@ (8001900 <LoopForever+0x2e>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c0:	e001      	b.n	80018c6 <LoopFillZerobss>

080018c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c4:	3204      	adds	r2, #4

080018c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ca:	f004 fbbb 	bl	8006044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ce:	f7ff fa8d 	bl	8000dec <main>

080018d2 <LoopForever>:

LoopForever:
    b LoopForever
 80018d2:	e7fe      	b.n	80018d2 <LoopForever>
   ldr   r0, =_estack
 80018d4:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80018d8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80018dc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80018e0:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80018e4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80018e8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80018ec:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80018f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018f8:	08006ab8 	.word	0x08006ab8
  ldr r2, =_sbss
 80018fc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001900:	200003c8 	.word	0x200003c8

08001904 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC1_IRQHandler>
	...

08001908 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_Init+0x3c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <HAL_Init+0x3c>)
 800191a:	2140      	movs	r1, #64	@ 0x40
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001920:	2003      	movs	r0, #3
 8001922:	f000 f811 	bl	8001948 <HAL_InitTick>
 8001926:	1e03      	subs	r3, r0, #0
 8001928:	d003      	beq.n	8001932 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800192a:	1dfb      	adds	r3, r7, #7
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
 8001930:	e001      	b.n	8001936 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001932:	f7ff fdb5 	bl	80014a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001936:	1dfb      	adds	r3, r7, #7
 8001938:	781b      	ldrb	r3, [r3, #0]
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b002      	add	sp, #8
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	40022000 	.word	0x40022000

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001950:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <HAL_InitTick+0x5c>)
 8001952:	681c      	ldr	r4, [r3, #0]
 8001954:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <HAL_InitTick+0x60>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	0019      	movs	r1, r3
 800195a:	23fa      	movs	r3, #250	@ 0xfa
 800195c:	0098      	lsls	r0, r3, #2
 800195e:	f7fe fbe5 	bl	800012c <__udivsi3>
 8001962:	0003      	movs	r3, r0
 8001964:	0019      	movs	r1, r3
 8001966:	0020      	movs	r0, r4
 8001968:	f7fe fbe0 	bl	800012c <__udivsi3>
 800196c:	0003      	movs	r3, r0
 800196e:	0018      	movs	r0, r3
 8001970:	f000 fd9f 	bl	80024b2 <HAL_SYSTICK_Config>
 8001974:	1e03      	subs	r3, r0, #0
 8001976:	d001      	beq.n	800197c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e00f      	b.n	800199c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d80b      	bhi.n	800199a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	2301      	movs	r3, #1
 8001986:	425b      	negs	r3, r3
 8001988:	2200      	movs	r2, #0
 800198a:	0018      	movs	r0, r3
 800198c:	f000 fd6c 	bl	8002468 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_InitTick+0x64>)
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	e000      	b.n	800199c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
}
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	b003      	add	sp, #12
 80019a2:	bd90      	pop	{r4, r7, pc}
 80019a4:	2000000c 	.word	0x2000000c
 80019a8:	20000014 	.word	0x20000014
 80019ac:	20000010 	.word	0x20000010

080019b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b4:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_IncTick+0x1c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	001a      	movs	r2, r3
 80019ba:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <HAL_IncTick+0x20>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	18d2      	adds	r2, r2, r3
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <HAL_IncTick+0x20>)
 80019c2:	601a      	str	r2, [r3, #0]
}
 80019c4:	46c0      	nop			@ (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	20000014 	.word	0x20000014
 80019d0:	2000027c 	.word	0x2000027c

080019d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  return uwTick;
 80019d8:	4b02      	ldr	r3, [pc, #8]	@ (80019e4 <HAL_GetTick+0x10>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	2000027c 	.word	0x2000027c

080019e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff fff0 	bl	80019d4 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3301      	adds	r3, #1
 8001a00:	d005      	beq.n	8001a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_Delay+0x44>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	001a      	movs	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	189b      	adds	r3, r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	f7ff ffe0 	bl	80019d4 <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d8f7      	bhi.n	8001a10 <HAL_Delay+0x28>
  {
  }
}
 8001a20:	46c0      	nop			@ (mov r8, r8)
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b004      	add	sp, #16
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	20000014 	.word	0x20000014

08001a30 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001a34:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <HAL_SuspendTick+0x18>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <HAL_SuspendTick+0x18>)
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	438a      	bics	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
}
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			@ (mov r8, r8)
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001a50:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <HAL_ResumeTick+0x18>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b03      	ldr	r3, [pc, #12]	@ (8001a64 <HAL_ResumeTick+0x18>)
 8001a56:	2102      	movs	r1, #2
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]
}
 8001a5c:	46c0      	nop			@ (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e159      	b.n	8001d2e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10a      	bne.n	8001a98 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2250      	movs	r2, #80	@ 0x50
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	0018      	movs	r0, r3
 8001a94:	f7ff fd20 	bl	80014d8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d005      	beq.n	8001ab0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2204      	movs	r2, #4
 8001aac:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001aae:	d00b      	beq.n	8001ac8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2250      	movs	r2, #80	@ 0x50
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e132      	b.n	8001d2e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001acc:	4a9a      	ldr	r2, [pc, #616]	@ (8001d38 <HAL_ADC_Init+0x2d0>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2203      	movs	r2, #3
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d108      	bne.n	8001af8 <HAL_ADC_Init+0x90>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2201      	movs	r2, #1
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_ADC_Init+0x90>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_ADC_Init+0x92>
 8001af8:	2300      	movs	r3, #0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d149      	bne.n	8001b92 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	23c0      	movs	r3, #192	@ 0xc0
 8001b04:	061b      	lsls	r3, r3, #24
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d00b      	beq.n	8001b22 <HAL_ADC_Init+0xba>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	2380      	movs	r3, #128	@ 0x80
 8001b10:	05db      	lsls	r3, r3, #23
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d005      	beq.n	8001b22 <HAL_ADC_Init+0xba>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d111      	bne.n	8001b46 <HAL_ADC_Init+0xde>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0092      	lsls	r2, r2, #2
 8001b2e:	0892      	lsrs	r2, r2, #2
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6919      	ldr	r1, [r3, #16]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	e014      	b.n	8001b70 <HAL_ADC_Init+0x108>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	0892      	lsrs	r2, r2, #2
 8001b54:	611a      	str	r2, [r3, #16]
 8001b56:	4b79      	ldr	r3, [pc, #484]	@ (8001d3c <HAL_ADC_Init+0x2d4>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4b78      	ldr	r3, [pc, #480]	@ (8001d3c <HAL_ADC_Init+0x2d4>)
 8001b5c:	4978      	ldr	r1, [pc, #480]	@ (8001d40 <HAL_ADC_Init+0x2d8>)
 8001b5e:	400a      	ands	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	4b76      	ldr	r3, [pc, #472]	@ (8001d3c <HAL_ADC_Init+0x2d4>)
 8001b64:	6819      	ldr	r1, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	4b74      	ldr	r3, [pc, #464]	@ (8001d3c <HAL_ADC_Init+0x2d4>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2118      	movs	r1, #24
 8001b7c:	438a      	bics	r2, r1
 8001b7e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68d9      	ldr	r1, [r3, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001b92:	4b6a      	ldr	r3, [pc, #424]	@ (8001d3c <HAL_ADC_Init+0x2d4>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4b69      	ldr	r3, [pc, #420]	@ (8001d3c <HAL_ADC_Init+0x2d4>)
 8001b98:	496a      	ldr	r1, [pc, #424]	@ (8001d44 <HAL_ADC_Init+0x2dc>)
 8001b9a:	400a      	ands	r2, r1
 8001b9c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001b9e:	4b67      	ldr	r3, [pc, #412]	@ (8001d3c <HAL_ADC_Init+0x2d4>)
 8001ba0:	6819      	ldr	r1, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ba6:	065a      	lsls	r2, r3, #25
 8001ba8:	4b64      	ldr	r3, [pc, #400]	@ (8001d3c <HAL_ADC_Init+0x2d4>)
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	2380      	movs	r3, #128	@ 0x80
 8001bb6:	055b      	lsls	r3, r3, #21
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d108      	bne.n	8001bce <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2180      	movs	r1, #128	@ 0x80
 8001bc8:	0549      	lsls	r1, r1, #21
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	495b      	ldr	r1, [pc, #364]	@ (8001d48 <HAL_ADC_Init+0x2e0>)
 8001bda:	400a      	ands	r2, r1
 8001bdc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68d9      	ldr	r1, [r3, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_Init+0x18c>
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	e000      	b.n	8001bf6 <HAL_ADC_Init+0x18e>
 8001bf4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001bf6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2020      	movs	r0, #32
 8001bfc:	5c1b      	ldrb	r3, [r3, r0]
 8001bfe:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c00:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	202c      	movs	r0, #44	@ 0x2c
 8001c06:	5c1b      	ldrb	r3, [r3, r0]
 8001c08:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c0a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c10:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001c18:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c20:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c2e:	23c2      	movs	r3, #194	@ 0xc2
 8001c30:	33ff      	adds	r3, #255	@ 0xff
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d00b      	beq.n	8001c4e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68d9      	ldr	r1, [r3, #12]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2221      	movs	r2, #33	@ 0x21
 8001c52:	5c9b      	ldrb	r3, [r3, r2]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d11a      	bne.n	8001c8e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	5c9b      	ldrb	r3, [r3, r2]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d109      	bne.n	8001c76 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2180      	movs	r1, #128	@ 0x80
 8001c6e:	0249      	lsls	r1, r1, #9
 8001c70:	430a      	orrs	r2, r1
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	e00b      	b.n	8001c8e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c86:	2201      	movs	r2, #1
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d11f      	bne.n	8001cd6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	492a      	ldr	r1, [pc, #168]	@ (8001d4c <HAL_ADC_Init+0x2e4>)
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6919      	ldr	r1, [r3, #16]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001cb4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001cba:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2101      	movs	r1, #1
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	611a      	str	r2, [r3, #16]
 8001cd4:	e00e      	b.n	8001cf4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d107      	bne.n	8001cf4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2107      	movs	r1, #7
 8001d00:	438a      	bics	r2, r1
 8001d02:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6959      	ldr	r1, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d20:	2203      	movs	r2, #3
 8001d22:	4393      	bics	r3, r2
 8001d24:	2201      	movs	r2, #1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b002      	add	sp, #8
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			@ (mov r8, r8)
 8001d38:	fffffefd 	.word	0xfffffefd
 8001d3c:	40012708 	.word	0x40012708
 8001d40:	ffc3ffff 	.word	0xffc3ffff
 8001d44:	fdffffff 	.word	0xfdffffff
 8001d48:	fffe0219 	.word	0xfffe0219
 8001d4c:	fffffc03 	.word	0xfffffc03

08001d50 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d58:	230f      	movs	r3, #15
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2204      	movs	r2, #4
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d138      	bne.n	8001dde <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2250      	movs	r2, #80	@ 0x50
 8001d70:	5c9b      	ldrb	r3, [r3, r2]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_ADC_Start+0x2a>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e038      	b.n	8001dec <HAL_ADC_Start+0x9c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2250      	movs	r2, #80	@ 0x50
 8001d7e:	2101      	movs	r1, #1
 8001d80:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d007      	beq.n	8001d9a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001d8a:	230f      	movs	r3, #15
 8001d8c:	18fc      	adds	r4, r7, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	0018      	movs	r0, r3
 8001d92:	f000 f981 	bl	8002098 <ADC_Enable>
 8001d96:	0003      	movs	r3, r0
 8001d98:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d9a:	230f      	movs	r3, #15
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d120      	bne.n	8001de6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da8:	4a12      	ldr	r2, [pc, #72]	@ (8001df4 <HAL_ADC_Start+0xa4>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	2280      	movs	r2, #128	@ 0x80
 8001dae:	0052      	lsls	r2, r2, #1
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2250      	movs	r2, #80	@ 0x50
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	221c      	movs	r2, #28
 8001dca:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	e003      	b.n	8001de6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dde:	230f      	movs	r3, #15
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	2202      	movs	r2, #2
 8001de4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001de6:	230f      	movs	r3, #15
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	781b      	ldrb	r3, [r3, #0]
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b005      	add	sp, #20
 8001df2:	bd90      	pop	{r4, r7, pc}
 8001df4:	fffff0fe 	.word	0xfffff0fe

08001df8 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e00:	230f      	movs	r3, #15
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2250      	movs	r2, #80	@ 0x50
 8001e0c:	5c9b      	ldrb	r3, [r3, r2]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_Stop+0x1e>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e029      	b.n	8001e6a <HAL_ADC_Stop+0x72>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2250      	movs	r2, #80	@ 0x50
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001e1e:	250f      	movs	r5, #15
 8001e20:	197c      	adds	r4, r7, r5
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f000 fa06 	bl	8002236 <ADC_ConversionStop>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e2e:	197b      	adds	r3, r7, r5
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d112      	bne.n	8001e5c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e36:	197c      	adds	r4, r7, r5
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 f994 	bl	8002168 <ADC_Disable>
 8001e40:	0003      	movs	r3, r0
 8001e42:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e44:	197b      	adds	r3, r7, r5
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d107      	bne.n	8001e5c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e50:	4a08      	ldr	r2, [pc, #32]	@ (8001e74 <HAL_ADC_Stop+0x7c>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	2201      	movs	r2, #1
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2250      	movs	r2, #80	@ 0x50
 8001e60:	2100      	movs	r1, #0
 8001e62:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001e64:	230f      	movs	r3, #15
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	781b      	ldrb	r3, [r3, #0]
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b004      	add	sp, #16
 8001e70:	bdb0      	pop	{r4, r5, r7, pc}
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	fffffefe 	.word	0xfffffefe

08001e78 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d102      	bne.n	8001e98 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001e92:	2308      	movs	r3, #8
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	e014      	b.n	8001ec2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d10b      	bne.n	8001ebe <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eaa:	2220      	movs	r2, #32
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2250      	movs	r2, #80	@ 0x50
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e072      	b.n	8001fa4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001ebe:	230c      	movs	r3, #12
 8001ec0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ec2:	f7ff fd87 	bl	80019d4 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001eca:	e01f      	b.n	8001f0c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	d01c      	beq.n	8001f0c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HAL_ADC_PollForConversion+0x70>
 8001ed8:	f7ff fd7c 	bl	80019d4 <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d211      	bcs.n	8001f0c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d10b      	bne.n	8001f0c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef8:	2204      	movs	r2, #4
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2250      	movs	r2, #80	@ 0x50
 8001f04:	2100      	movs	r1, #0
 8001f06:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e04b      	b.n	8001fa4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4013      	ands	r3, r2
 8001f16:	d0d9      	beq.n	8001ecc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1c:	2280      	movs	r2, #128	@ 0x80
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	23c0      	movs	r3, #192	@ 0xc0
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4013      	ands	r3, r2
 8001f32:	d12e      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d129      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2208      	movs	r2, #8
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d122      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2204      	movs	r2, #4
 8001f54:	4013      	ands	r3, r2
 8001f56:	d110      	bne.n	8001f7a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	210c      	movs	r1, #12
 8001f64:	438a      	bics	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001fac <HAL_ADC_PollForConversion+0x134>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2201      	movs	r2, #1
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f78:	e00b      	b.n	8001f92 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7e:	2220      	movs	r2, #32
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d103      	bne.n	8001fa2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b004      	add	sp, #16
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	fffffefe 	.word	0xfffffefe

08001fb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2250      	movs	r2, #80	@ 0x50
 8001fd6:	5c9b      	ldrb	r3, [r3, r2]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x18>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e050      	b.n	8002082 <HAL_ADC_ConfigChannel+0xba>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2250      	movs	r2, #80	@ 0x50
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2204      	movs	r2, #4
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d00b      	beq.n	800200c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2250      	movs	r2, #80	@ 0x50
 8002004:	2100      	movs	r1, #0
 8002006:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e03a      	b.n	8002082 <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4a1e      	ldr	r2, [pc, #120]	@ (800208c <HAL_ADC_ConfigChannel+0xc4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d018      	beq.n	8002048 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	035b      	lsls	r3, r3, #13
 8002022:	0b5a      	lsrs	r2, r3, #13
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	@ 0x80
 8002032:	029b      	lsls	r3, r3, #10
 8002034:	4013      	ands	r3, r2
 8002036:	d01f      	beq.n	8002078 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002038:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <HAL_ADC_ConfigChannel+0xc8>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <HAL_ADC_ConfigChannel+0xc8>)
 800203e:	2180      	movs	r1, #128	@ 0x80
 8002040:	03c9      	lsls	r1, r1, #15
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e017      	b.n	8002078 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	035b      	lsls	r3, r3, #13
 8002054:	0b5b      	lsrs	r3, r3, #13
 8002056:	43d9      	mvns	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	400a      	ands	r2, r1
 800205e:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	029b      	lsls	r3, r3, #10
 8002068:	4013      	ands	r3, r2
 800206a:	d005      	beq.n	8002078 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800206c:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <HAL_ADC_ConfigChannel+0xc8>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <HAL_ADC_ConfigChannel+0xc8>)
 8002072:	4908      	ldr	r1, [pc, #32]	@ (8002094 <HAL_ADC_ConfigChannel+0xcc>)
 8002074:	400a      	ands	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2250      	movs	r2, #80	@ 0x50
 800207c:	2100      	movs	r1, #0
 800207e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b002      	add	sp, #8
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	00001001 	.word	0x00001001
 8002090:	40012708 	.word	0x40012708
 8002094:	ffbfffff 	.word	0xffbfffff

08002098 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2203      	movs	r2, #3
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d108      	bne.n	80020c4 <ADC_Enable+0x2c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <ADC_Enable+0x2c>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <ADC_Enable+0x2e>
 80020c4:	2300      	movs	r3, #0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d146      	bne.n	8002158 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a24      	ldr	r2, [pc, #144]	@ (8002164 <ADC_Enable+0xcc>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	d00d      	beq.n	80020f2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020da:	2210      	movs	r2, #16
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	2201      	movs	r2, #1
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e033      	b.n	800215a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2101      	movs	r1, #1
 80020fe:	430a      	orrs	r2, r1
 8002100:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002102:	2001      	movs	r0, #1
 8002104:	f000 f8e4 	bl	80022d0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002108:	f7ff fc64 	bl	80019d4 <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002110:	e01b      	b.n	800214a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002112:	f7ff fc5f 	bl	80019d4 <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b0a      	cmp	r3, #10
 800211e:	d914      	bls.n	800214a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2201      	movs	r2, #1
 8002128:	4013      	ands	r3, r2
 800212a:	2b01      	cmp	r3, #1
 800212c:	d00d      	beq.n	800214a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002132:	2210      	movs	r2, #16
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	2201      	movs	r2, #1
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e007      	b.n	800215a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2201      	movs	r2, #1
 8002152:	4013      	ands	r3, r2
 8002154:	2b01      	cmp	r3, #1
 8002156:	d1dc      	bne.n	8002112 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b004      	add	sp, #16
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	80000017 	.word	0x80000017

08002168 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2203      	movs	r2, #3
 800217c:	4013      	ands	r3, r2
 800217e:	2b01      	cmp	r3, #1
 8002180:	d108      	bne.n	8002194 <ADC_Disable+0x2c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2201      	movs	r2, #1
 800218a:	4013      	ands	r3, r2
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <ADC_Disable+0x2c>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <ADC_Disable+0x2e>
 8002194:	2300      	movs	r3, #0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d048      	beq.n	800222c <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2205      	movs	r2, #5
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d110      	bne.n	80021ca <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2102      	movs	r1, #2
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2203      	movs	r2, #3
 80021be:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021c0:	f7ff fc08 	bl	80019d4 <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021c8:	e029      	b.n	800221e <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ce:	2210      	movs	r2, #16
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021da:	2201      	movs	r2, #1
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e023      	b.n	800222e <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021e6:	f7ff fbf5 	bl	80019d4 <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b0a      	cmp	r3, #10
 80021f2:	d914      	bls.n	800221e <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2201      	movs	r2, #1
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d10d      	bne.n	800221e <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002206:	2210      	movs	r2, #16
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002212:	2201      	movs	r2, #1
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e007      	b.n	800222e <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2201      	movs	r2, #1
 8002226:	4013      	ands	r3, r2
 8002228:	2b01      	cmp	r3, #1
 800222a:	d0dc      	beq.n	80021e6 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b004      	add	sp, #16
 8002234:	bd80      	pop	{r7, pc}

08002236 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2204      	movs	r2, #4
 800224a:	4013      	ands	r3, r2
 800224c:	d03a      	beq.n	80022c4 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2204      	movs	r2, #4
 8002256:	4013      	ands	r3, r2
 8002258:	2b04      	cmp	r3, #4
 800225a:	d10d      	bne.n	8002278 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2202      	movs	r2, #2
 8002264:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8002266:	d107      	bne.n	8002278 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2110      	movs	r1, #16
 8002274:	430a      	orrs	r2, r1
 8002276:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002278:	f7ff fbac 	bl	80019d4 <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002280:	e01a      	b.n	80022b8 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002282:	f7ff fba7 	bl	80019d4 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b0a      	cmp	r3, #10
 800228e:	d913      	bls.n	80022b8 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2204      	movs	r2, #4
 8002298:	4013      	ands	r3, r2
 800229a:	d00d      	beq.n	80022b8 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a0:	2210      	movs	r2, #16
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	2201      	movs	r2, #1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e006      	b.n	80022c6 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2204      	movs	r2, #4
 80022c0:	4013      	ands	r3, r2
 80022c2:	d1de      	bne.n	8002282 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b004      	add	sp, #16
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80022d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002308 <ADC_DelayMicroSecond+0x38>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	490b      	ldr	r1, [pc, #44]	@ (800230c <ADC_DelayMicroSecond+0x3c>)
 80022de:	0018      	movs	r0, r3
 80022e0:	f7fd ff24 	bl	800012c <__udivsi3>
 80022e4:	0003      	movs	r3, r0
 80022e6:	001a      	movs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4353      	muls	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80022ee:	e002      	b.n	80022f6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f9      	bne.n	80022f0 <ADC_DelayMicroSecond+0x20>
  }
}
 80022fc:	46c0      	nop			@ (mov r8, r8)
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	46bd      	mov	sp, r7
 8002302:	b004      	add	sp, #16
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			@ (mov r8, r8)
 8002308:	2000000c 	.word	0x2000000c
 800230c:	000f4240 	.word	0x000f4240

08002310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	0002      	movs	r2, r0
 8002318:	1dfb      	adds	r3, r7, #7
 800231a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800231c:	1dfb      	adds	r3, r7, #7
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b7f      	cmp	r3, #127	@ 0x7f
 8002322:	d809      	bhi.n	8002338 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002324:	1dfb      	adds	r3, r7, #7
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	001a      	movs	r2, r3
 800232a:	231f      	movs	r3, #31
 800232c:	401a      	ands	r2, r3
 800232e:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <__NVIC_EnableIRQ+0x30>)
 8002330:	2101      	movs	r1, #1
 8002332:	4091      	lsls	r1, r2
 8002334:	000a      	movs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]
  }
}
 8002338:	46c0      	nop			@ (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}
 8002340:	e000e100 	.word	0xe000e100

08002344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	0002      	movs	r2, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b7f      	cmp	r3, #127	@ 0x7f
 8002358:	d828      	bhi.n	80023ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800235a:	4a2f      	ldr	r2, [pc, #188]	@ (8002418 <__NVIC_SetPriority+0xd4>)
 800235c:	1dfb      	adds	r3, r7, #7
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b25b      	sxtb	r3, r3
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	33c0      	adds	r3, #192	@ 0xc0
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	589b      	ldr	r3, [r3, r2]
 800236a:	1dfa      	adds	r2, r7, #7
 800236c:	7812      	ldrb	r2, [r2, #0]
 800236e:	0011      	movs	r1, r2
 8002370:	2203      	movs	r2, #3
 8002372:	400a      	ands	r2, r1
 8002374:	00d2      	lsls	r2, r2, #3
 8002376:	21ff      	movs	r1, #255	@ 0xff
 8002378:	4091      	lsls	r1, r2
 800237a:	000a      	movs	r2, r1
 800237c:	43d2      	mvns	r2, r2
 800237e:	401a      	ands	r2, r3
 8002380:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	019b      	lsls	r3, r3, #6
 8002386:	22ff      	movs	r2, #255	@ 0xff
 8002388:	401a      	ands	r2, r3
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	0018      	movs	r0, r3
 8002390:	2303      	movs	r3, #3
 8002392:	4003      	ands	r3, r0
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002398:	481f      	ldr	r0, [pc, #124]	@ (8002418 <__NVIC_SetPriority+0xd4>)
 800239a:	1dfb      	adds	r3, r7, #7
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	b25b      	sxtb	r3, r3
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	430a      	orrs	r2, r1
 80023a4:	33c0      	adds	r3, #192	@ 0xc0
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023aa:	e031      	b.n	8002410 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023ac:	4a1b      	ldr	r2, [pc, #108]	@ (800241c <__NVIC_SetPriority+0xd8>)
 80023ae:	1dfb      	adds	r3, r7, #7
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	0019      	movs	r1, r3
 80023b4:	230f      	movs	r3, #15
 80023b6:	400b      	ands	r3, r1
 80023b8:	3b08      	subs	r3, #8
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3306      	adds	r3, #6
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	18d3      	adds	r3, r2, r3
 80023c2:	3304      	adds	r3, #4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1dfa      	adds	r2, r7, #7
 80023c8:	7812      	ldrb	r2, [r2, #0]
 80023ca:	0011      	movs	r1, r2
 80023cc:	2203      	movs	r2, #3
 80023ce:	400a      	ands	r2, r1
 80023d0:	00d2      	lsls	r2, r2, #3
 80023d2:	21ff      	movs	r1, #255	@ 0xff
 80023d4:	4091      	lsls	r1, r2
 80023d6:	000a      	movs	r2, r1
 80023d8:	43d2      	mvns	r2, r2
 80023da:	401a      	ands	r2, r3
 80023dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	019b      	lsls	r3, r3, #6
 80023e2:	22ff      	movs	r2, #255	@ 0xff
 80023e4:	401a      	ands	r2, r3
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	0018      	movs	r0, r3
 80023ec:	2303      	movs	r3, #3
 80023ee:	4003      	ands	r3, r0
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f4:	4809      	ldr	r0, [pc, #36]	@ (800241c <__NVIC_SetPriority+0xd8>)
 80023f6:	1dfb      	adds	r3, r7, #7
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	001c      	movs	r4, r3
 80023fc:	230f      	movs	r3, #15
 80023fe:	4023      	ands	r3, r4
 8002400:	3b08      	subs	r3, #8
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	430a      	orrs	r2, r1
 8002406:	3306      	adds	r3, #6
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	18c3      	adds	r3, r0, r3
 800240c:	3304      	adds	r3, #4
 800240e:	601a      	str	r2, [r3, #0]
}
 8002410:	46c0      	nop			@ (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	b003      	add	sp, #12
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	1e5a      	subs	r2, r3, #1
 800242c:	2380      	movs	r3, #128	@ 0x80
 800242e:	045b      	lsls	r3, r3, #17
 8002430:	429a      	cmp	r2, r3
 8002432:	d301      	bcc.n	8002438 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002434:	2301      	movs	r3, #1
 8002436:	e010      	b.n	800245a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002438:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <SysTick_Config+0x44>)
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	3a01      	subs	r2, #1
 800243e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002440:	2301      	movs	r3, #1
 8002442:	425b      	negs	r3, r3
 8002444:	2103      	movs	r1, #3
 8002446:	0018      	movs	r0, r3
 8002448:	f7ff ff7c 	bl	8002344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244c:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <SysTick_Config+0x44>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002452:	4b04      	ldr	r3, [pc, #16]	@ (8002464 <SysTick_Config+0x44>)
 8002454:	2207      	movs	r2, #7
 8002456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002458:	2300      	movs	r3, #0
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b002      	add	sp, #8
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	e000e010 	.word	0xe000e010

08002468 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	210f      	movs	r1, #15
 8002474:	187b      	adds	r3, r7, r1
 8002476:	1c02      	adds	r2, r0, #0
 8002478:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	187b      	adds	r3, r7, r1
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b25b      	sxtb	r3, r3
 8002482:	0011      	movs	r1, r2
 8002484:	0018      	movs	r0, r3
 8002486:	f7ff ff5d 	bl	8002344 <__NVIC_SetPriority>
}
 800248a:	46c0      	nop			@ (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b004      	add	sp, #16
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	0002      	movs	r2, r0
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249e:	1dfb      	adds	r3, r7, #7
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b25b      	sxtb	r3, r3
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff ff33 	bl	8002310 <__NVIC_EnableIRQ>
}
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	0018      	movs	r0, r3
 80024be:	f7ff ffaf 	bl	8002420 <SysTick_Config>
 80024c2:	0003      	movs	r3, r0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80024e2:	e149      	b.n	8002778 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4091      	lsls	r1, r2
 80024ee:	000a      	movs	r2, r1
 80024f0:	4013      	ands	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d100      	bne.n	80024fc <HAL_GPIO_Init+0x30>
 80024fa:	e13a      	b.n	8002772 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2203      	movs	r2, #3
 8002502:	4013      	ands	r3, r2
 8002504:	2b01      	cmp	r3, #1
 8002506:	d005      	beq.n	8002514 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2203      	movs	r2, #3
 800250e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002510:	2b02      	cmp	r3, #2
 8002512:	d130      	bne.n	8002576 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	409a      	lsls	r2, r3
 8002522:	0013      	movs	r3, r2
 8002524:	43da      	mvns	r2, r3
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	409a      	lsls	r2, r3
 8002536:	0013      	movs	r3, r2
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800254a:	2201      	movs	r2, #1
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	409a      	lsls	r2, r3
 8002550:	0013      	movs	r3, r2
 8002552:	43da      	mvns	r2, r3
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	2201      	movs	r2, #1
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
 8002568:	0013      	movs	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2203      	movs	r2, #3
 800257c:	4013      	ands	r3, r2
 800257e:	2b03      	cmp	r3, #3
 8002580:	d017      	beq.n	80025b2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	2203      	movs	r2, #3
 800258e:	409a      	lsls	r2, r3
 8002590:	0013      	movs	r3, r2
 8002592:	43da      	mvns	r2, r3
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	409a      	lsls	r2, r3
 80025a4:	0013      	movs	r3, r2
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2203      	movs	r2, #3
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d123      	bne.n	8002606 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	08da      	lsrs	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3208      	adds	r2, #8
 80025c6:	0092      	lsls	r2, r2, #2
 80025c8:	58d3      	ldr	r3, [r2, r3]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2207      	movs	r2, #7
 80025d0:	4013      	ands	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	409a      	lsls	r2, r3
 80025d8:	0013      	movs	r3, r2
 80025da:	43da      	mvns	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2107      	movs	r1, #7
 80025ea:	400b      	ands	r3, r1
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	409a      	lsls	r2, r3
 80025f0:	0013      	movs	r3, r2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	08da      	lsrs	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3208      	adds	r2, #8
 8002600:	0092      	lsls	r2, r2, #2
 8002602:	6939      	ldr	r1, [r7, #16]
 8002604:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	409a      	lsls	r2, r3
 8002614:	0013      	movs	r3, r2
 8002616:	43da      	mvns	r2, r3
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2203      	movs	r2, #3
 8002624:	401a      	ands	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	409a      	lsls	r2, r3
 800262c:	0013      	movs	r3, r2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	23c0      	movs	r3, #192	@ 0xc0
 8002640:	029b      	lsls	r3, r3, #10
 8002642:	4013      	ands	r3, r2
 8002644:	d100      	bne.n	8002648 <HAL_GPIO_Init+0x17c>
 8002646:	e094      	b.n	8002772 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002648:	4b51      	ldr	r3, [pc, #324]	@ (8002790 <HAL_GPIO_Init+0x2c4>)
 800264a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800264c:	4b50      	ldr	r3, [pc, #320]	@ (8002790 <HAL_GPIO_Init+0x2c4>)
 800264e:	2101      	movs	r1, #1
 8002650:	430a      	orrs	r2, r1
 8002652:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002654:	4a4f      	ldr	r2, [pc, #316]	@ (8002794 <HAL_GPIO_Init+0x2c8>)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	3302      	adds	r3, #2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	589b      	ldr	r3, [r3, r2]
 8002660:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2203      	movs	r2, #3
 8002666:	4013      	ands	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	220f      	movs	r2, #15
 800266c:	409a      	lsls	r2, r3
 800266e:	0013      	movs	r3, r2
 8002670:	43da      	mvns	r2, r3
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	23a0      	movs	r3, #160	@ 0xa0
 800267c:	05db      	lsls	r3, r3, #23
 800267e:	429a      	cmp	r2, r3
 8002680:	d013      	beq.n	80026aa <HAL_GPIO_Init+0x1de>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a44      	ldr	r2, [pc, #272]	@ (8002798 <HAL_GPIO_Init+0x2cc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00d      	beq.n	80026a6 <HAL_GPIO_Init+0x1da>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a43      	ldr	r2, [pc, #268]	@ (800279c <HAL_GPIO_Init+0x2d0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <HAL_GPIO_Init+0x1d6>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a42      	ldr	r2, [pc, #264]	@ (80027a0 <HAL_GPIO_Init+0x2d4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_GPIO_Init+0x1d2>
 800269a:	2305      	movs	r3, #5
 800269c:	e006      	b.n	80026ac <HAL_GPIO_Init+0x1e0>
 800269e:	2306      	movs	r3, #6
 80026a0:	e004      	b.n	80026ac <HAL_GPIO_Init+0x1e0>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e002      	b.n	80026ac <HAL_GPIO_Init+0x1e0>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_GPIO_Init+0x1e0>
 80026aa:	2300      	movs	r3, #0
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	2103      	movs	r1, #3
 80026b0:	400a      	ands	r2, r1
 80026b2:	0092      	lsls	r2, r2, #2
 80026b4:	4093      	lsls	r3, r2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026bc:	4935      	ldr	r1, [pc, #212]	@ (8002794 <HAL_GPIO_Init+0x2c8>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	3302      	adds	r3, #2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ca:	4b36      	ldr	r3, [pc, #216]	@ (80027a4 <HAL_GPIO_Init+0x2d8>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	43da      	mvns	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	035b      	lsls	r3, r3, #13
 80026e2:	4013      	ands	r3, r2
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026ee:	4b2d      	ldr	r3, [pc, #180]	@ (80027a4 <HAL_GPIO_Init+0x2d8>)
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80026f4:	4b2b      	ldr	r3, [pc, #172]	@ (80027a4 <HAL_GPIO_Init+0x2d8>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43da      	mvns	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	039b      	lsls	r3, r3, #14
 800270c:	4013      	ands	r3, r2
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002718:	4b22      	ldr	r3, [pc, #136]	@ (80027a4 <HAL_GPIO_Init+0x2d8>)
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800271e:	4b21      	ldr	r3, [pc, #132]	@ (80027a4 <HAL_GPIO_Init+0x2d8>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	43da      	mvns	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	2380      	movs	r3, #128	@ 0x80
 8002734:	029b      	lsls	r3, r3, #10
 8002736:	4013      	ands	r3, r2
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002742:	4b18      	ldr	r3, [pc, #96]	@ (80027a4 <HAL_GPIO_Init+0x2d8>)
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002748:	4b16      	ldr	r3, [pc, #88]	@ (80027a4 <HAL_GPIO_Init+0x2d8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	43da      	mvns	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	2380      	movs	r3, #128	@ 0x80
 800275e:	025b      	lsls	r3, r3, #9
 8002760:	4013      	ands	r3, r2
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800276c:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <HAL_GPIO_Init+0x2d8>)
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	3301      	adds	r3, #1
 8002776:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	40da      	lsrs	r2, r3
 8002780:	1e13      	subs	r3, r2, #0
 8002782:	d000      	beq.n	8002786 <HAL_GPIO_Init+0x2ba>
 8002784:	e6ae      	b.n	80024e4 <HAL_GPIO_Init+0x18>
  }
}
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	46c0      	nop			@ (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b006      	add	sp, #24
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	40010000 	.word	0x40010000
 8002798:	50000400 	.word	0x50000400
 800279c:	50000800 	.word	0x50000800
 80027a0:	50001c00 	.word	0x50001c00
 80027a4:	40010400 	.word	0x40010400

080027a8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	000a      	movs	r2, r1
 80027b2:	1cbb      	adds	r3, r7, #2
 80027b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	1cba      	adds	r2, r7, #2
 80027bc:	8812      	ldrh	r2, [r2, #0]
 80027be:	4013      	ands	r3, r2
 80027c0:	d004      	beq.n	80027cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027c2:	230f      	movs	r3, #15
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
 80027ca:	e003      	b.n	80027d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027cc:	230f      	movs	r3, #15
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027d4:	230f      	movs	r3, #15
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	781b      	ldrb	r3, [r3, #0]
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b004      	add	sp, #16
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	0008      	movs	r0, r1
 80027ec:	0011      	movs	r1, r2
 80027ee:	1cbb      	adds	r3, r7, #2
 80027f0:	1c02      	adds	r2, r0, #0
 80027f2:	801a      	strh	r2, [r3, #0]
 80027f4:	1c7b      	adds	r3, r7, #1
 80027f6:	1c0a      	adds	r2, r1, #0
 80027f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027fa:	1c7b      	adds	r3, r7, #1
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d004      	beq.n	800280c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002802:	1cbb      	adds	r3, r7, #2
 8002804:	881a      	ldrh	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800280a:	e003      	b.n	8002814 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800280c:	1cbb      	adds	r3, r7, #2
 800280e:	881a      	ldrh	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002814:	46c0      	nop			@ (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	b002      	add	sp, #8
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	0002      	movs	r2, r0
 8002824:	1dbb      	adds	r3, r7, #6
 8002826:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002828:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	1dba      	adds	r2, r7, #6
 800282e:	8812      	ldrh	r2, [r2, #0]
 8002830:	4013      	ands	r3, r2
 8002832:	d008      	beq.n	8002846 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002834:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002836:	1dba      	adds	r2, r7, #6
 8002838:	8812      	ldrh	r2, [r2, #0]
 800283a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800283c:	1dbb      	adds	r3, r7, #6
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	0018      	movs	r0, r3
 8002842:	f7fd fe51 	bl	80004e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	46bd      	mov	sp, r7
 800284a:	b002      	add	sp, #8
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	40010400 	.word	0x40010400

08002854 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e078      	b.n	8002958 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	222e      	movs	r2, #46	@ 0x2e
 800286a:	5c9b      	ldrb	r3, [r3, r2]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d107      	bne.n	8002882 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	222d      	movs	r2, #45	@ 0x2d
 8002876:	2100      	movs	r1, #0
 8002878:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	0018      	movs	r0, r3
 800287e:	f7fe fe69 	bl	8001554 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	222e      	movs	r2, #46	@ 0x2e
 8002886:	2102      	movs	r1, #2
 8002888:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d005      	beq.n	80028a6 <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800289e:	2380      	movs	r3, #128	@ 0x80
 80028a0:	041b      	lsls	r3, r3, #16
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d103      	bne.n	80028ae <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	221e      	movs	r2, #30
 80028aa:	4393      	bics	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002960 <HAL_LPTIM_Init+0x10c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d003      	beq.n	80028c0 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002964 <HAL_LPTIM_Init+0x110>)
 80028bc:	4013      	ands	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4a29      	ldr	r2, [pc, #164]	@ (8002968 <HAL_LPTIM_Init+0x114>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80028d0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80028d6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80028dc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80028e2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d107      	bne.n	8002902 <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80028fa:	4313      	orrs	r3, r2
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d005      	beq.n	8002916 <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800290e:	2380      	movs	r3, #128	@ 0x80
 8002910:	041b      	lsls	r3, r3, #16
 8002912:	429a      	cmp	r2, r3
 8002914:	d107      	bne.n	8002926 <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800291e:	4313      	orrs	r3, r2
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	4a0d      	ldr	r2, [pc, #52]	@ (8002960 <HAL_LPTIM_Init+0x10c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00a      	beq.n	8002946 <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002938:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800293e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	222e      	movs	r2, #46	@ 0x2e
 8002952:	2101      	movs	r1, #1
 8002954:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b004      	add	sp, #16
 800295e:	bd80      	pop	{r7, pc}
 8002960:	0000ffff 	.word	0x0000ffff
 8002964:	ffff1f3f 	.word	0xffff1f3f
 8002968:	ff19f1fe 	.word	0xff19f1fe

0800296c <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	222e      	movs	r2, #46	@ 0x2e
 800297c:	2102      	movs	r1, #2
 800297e:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002980:	4b34      	ldr	r3, [pc, #208]	@ (8002a54 <HAL_LPTIM_TimeOut_Start_IT+0xe8>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b33      	ldr	r3, [pc, #204]	@ (8002a54 <HAL_LPTIM_TimeOut_Start_IT+0xe8>)
 8002986:	2180      	movs	r1, #128	@ 0x80
 8002988:	0589      	lsls	r1, r1, #22
 800298a:	430a      	orrs	r2, r1
 800298c:	601a      	str	r2, [r3, #0]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2180      	movs	r1, #128	@ 0x80
 800299a:	0309      	lsls	r1, r1, #12
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2101      	movs	r1, #1
 80029ac:	430a      	orrs	r2, r1
 80029ae:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2210      	movs	r2, #16
 80029b6:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2110      	movs	r1, #16
 80029c4:	0018      	movs	r0, r3
 80029c6:	f000 f95f 	bl	8002c88 <LPTIM_WaitForFlag>
 80029ca:	0003      	movs	r3, r0
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d101      	bne.n	80029d4 <HAL_LPTIM_TimeOut_Start_IT+0x68>
  {
    return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e03b      	b.n	8002a4c <HAL_LPTIM_TimeOut_Start_IT+0xe0>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2208      	movs	r2, #8
 80029da:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2108      	movs	r1, #8
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 f94d 	bl	8002c88 <LPTIM_WaitForFlag>
 80029ee:	0003      	movs	r3, r0
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d101      	bne.n	80029f8 <HAL_LPTIM_TimeOut_Start_IT+0x8c>
  {
    return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e029      	b.n	8002a4c <HAL_LPTIM_TimeOut_Start_IT+0xe0>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f97c 	bl	8002cf8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 f934 	bl	8002c70 <HAL_LPTIM_GetState>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d101      	bne.n	8002a12 <HAL_LPTIM_TimeOut_Start_IT+0xa6>
  {
    return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e01c      	b.n	8002a4c <HAL_LPTIM_TimeOut_Start_IT+0xe0>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2104      	movs	r1, #4
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	222e      	movs	r2, #46	@ 0x2e
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b004      	add	sp, #16
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40010400 	.word	0x40010400

08002a58 <HAL_LPTIM_TimeOut_Stop_IT>:
  * @brief  Stop the Timeout function in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 8002a60:	4b17      	ldr	r3, [pc, #92]	@ (8002ac0 <HAL_LPTIM_TimeOut_Stop_IT+0x68>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b16      	ldr	r3, [pc, #88]	@ (8002ac0 <HAL_LPTIM_TimeOut_Stop_IT+0x68>)
 8002a66:	4917      	ldr	r1, [pc, #92]	@ (8002ac4 <HAL_LPTIM_TimeOut_Stop_IT+0x6c>)
 8002a68:	400a      	ands	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	222e      	movs	r2, #46	@ 0x2e
 8002a70:	2102      	movs	r1, #2
 8002a72:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 f93e 	bl	8002cf8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f000 f8f6 	bl	8002c70 <HAL_LPTIM_GetState>
 8002a84:	0003      	movs	r3, r0
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d101      	bne.n	8002a8e <HAL_LPTIM_TimeOut_Stop_IT+0x36>
  {
    return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e014      	b.n	8002ab8 <HAL_LPTIM_TimeOut_Stop_IT+0x60>
  }

  /* Reset TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_TIMOUT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	490b      	ldr	r1, [pc, #44]	@ (8002ac8 <HAL_LPTIM_TimeOut_Stop_IT+0x70>)
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	60da      	str	r2, [r3, #12]

  /* Disable Compare match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	438a      	bics	r2, r1
 8002aac:	609a      	str	r2, [r3, #8]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	222e      	movs	r2, #46	@ 0x2e
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40010400 	.word	0x40010400
 8002ac4:	dfffffff 	.word	0xdfffffff
 8002ac8:	fff7ffff 	.word	0xfff7ffff

08002acc <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2201      	movs	r2, #1
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d10e      	bne.n	8002b00 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d107      	bne.n	8002b00 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2201      	movs	r2, #1
 8002af6:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f7fd fd8c 	bl	8000618 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2202      	movs	r2, #2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d10e      	bne.n	8002b2c <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2202      	movs	r2, #2
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d107      	bne.n	8002b2c <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2202      	movs	r2, #2
 8002b22:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 f872 	bl	8002c10 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2204      	movs	r2, #4
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d10e      	bne.n	8002b58 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2204      	movs	r2, #4
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d107      	bne.n	8002b58 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 f864 	bl	8002c20 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2208      	movs	r2, #8
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d10e      	bne.n	8002b84 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d107      	bne.n	8002b84 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2208      	movs	r2, #8
 8002b7a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f000 f856 	bl	8002c30 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2210      	movs	r2, #16
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b10      	cmp	r3, #16
 8002b90:	d10e      	bne.n	8002bb0 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2210      	movs	r2, #16
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b10      	cmp	r3, #16
 8002b9e:	d107      	bne.n	8002bb0 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 f848 	bl	8002c40 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d10e      	bne.n	8002bdc <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d107      	bne.n	8002bdc <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f000 f83a 	bl	8002c50 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2240      	movs	r2, #64	@ 0x40
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b40      	cmp	r3, #64	@ 0x40
 8002be8:	d10e      	bne.n	8002c08 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2240      	movs	r2, #64	@ 0x40
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b40      	cmp	r3, #64	@ 0x40
 8002bf6:	d107      	bne.n	8002c08 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2240      	movs	r2, #64	@ 0x40
 8002bfe:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	0018      	movs	r0, r3
 8002c04:	f000 f82c 	bl	8002c60 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c08:	46c0      	nop			@ (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8002c18:	46c0      	nop			@ (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8002c28:	46c0      	nop			@ (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8002c38:	46c0      	nop			@ (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8002c48:	46c0      	nop			@ (mov r8, r8)
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b002      	add	sp, #8
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8002c58:	46c0      	nop			@ (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8002c68:	46c0      	nop			@ (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	222e      	movs	r2, #46	@ 0x2e
 8002c7c:	5c9b      	ldrb	r3, [r3, r2]
 8002c7e:	b2db      	uxtb	r3, r3
}
 8002c80:	0018      	movs	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b002      	add	sp, #8
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8002c92:	230f      	movs	r3, #15
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8002c9a:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <LPTIM_WaitForFlag+0x68>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4915      	ldr	r1, [pc, #84]	@ (8002cf4 <LPTIM_WaitForFlag+0x6c>)
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7fd fa43 	bl	800012c <__udivsi3>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	001a      	movs	r2, r3
 8002caa:	0013      	movs	r3, r2
 8002cac:	015b      	lsls	r3, r3, #5
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	189b      	adds	r3, r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d103      	bne.n	8002ccc <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8002cc4:	230f      	movs	r3, #15
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2203      	movs	r2, #3
 8002cca:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d002      	beq.n	8002ce2 <LPTIM_WaitForFlag+0x5a>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ea      	bne.n	8002cb8 <LPTIM_WaitForFlag+0x30>

  return result;
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	781b      	ldrb	r3, [r3, #0]
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b004      	add	sp, #16
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	2000000c 	.word	0x2000000c
 8002cf4:	00004e20 	.word	0x00004e20

08002cf8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08c      	sub	sp, #48	@ 0x30
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d04:	f3ef 8310 	mrs	r3, PRIMASK
 8002d08:	613b      	str	r3, [r7, #16]
  return(result);
 8002d0a:	693b      	ldr	r3, [r7, #16]
  uint32_t tmpCMP;
  uint32_t tmpARR;
  uint32_t primask_bit;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d0e:	2301      	movs	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f383 8810 	msr	PRIMASK, r3
}
 8002d18:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	001a      	movs	r2, r3
 8002d20:	4b56      	ldr	r3, [pc, #344]	@ (8002e7c <LPTIM_Disable+0x184>)
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d106      	bne.n	8002d34 <LPTIM_Disable+0x3c>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002d26:	4b56      	ldr	r3, [pc, #344]	@ (8002e80 <LPTIM_Disable+0x188>)
 8002d28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d2a:	23c0      	movs	r3, #192	@ 0xc0
 8002d2c:	031b      	lsls	r3, r3, #12
 8002d2e:	4013      	ands	r3, r2
 8002d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8002d32:	e000      	b.n	8002d36 <LPTIM_Disable+0x3e>
    default:
      break;
 8002d34:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	4b47      	ldr	r3, [pc, #284]	@ (8002e7c <LPTIM_Disable+0x184>)
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d10d      	bne.n	8002d7e <LPTIM_Disable+0x86>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8002d62:	4b47      	ldr	r3, [pc, #284]	@ (8002e80 <LPTIM_Disable+0x188>)
 8002d64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d66:	4b46      	ldr	r3, [pc, #280]	@ (8002e80 <LPTIM_Disable+0x188>)
 8002d68:	2180      	movs	r1, #128	@ 0x80
 8002d6a:	0609      	lsls	r1, r1, #24
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	629a      	str	r2, [r3, #40]	@ 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8002d70:	4b43      	ldr	r3, [pc, #268]	@ (8002e80 <LPTIM_Disable+0x188>)
 8002d72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d74:	4b42      	ldr	r3, [pc, #264]	@ (8002e80 <LPTIM_Disable+0x188>)
 8002d76:	0052      	lsls	r2, r2, #1
 8002d78:	0852      	lsrs	r2, r2, #1
 8002d7a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8002d7c:	e000      	b.n	8002d80 <LPTIM_Disable+0x88>
    default:
      break;
 8002d7e:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <LPTIM_Disable+0x94>
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d05c      	beq.n	8002e46 <LPTIM_Disable+0x14e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	001a      	movs	r2, r3
 8002d92:	4b3a      	ldr	r3, [pc, #232]	@ (8002e7c <LPTIM_Disable+0x184>)
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d106      	bne.n	8002da6 <LPTIM_Disable+0xae>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8002d98:	4b39      	ldr	r3, [pc, #228]	@ (8002e80 <LPTIM_Disable+0x188>)
 8002d9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d9c:	4b38      	ldr	r3, [pc, #224]	@ (8002e80 <LPTIM_Disable+0x188>)
 8002d9e:	4939      	ldr	r1, [pc, #228]	@ (8002e84 <LPTIM_Disable+0x18c>)
 8002da0:	400a      	ands	r2, r1
 8002da2:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8002da4:	e000      	b.n	8002da8 <LPTIM_Disable+0xb0>
      default:
        break;
 8002da6:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01b      	beq.n	8002de6 <LPTIM_Disable+0xee>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2101      	movs	r1, #1
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2108      	movs	r1, #8
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7ff ff5c 	bl	8002c88 <LPTIM_WaitForFlag>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d103      	bne.n	8002dde <LPTIM_Disable+0xe6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	222e      	movs	r2, #46	@ 0x2e
 8002dda:	2103      	movs	r1, #3
 8002ddc:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2208      	movs	r2, #8
 8002de4:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01b      	beq.n	8002e24 <LPTIM_Disable+0x12c>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2101      	movs	r1, #1
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2110      	movs	r1, #16
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f7ff ff3d 	bl	8002c88 <LPTIM_WaitForFlag>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d103      	bne.n	8002e1c <LPTIM_Disable+0x124>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	222e      	movs	r2, #46	@ 0x2e
 8002e18:	2103      	movs	r1, #3
 8002e1a:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2210      	movs	r2, #16
 8002e22:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	001a      	movs	r2, r3
 8002e2a:	4b14      	ldr	r3, [pc, #80]	@ (8002e7c <LPTIM_Disable+0x184>)
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d109      	bne.n	8002e44 <LPTIM_Disable+0x14c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8002e30:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <LPTIM_Disable+0x188>)
 8002e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e34:	4a13      	ldr	r2, [pc, #76]	@ (8002e84 <LPTIM_Disable+0x18c>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <LPTIM_Disable+0x188>)
 8002e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8002e42:	e000      	b.n	8002e46 <LPTIM_Disable+0x14e>
      default:
        break;
 8002e44:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2101      	movs	r1, #1
 8002e52:	438a      	bics	r2, r1
 8002e54:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e5c:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a3a      	ldr	r2, [r7, #32]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f383 8810 	msr	PRIMASK, r3
}
 8002e70:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b00c      	add	sp, #48	@ 0x30
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	40007c00 	.word	0x40007c00
 8002e80:	40021000 	.word	0x40021000
 8002e84:	fff3ffff 	.word	0xfff3ffff

08002e88 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b03      	ldr	r3, [pc, #12]	@ (8002ea0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002e92:	2180      	movs	r1, #128	@ 0x80
 8002e94:	0049      	lsls	r1, r1, #1
 8002e96:	430a      	orrs	r2, r1
 8002e98:	601a      	str	r2, [r3, #0]
}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40007000 	.word	0x40007000

08002ea4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	000a      	movs	r2, r1
 8002eae:	1cfb      	adds	r3, r7, #3
 8002eb0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002eb6:	4b25      	ldr	r3, [pc, #148]	@ (8002f4c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	2380      	movs	r3, #128	@ 0x80
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002ec2:	4b23      	ldr	r3, [pc, #140]	@ (8002f50 <HAL_PWR_EnterSTOPMode+0xac>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_PWR_EnterSTOPMode+0x40>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f4c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002ede:	491d      	ldr	r1, [pc, #116]	@ (8002f54 <HAL_PWR_EnterSTOPMode+0xb0>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002ee4:	4b19      	ldr	r3, [pc, #100]	@ (8002f4c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2203      	movs	r2, #3
 8002eee:	4393      	bics	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8002efa:	4b14      	ldr	r3, [pc, #80]	@ (8002f4c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002f00:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	4b14      	ldr	r3, [pc, #80]	@ (8002f58 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002f06:	2104      	movs	r1, #4
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002f0c:	1cfb      	adds	r3, r7, #3
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002f14:	bf30      	wfi
 8002f16:	e002      	b.n	8002f1e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002f18:	bf40      	sev
    __WFE();
 8002f1a:	bf20      	wfe
    __WFE();
 8002f1c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002f24:	2104      	movs	r1, #4
 8002f26:	438a      	bics	r2, r1
 8002f28:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d009      	beq.n	8002f44 <HAL_PWR_EnterSTOPMode+0xa0>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d006      	beq.n	8002f44 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8002f36:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4b04      	ldr	r3, [pc, #16]	@ (8002f4c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002f3c:	2180      	movs	r1, #128	@ 0x80
 8002f3e:	0089      	lsls	r1, r1, #2
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
  }
}
 8002f44:	46c0      	nop			@ (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b006      	add	sp, #24
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	40010000 	.word	0x40010000
 8002f54:	fffffdff 	.word	0xfffffdff
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f5c:	b5b0      	push	{r4, r5, r7, lr}
 8002f5e:	b08a      	sub	sp, #40	@ 0x28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d102      	bne.n	8002f70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f000 fb6c 	bl	8003648 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f70:	4bc8      	ldr	r3, [pc, #800]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	220c      	movs	r2, #12
 8002f76:	4013      	ands	r3, r2
 8002f78:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f7a:	4bc6      	ldr	r3, [pc, #792]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	2380      	movs	r3, #128	@ 0x80
 8002f80:	025b      	lsls	r3, r3, #9
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d100      	bne.n	8002f92 <HAL_RCC_OscConfig+0x36>
 8002f90:	e07d      	b.n	800308e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d007      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d112      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x68>
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	2380      	movs	r3, #128	@ 0x80
 8002fa2:	025b      	lsls	r3, r3, #9
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d10d      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	4bba      	ldr	r3, [pc, #744]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	2380      	movs	r3, #128	@ 0x80
 8002fae:	029b      	lsls	r3, r3, #10
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d100      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x5a>
 8002fb4:	e06a      	b.n	800308c <HAL_RCC_OscConfig+0x130>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d166      	bne.n	800308c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f000 fb42 	bl	8003648 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	025b      	lsls	r3, r3, #9
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x84>
 8002fd0:	4bb0      	ldr	r3, [pc, #704]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4baf      	ldr	r3, [pc, #700]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8002fd6:	2180      	movs	r1, #128	@ 0x80
 8002fd8:	0249      	lsls	r1, r1, #9
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e027      	b.n	8003030 <HAL_RCC_OscConfig+0xd4>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	23a0      	movs	r3, #160	@ 0xa0
 8002fe6:	02db      	lsls	r3, r3, #11
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d10e      	bne.n	800300a <HAL_RCC_OscConfig+0xae>
 8002fec:	4ba9      	ldr	r3, [pc, #676]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4ba8      	ldr	r3, [pc, #672]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8002ff2:	2180      	movs	r1, #128	@ 0x80
 8002ff4:	02c9      	lsls	r1, r1, #11
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	4ba6      	ldr	r3, [pc, #664]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4ba5      	ldr	r3, [pc, #660]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8003000:	2180      	movs	r1, #128	@ 0x80
 8003002:	0249      	lsls	r1, r1, #9
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e012      	b.n	8003030 <HAL_RCC_OscConfig+0xd4>
 800300a:	4ba2      	ldr	r3, [pc, #648]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4ba1      	ldr	r3, [pc, #644]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8003010:	49a1      	ldr	r1, [pc, #644]	@ (8003298 <HAL_RCC_OscConfig+0x33c>)
 8003012:	400a      	ands	r2, r1
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	4b9f      	ldr	r3, [pc, #636]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	2380      	movs	r3, #128	@ 0x80
 800301c:	025b      	lsls	r3, r3, #9
 800301e:	4013      	ands	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4b9b      	ldr	r3, [pc, #620]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b9a      	ldr	r3, [pc, #616]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 800302a:	499c      	ldr	r1, [pc, #624]	@ (800329c <HAL_RCC_OscConfig+0x340>)
 800302c:	400a      	ands	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d014      	beq.n	8003062 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fccc 	bl	80019d4 <HAL_GetTick>
 800303c:	0003      	movs	r3, r0
 800303e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003042:	f7fe fcc7 	bl	80019d4 <HAL_GetTick>
 8003046:	0002      	movs	r2, r0
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b64      	cmp	r3, #100	@ 0x64
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e2f9      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003054:	4b8f      	ldr	r3, [pc, #572]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	2380      	movs	r3, #128	@ 0x80
 800305a:	029b      	lsls	r3, r3, #10
 800305c:	4013      	ands	r3, r2
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0xe6>
 8003060:	e015      	b.n	800308e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003062:	f7fe fcb7 	bl	80019d4 <HAL_GetTick>
 8003066:	0003      	movs	r3, r0
 8003068:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306c:	f7fe fcb2 	bl	80019d4 <HAL_GetTick>
 8003070:	0002      	movs	r2, r0
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	@ 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e2e4      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800307e:	4b85      	ldr	r3, [pc, #532]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	2380      	movs	r3, #128	@ 0x80
 8003084:	029b      	lsls	r3, r3, #10
 8003086:	4013      	ands	r3, r2
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x110>
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2202      	movs	r2, #2
 8003094:	4013      	ands	r3, r2
 8003096:	d100      	bne.n	800309a <HAL_RCC_OscConfig+0x13e>
 8003098:	e099      	b.n	80031ce <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	2220      	movs	r2, #32
 80030a4:	4013      	ands	r3, r2
 80030a6:	d009      	beq.n	80030bc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80030a8:	4b7a      	ldr	r3, [pc, #488]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b79      	ldr	r3, [pc, #484]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 80030ae:	2120      	movs	r1, #32
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	2220      	movs	r2, #32
 80030b8:	4393      	bics	r3, r2
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d005      	beq.n	80030ce <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	2b0c      	cmp	r3, #12
 80030c6:	d13e      	bne.n	8003146 <HAL_RCC_OscConfig+0x1ea>
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d13b      	bne.n	8003146 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80030ce:	4b71      	ldr	r3, [pc, #452]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2204      	movs	r2, #4
 80030d4:	4013      	ands	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_RCC_OscConfig+0x186>
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e2b2      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e2:	4b6c      	ldr	r3, [pc, #432]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4a6e      	ldr	r2, [pc, #440]	@ (80032a0 <HAL_RCC_OscConfig+0x344>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	021a      	lsls	r2, r3, #8
 80030f2:	4b68      	ldr	r3, [pc, #416]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80030f8:	4b66      	ldr	r3, [pc, #408]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2209      	movs	r2, #9
 80030fe:	4393      	bics	r3, r2
 8003100:	0019      	movs	r1, r3
 8003102:	4b64      	ldr	r3, [pc, #400]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8003104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003106:	430a      	orrs	r2, r1
 8003108:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800310a:	f000 fbeb 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 800310e:	0001      	movs	r1, r0
 8003110:	4b60      	ldr	r3, [pc, #384]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	220f      	movs	r2, #15
 8003118:	4013      	ands	r3, r2
 800311a:	4a62      	ldr	r2, [pc, #392]	@ (80032a4 <HAL_RCC_OscConfig+0x348>)
 800311c:	5cd3      	ldrb	r3, [r2, r3]
 800311e:	000a      	movs	r2, r1
 8003120:	40da      	lsrs	r2, r3
 8003122:	4b61      	ldr	r3, [pc, #388]	@ (80032a8 <HAL_RCC_OscConfig+0x34c>)
 8003124:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003126:	4b61      	ldr	r3, [pc, #388]	@ (80032ac <HAL_RCC_OscConfig+0x350>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2513      	movs	r5, #19
 800312c:	197c      	adds	r4, r7, r5
 800312e:	0018      	movs	r0, r3
 8003130:	f7fe fc0a 	bl	8001948 <HAL_InitTick>
 8003134:	0003      	movs	r3, r0
 8003136:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003138:	197b      	adds	r3, r7, r5
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d046      	beq.n	80031ce <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003140:	197b      	adds	r3, r7, r5
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	e280      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	2b00      	cmp	r3, #0
 800314a:	d027      	beq.n	800319c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800314c:	4b51      	ldr	r3, [pc, #324]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2209      	movs	r2, #9
 8003152:	4393      	bics	r3, r2
 8003154:	0019      	movs	r1, r3
 8003156:	4b4f      	ldr	r3, [pc, #316]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8003158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800315a:	430a      	orrs	r2, r1
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7fe fc39 	bl	80019d4 <HAL_GetTick>
 8003162:	0003      	movs	r3, r0
 8003164:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003168:	f7fe fc34 	bl	80019d4 <HAL_GetTick>
 800316c:	0002      	movs	r2, r0
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e266      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800317a:	4b46      	ldr	r3, [pc, #280]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2204      	movs	r2, #4
 8003180:	4013      	ands	r3, r2
 8003182:	d0f1      	beq.n	8003168 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b43      	ldr	r3, [pc, #268]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4a45      	ldr	r2, [pc, #276]	@ (80032a0 <HAL_RCC_OscConfig+0x344>)
 800318a:	4013      	ands	r3, r2
 800318c:	0019      	movs	r1, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	021a      	lsls	r2, r3, #8
 8003194:	4b3f      	ldr	r3, [pc, #252]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	e018      	b.n	80031ce <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319c:	4b3d      	ldr	r3, [pc, #244]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 80031a2:	2101      	movs	r1, #1
 80031a4:	438a      	bics	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fe fc14 	bl	80019d4 <HAL_GetTick>
 80031ac:	0003      	movs	r3, r0
 80031ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b2:	f7fe fc0f 	bl	80019d4 <HAL_GetTick>
 80031b6:	0002      	movs	r2, r0
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e241      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031c4:	4b33      	ldr	r3, [pc, #204]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2204      	movs	r2, #4
 80031ca:	4013      	ands	r3, r2
 80031cc:	d1f1      	bne.n	80031b2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2210      	movs	r2, #16
 80031d4:	4013      	ands	r3, r2
 80031d6:	d100      	bne.n	80031da <HAL_RCC_OscConfig+0x27e>
 80031d8:	e0a1      	b.n	800331e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d140      	bne.n	8003262 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	2380      	movs	r3, #128	@ 0x80
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4013      	ands	r3, r2
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_OscConfig+0x29c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e227      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031f8:	4b26      	ldr	r3, [pc, #152]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4a2c      	ldr	r2, [pc, #176]	@ (80032b0 <HAL_RCC_OscConfig+0x354>)
 80031fe:	4013      	ands	r3, r2
 8003200:	0019      	movs	r1, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1a      	ldr	r2, [r3, #32]
 8003206:	4b23      	ldr	r3, [pc, #140]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800320c:	4b21      	ldr	r3, [pc, #132]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	0a19      	lsrs	r1, r3, #8
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	061a      	lsls	r2, r3, #24
 800321a:	4b1e      	ldr	r3, [pc, #120]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	0b5b      	lsrs	r3, r3, #13
 8003226:	3301      	adds	r3, #1
 8003228:	2280      	movs	r2, #128	@ 0x80
 800322a:	0212      	lsls	r2, r2, #8
 800322c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800322e:	4b19      	ldr	r3, [pc, #100]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	091b      	lsrs	r3, r3, #4
 8003234:	210f      	movs	r1, #15
 8003236:	400b      	ands	r3, r1
 8003238:	491a      	ldr	r1, [pc, #104]	@ (80032a4 <HAL_RCC_OscConfig+0x348>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800323e:	4b1a      	ldr	r3, [pc, #104]	@ (80032a8 <HAL_RCC_OscConfig+0x34c>)
 8003240:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003242:	4b1a      	ldr	r3, [pc, #104]	@ (80032ac <HAL_RCC_OscConfig+0x350>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2513      	movs	r5, #19
 8003248:	197c      	adds	r4, r7, r5
 800324a:	0018      	movs	r0, r3
 800324c:	f7fe fb7c 	bl	8001948 <HAL_InitTick>
 8003250:	0003      	movs	r3, r0
 8003252:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003254:	197b      	adds	r3, r7, r5
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d060      	beq.n	800331e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800325c:	197b      	adds	r3, r7, r5
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	e1f2      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d03f      	beq.n	80032ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800326a:	4b0a      	ldr	r3, [pc, #40]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b09      	ldr	r3, [pc, #36]	@ (8003294 <HAL_RCC_OscConfig+0x338>)
 8003270:	2180      	movs	r1, #128	@ 0x80
 8003272:	0049      	lsls	r1, r1, #1
 8003274:	430a      	orrs	r2, r1
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fe fbac 	bl	80019d4 <HAL_GetTick>
 800327c:	0003      	movs	r3, r0
 800327e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003280:	e018      	b.n	80032b4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003282:	f7fe fba7 	bl	80019d4 <HAL_GetTick>
 8003286:	0002      	movs	r2, r0
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d911      	bls.n	80032b4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e1d9      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
 8003294:	40021000 	.word	0x40021000
 8003298:	fffeffff 	.word	0xfffeffff
 800329c:	fffbffff 	.word	0xfffbffff
 80032a0:	ffffe0ff 	.word	0xffffe0ff
 80032a4:	08006a08 	.word	0x08006a08
 80032a8:	2000000c 	.word	0x2000000c
 80032ac:	20000010 	.word	0x20000010
 80032b0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032b4:	4bc9      	ldr	r3, [pc, #804]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	2380      	movs	r3, #128	@ 0x80
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4013      	ands	r3, r2
 80032be:	d0e0      	beq.n	8003282 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032c0:	4bc6      	ldr	r3, [pc, #792]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4ac6      	ldr	r2, [pc, #792]	@ (80035e0 <HAL_RCC_OscConfig+0x684>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	0019      	movs	r1, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1a      	ldr	r2, [r3, #32]
 80032ce:	4bc3      	ldr	r3, [pc, #780]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032d4:	4bc1      	ldr	r3, [pc, #772]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	0a19      	lsrs	r1, r3, #8
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	061a      	lsls	r2, r3, #24
 80032e2:	4bbe      	ldr	r3, [pc, #760]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	e019      	b.n	800331e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032ea:	4bbc      	ldr	r3, [pc, #752]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4bbb      	ldr	r3, [pc, #748]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80032f0:	49bc      	ldr	r1, [pc, #752]	@ (80035e4 <HAL_RCC_OscConfig+0x688>)
 80032f2:	400a      	ands	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f6:	f7fe fb6d 	bl	80019d4 <HAL_GetTick>
 80032fa:	0003      	movs	r3, r0
 80032fc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003300:	f7fe fb68 	bl	80019d4 <HAL_GetTick>
 8003304:	0002      	movs	r2, r0
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e19a      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003312:	4bb2      	ldr	r3, [pc, #712]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	2380      	movs	r3, #128	@ 0x80
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4013      	ands	r3, r2
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2208      	movs	r2, #8
 8003324:	4013      	ands	r3, r2
 8003326:	d036      	beq.n	8003396 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d019      	beq.n	8003364 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003330:	4baa      	ldr	r3, [pc, #680]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003332:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003334:	4ba9      	ldr	r3, [pc, #676]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003336:	2101      	movs	r1, #1
 8003338:	430a      	orrs	r2, r1
 800333a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333c:	f7fe fb4a 	bl	80019d4 <HAL_GetTick>
 8003340:	0003      	movs	r3, r0
 8003342:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003346:	f7fe fb45 	bl	80019d4 <HAL_GetTick>
 800334a:	0002      	movs	r2, r0
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e177      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003358:	4ba0      	ldr	r3, [pc, #640]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 800335a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800335c:	2202      	movs	r2, #2
 800335e:	4013      	ands	r3, r2
 8003360:	d0f1      	beq.n	8003346 <HAL_RCC_OscConfig+0x3ea>
 8003362:	e018      	b.n	8003396 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003364:	4b9d      	ldr	r3, [pc, #628]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003366:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003368:	4b9c      	ldr	r3, [pc, #624]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 800336a:	2101      	movs	r1, #1
 800336c:	438a      	bics	r2, r1
 800336e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003370:	f7fe fb30 	bl	80019d4 <HAL_GetTick>
 8003374:	0003      	movs	r3, r0
 8003376:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800337a:	f7fe fb2b 	bl	80019d4 <HAL_GetTick>
 800337e:	0002      	movs	r2, r0
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e15d      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800338c:	4b93      	ldr	r3, [pc, #588]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 800338e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003390:	2202      	movs	r2, #2
 8003392:	4013      	ands	r3, r2
 8003394:	d1f1      	bne.n	800337a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2204      	movs	r2, #4
 800339c:	4013      	ands	r3, r2
 800339e:	d100      	bne.n	80033a2 <HAL_RCC_OscConfig+0x446>
 80033a0:	e0ae      	b.n	8003500 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a2:	2023      	movs	r0, #35	@ 0x23
 80033a4:	183b      	adds	r3, r7, r0
 80033a6:	2200      	movs	r2, #0
 80033a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033aa:	4b8c      	ldr	r3, [pc, #560]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80033ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ae:	2380      	movs	r3, #128	@ 0x80
 80033b0:	055b      	lsls	r3, r3, #21
 80033b2:	4013      	ands	r3, r2
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	4b89      	ldr	r3, [pc, #548]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80033b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ba:	4b88      	ldr	r3, [pc, #544]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80033bc:	2180      	movs	r1, #128	@ 0x80
 80033be:	0549      	lsls	r1, r1, #21
 80033c0:	430a      	orrs	r2, r1
 80033c2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80033c4:	183b      	adds	r3, r7, r0
 80033c6:	2201      	movs	r2, #1
 80033c8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	4b87      	ldr	r3, [pc, #540]	@ (80035e8 <HAL_RCC_OscConfig+0x68c>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	2380      	movs	r3, #128	@ 0x80
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4013      	ands	r3, r2
 80033d4:	d11a      	bne.n	800340c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d6:	4b84      	ldr	r3, [pc, #528]	@ (80035e8 <HAL_RCC_OscConfig+0x68c>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b83      	ldr	r3, [pc, #524]	@ (80035e8 <HAL_RCC_OscConfig+0x68c>)
 80033dc:	2180      	movs	r1, #128	@ 0x80
 80033de:	0049      	lsls	r1, r1, #1
 80033e0:	430a      	orrs	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e4:	f7fe faf6 	bl	80019d4 <HAL_GetTick>
 80033e8:	0003      	movs	r3, r0
 80033ea:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fe faf1 	bl	80019d4 <HAL_GetTick>
 80033f2:	0002      	movs	r2, r0
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	@ 0x64
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e123      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b79      	ldr	r3, [pc, #484]	@ (80035e8 <HAL_RCC_OscConfig+0x68c>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4013      	ands	r3, r2
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	2380      	movs	r3, #128	@ 0x80
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	429a      	cmp	r2, r3
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x4cc>
 8003418:	4b70      	ldr	r3, [pc, #448]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 800341a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800341c:	4b6f      	ldr	r3, [pc, #444]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 800341e:	2180      	movs	r1, #128	@ 0x80
 8003420:	0049      	lsls	r1, r1, #1
 8003422:	430a      	orrs	r2, r1
 8003424:	651a      	str	r2, [r3, #80]	@ 0x50
 8003426:	e031      	b.n	800348c <HAL_RCC_OscConfig+0x530>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10c      	bne.n	800344a <HAL_RCC_OscConfig+0x4ee>
 8003430:	4b6a      	ldr	r3, [pc, #424]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003432:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003434:	4b69      	ldr	r3, [pc, #420]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003436:	496b      	ldr	r1, [pc, #428]	@ (80035e4 <HAL_RCC_OscConfig+0x688>)
 8003438:	400a      	ands	r2, r1
 800343a:	651a      	str	r2, [r3, #80]	@ 0x50
 800343c:	4b67      	ldr	r3, [pc, #412]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 800343e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003440:	4b66      	ldr	r3, [pc, #408]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003442:	496a      	ldr	r1, [pc, #424]	@ (80035ec <HAL_RCC_OscConfig+0x690>)
 8003444:	400a      	ands	r2, r1
 8003446:	651a      	str	r2, [r3, #80]	@ 0x50
 8003448:	e020      	b.n	800348c <HAL_RCC_OscConfig+0x530>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	23a0      	movs	r3, #160	@ 0xa0
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	429a      	cmp	r2, r3
 8003454:	d10e      	bne.n	8003474 <HAL_RCC_OscConfig+0x518>
 8003456:	4b61      	ldr	r3, [pc, #388]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003458:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800345a:	4b60      	ldr	r3, [pc, #384]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 800345c:	2180      	movs	r1, #128	@ 0x80
 800345e:	00c9      	lsls	r1, r1, #3
 8003460:	430a      	orrs	r2, r1
 8003462:	651a      	str	r2, [r3, #80]	@ 0x50
 8003464:	4b5d      	ldr	r3, [pc, #372]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003466:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003468:	4b5c      	ldr	r3, [pc, #368]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 800346a:	2180      	movs	r1, #128	@ 0x80
 800346c:	0049      	lsls	r1, r1, #1
 800346e:	430a      	orrs	r2, r1
 8003470:	651a      	str	r2, [r3, #80]	@ 0x50
 8003472:	e00b      	b.n	800348c <HAL_RCC_OscConfig+0x530>
 8003474:	4b59      	ldr	r3, [pc, #356]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003476:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003478:	4b58      	ldr	r3, [pc, #352]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 800347a:	495a      	ldr	r1, [pc, #360]	@ (80035e4 <HAL_RCC_OscConfig+0x688>)
 800347c:	400a      	ands	r2, r1
 800347e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003480:	4b56      	ldr	r3, [pc, #344]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003482:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003484:	4b55      	ldr	r3, [pc, #340]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003486:	4959      	ldr	r1, [pc, #356]	@ (80035ec <HAL_RCC_OscConfig+0x690>)
 8003488:	400a      	ands	r2, r1
 800348a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d015      	beq.n	80034c0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003494:	f7fe fa9e 	bl	80019d4 <HAL_GetTick>
 8003498:	0003      	movs	r3, r0
 800349a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800349c:	e009      	b.n	80034b2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800349e:	f7fe fa99 	bl	80019d4 <HAL_GetTick>
 80034a2:	0002      	movs	r2, r0
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	4a51      	ldr	r2, [pc, #324]	@ (80035f0 <HAL_RCC_OscConfig+0x694>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0ca      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034b2:	4b4a      	ldr	r3, [pc, #296]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80034b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034b6:	2380      	movs	r3, #128	@ 0x80
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4013      	ands	r3, r2
 80034bc:	d0ef      	beq.n	800349e <HAL_RCC_OscConfig+0x542>
 80034be:	e014      	b.n	80034ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c0:	f7fe fa88 	bl	80019d4 <HAL_GetTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034c8:	e009      	b.n	80034de <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fe fa83 	bl	80019d4 <HAL_GetTick>
 80034ce:	0002      	movs	r2, r0
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	4a46      	ldr	r2, [pc, #280]	@ (80035f0 <HAL_RCC_OscConfig+0x694>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e0b4      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034de:	4b3f      	ldr	r3, [pc, #252]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80034e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034e2:	2380      	movs	r3, #128	@ 0x80
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4013      	ands	r3, r2
 80034e8:	d1ef      	bne.n	80034ca <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034ea:	2323      	movs	r3, #35	@ 0x23
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d105      	bne.n	8003500 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f4:	4b39      	ldr	r3, [pc, #228]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80034f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034f8:	4b38      	ldr	r3, [pc, #224]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80034fa:	493e      	ldr	r1, [pc, #248]	@ (80035f4 <HAL_RCC_OscConfig+0x698>)
 80034fc:	400a      	ands	r2, r1
 80034fe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	2b00      	cmp	r3, #0
 8003506:	d100      	bne.n	800350a <HAL_RCC_OscConfig+0x5ae>
 8003508:	e09d      	b.n	8003646 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	2b0c      	cmp	r3, #12
 800350e:	d100      	bne.n	8003512 <HAL_RCC_OscConfig+0x5b6>
 8003510:	e076      	b.n	8003600 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	2b02      	cmp	r3, #2
 8003518:	d145      	bne.n	80035a6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b30      	ldr	r3, [pc, #192]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b2f      	ldr	r3, [pc, #188]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003520:	4935      	ldr	r1, [pc, #212]	@ (80035f8 <HAL_RCC_OscConfig+0x69c>)
 8003522:	400a      	ands	r2, r1
 8003524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003526:	f7fe fa55 	bl	80019d4 <HAL_GetTick>
 800352a:	0003      	movs	r3, r0
 800352c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003530:	f7fe fa50 	bl	80019d4 <HAL_GetTick>
 8003534:	0002      	movs	r2, r0
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e082      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003542:	4b26      	ldr	r3, [pc, #152]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	2380      	movs	r3, #128	@ 0x80
 8003548:	049b      	lsls	r3, r3, #18
 800354a:	4013      	ands	r3, r2
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354e:	4b23      	ldr	r3, [pc, #140]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	4a2a      	ldr	r2, [pc, #168]	@ (80035fc <HAL_RCC_OscConfig+0x6a0>)
 8003554:	4013      	ands	r3, r2
 8003556:	0019      	movs	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	431a      	orrs	r2, r3
 8003568:	4b1c      	ldr	r3, [pc, #112]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 800356a:	430a      	orrs	r2, r1
 800356c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800356e:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4b1a      	ldr	r3, [pc, #104]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 8003574:	2180      	movs	r1, #128	@ 0x80
 8003576:	0449      	lsls	r1, r1, #17
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fe fa2a 	bl	80019d4 <HAL_GetTick>
 8003580:	0003      	movs	r3, r0
 8003582:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003586:	f7fe fa25 	bl	80019d4 <HAL_GetTick>
 800358a:	0002      	movs	r2, r0
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e057      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003598:	4b10      	ldr	r3, [pc, #64]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	2380      	movs	r3, #128	@ 0x80
 800359e:	049b      	lsls	r3, r3, #18
 80035a0:	4013      	ands	r3, r2
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x62a>
 80035a4:	e04f      	b.n	8003646 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a6:	4b0d      	ldr	r3, [pc, #52]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80035ac:	4912      	ldr	r1, [pc, #72]	@ (80035f8 <HAL_RCC_OscConfig+0x69c>)
 80035ae:	400a      	ands	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b2:	f7fe fa0f 	bl	80019d4 <HAL_GetTick>
 80035b6:	0003      	movs	r3, r0
 80035b8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fe fa0a 	bl	80019d4 <HAL_GetTick>
 80035c0:	0002      	movs	r2, r0
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e03c      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035ce:	4b03      	ldr	r3, [pc, #12]	@ (80035dc <HAL_RCC_OscConfig+0x680>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	2380      	movs	r3, #128	@ 0x80
 80035d4:	049b      	lsls	r3, r3, #18
 80035d6:	4013      	ands	r3, r2
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x660>
 80035da:	e034      	b.n	8003646 <HAL_RCC_OscConfig+0x6ea>
 80035dc:	40021000 	.word	0x40021000
 80035e0:	ffff1fff 	.word	0xffff1fff
 80035e4:	fffffeff 	.word	0xfffffeff
 80035e8:	40007000 	.word	0x40007000
 80035ec:	fffffbff 	.word	0xfffffbff
 80035f0:	00001388 	.word	0x00001388
 80035f4:	efffffff 	.word	0xefffffff
 80035f8:	feffffff 	.word	0xfeffffff
 80035fc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e01d      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800360c:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <HAL_RCC_OscConfig+0x6f4>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	2380      	movs	r3, #128	@ 0x80
 8003616:	025b      	lsls	r3, r3, #9
 8003618:	401a      	ands	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361e:	429a      	cmp	r2, r3
 8003620:	d10f      	bne.n	8003642 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	23f0      	movs	r3, #240	@ 0xf0
 8003626:	039b      	lsls	r3, r3, #14
 8003628:	401a      	ands	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d107      	bne.n	8003642 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	23c0      	movs	r3, #192	@ 0xc0
 8003636:	041b      	lsls	r3, r3, #16
 8003638:	401a      	ands	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	0018      	movs	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	b00a      	add	sp, #40	@ 0x28
 800364e:	bdb0      	pop	{r4, r5, r7, pc}
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003654:	b5b0      	push	{r4, r5, r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e128      	b.n	80038ba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003668:	4b96      	ldr	r3, [pc, #600]	@ (80038c4 <HAL_RCC_ClockConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2201      	movs	r2, #1
 800366e:	4013      	ands	r3, r2
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d91e      	bls.n	80036b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b93      	ldr	r3, [pc, #588]	@ (80038c4 <HAL_RCC_ClockConfig+0x270>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	4393      	bics	r3, r2
 800367e:	0019      	movs	r1, r3
 8003680:	4b90      	ldr	r3, [pc, #576]	@ (80038c4 <HAL_RCC_ClockConfig+0x270>)
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003688:	f7fe f9a4 	bl	80019d4 <HAL_GetTick>
 800368c:	0003      	movs	r3, r0
 800368e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003690:	e009      	b.n	80036a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003692:	f7fe f99f 	bl	80019d4 <HAL_GetTick>
 8003696:	0002      	movs	r2, r0
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	4a8a      	ldr	r2, [pc, #552]	@ (80038c8 <HAL_RCC_ClockConfig+0x274>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e109      	b.n	80038ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b87      	ldr	r3, [pc, #540]	@ (80038c4 <HAL_RCC_ClockConfig+0x270>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2201      	movs	r2, #1
 80036ac:	4013      	ands	r3, r2
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1ee      	bne.n	8003692 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2202      	movs	r2, #2
 80036ba:	4013      	ands	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036be:	4b83      	ldr	r3, [pc, #524]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	22f0      	movs	r2, #240	@ 0xf0
 80036c4:	4393      	bics	r3, r2
 80036c6:	0019      	movs	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	4b7f      	ldr	r3, [pc, #508]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 80036ce:	430a      	orrs	r2, r1
 80036d0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2201      	movs	r2, #1
 80036d8:	4013      	ands	r3, r2
 80036da:	d100      	bne.n	80036de <HAL_RCC_ClockConfig+0x8a>
 80036dc:	e089      	b.n	80037f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036e6:	4b79      	ldr	r3, [pc, #484]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	2380      	movs	r3, #128	@ 0x80
 80036ec:	029b      	lsls	r3, r3, #10
 80036ee:	4013      	ands	r3, r2
 80036f0:	d120      	bne.n	8003734 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e0e1      	b.n	80038ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d107      	bne.n	800370e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036fe:	4b73      	ldr	r3, [pc, #460]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	2380      	movs	r3, #128	@ 0x80
 8003704:	049b      	lsls	r3, r3, #18
 8003706:	4013      	ands	r3, r2
 8003708:	d114      	bne.n	8003734 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e0d5      	b.n	80038ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d106      	bne.n	8003724 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003716:	4b6d      	ldr	r3, [pc, #436]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2204      	movs	r2, #4
 800371c:	4013      	ands	r3, r2
 800371e:	d109      	bne.n	8003734 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0ca      	b.n	80038ba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003724:	4b69      	ldr	r3, [pc, #420]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	2380      	movs	r3, #128	@ 0x80
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4013      	ands	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0c2      	b.n	80038ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003734:	4b65      	ldr	r3, [pc, #404]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2203      	movs	r2, #3
 800373a:	4393      	bics	r3, r2
 800373c:	0019      	movs	r1, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	4b62      	ldr	r3, [pc, #392]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 8003744:	430a      	orrs	r2, r1
 8003746:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003748:	f7fe f944 	bl	80019d4 <HAL_GetTick>
 800374c:	0003      	movs	r3, r0
 800374e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d111      	bne.n	800377c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003758:	e009      	b.n	800376e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800375a:	f7fe f93b 	bl	80019d4 <HAL_GetTick>
 800375e:	0002      	movs	r2, r0
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	4a58      	ldr	r2, [pc, #352]	@ (80038c8 <HAL_RCC_ClockConfig+0x274>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e0a5      	b.n	80038ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800376e:	4b57      	ldr	r3, [pc, #348]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	220c      	movs	r2, #12
 8003774:	4013      	ands	r3, r2
 8003776:	2b08      	cmp	r3, #8
 8003778:	d1ef      	bne.n	800375a <HAL_RCC_ClockConfig+0x106>
 800377a:	e03a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b03      	cmp	r3, #3
 8003782:	d111      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003784:	e009      	b.n	800379a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003786:	f7fe f925 	bl	80019d4 <HAL_GetTick>
 800378a:	0002      	movs	r2, r0
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	4a4d      	ldr	r2, [pc, #308]	@ (80038c8 <HAL_RCC_ClockConfig+0x274>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e08f      	b.n	80038ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800379a:	4b4c      	ldr	r3, [pc, #304]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	220c      	movs	r2, #12
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d1ef      	bne.n	8003786 <HAL_RCC_ClockConfig+0x132>
 80037a6:	e024      	b.n	80037f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d11b      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037b0:	e009      	b.n	80037c6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b2:	f7fe f90f 	bl	80019d4 <HAL_GetTick>
 80037b6:	0002      	movs	r2, r0
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	4a42      	ldr	r2, [pc, #264]	@ (80038c8 <HAL_RCC_ClockConfig+0x274>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e079      	b.n	80038ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037c6:	4b41      	ldr	r3, [pc, #260]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	220c      	movs	r2, #12
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d1ef      	bne.n	80037b2 <HAL_RCC_ClockConfig+0x15e>
 80037d2:	e00e      	b.n	80037f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d4:	f7fe f8fe 	bl	80019d4 <HAL_GetTick>
 80037d8:	0002      	movs	r2, r0
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	4a3a      	ldr	r2, [pc, #232]	@ (80038c8 <HAL_RCC_ClockConfig+0x274>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e068      	b.n	80038ba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80037e8:	4b38      	ldr	r3, [pc, #224]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	220c      	movs	r2, #12
 80037ee:	4013      	ands	r3, r2
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f2:	4b34      	ldr	r3, [pc, #208]	@ (80038c4 <HAL_RCC_ClockConfig+0x270>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2201      	movs	r2, #1
 80037f8:	4013      	ands	r3, r2
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d21e      	bcs.n	800383e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003800:	4b30      	ldr	r3, [pc, #192]	@ (80038c4 <HAL_RCC_ClockConfig+0x270>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2201      	movs	r2, #1
 8003806:	4393      	bics	r3, r2
 8003808:	0019      	movs	r1, r3
 800380a:	4b2e      	ldr	r3, [pc, #184]	@ (80038c4 <HAL_RCC_ClockConfig+0x270>)
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003812:	f7fe f8df 	bl	80019d4 <HAL_GetTick>
 8003816:	0003      	movs	r3, r0
 8003818:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	e009      	b.n	8003830 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381c:	f7fe f8da 	bl	80019d4 <HAL_GetTick>
 8003820:	0002      	movs	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	4a28      	ldr	r2, [pc, #160]	@ (80038c8 <HAL_RCC_ClockConfig+0x274>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e044      	b.n	80038ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003830:	4b24      	ldr	r3, [pc, #144]	@ (80038c4 <HAL_RCC_ClockConfig+0x270>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2201      	movs	r2, #1
 8003836:	4013      	ands	r3, r2
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d1ee      	bne.n	800381c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2204      	movs	r2, #4
 8003844:	4013      	ands	r3, r2
 8003846:	d009      	beq.n	800385c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003848:	4b20      	ldr	r3, [pc, #128]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a20      	ldr	r2, [pc, #128]	@ (80038d0 <HAL_RCC_ClockConfig+0x27c>)
 800384e:	4013      	ands	r3, r2
 8003850:	0019      	movs	r1, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	4b1d      	ldr	r3, [pc, #116]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 8003858:	430a      	orrs	r2, r1
 800385a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2208      	movs	r2, #8
 8003862:	4013      	ands	r3, r2
 8003864:	d00a      	beq.n	800387c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003866:	4b19      	ldr	r3, [pc, #100]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	4a1a      	ldr	r2, [pc, #104]	@ (80038d4 <HAL_RCC_ClockConfig+0x280>)
 800386c:	4013      	ands	r3, r2
 800386e:	0019      	movs	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	00da      	lsls	r2, r3, #3
 8003876:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 8003878:	430a      	orrs	r2, r1
 800387a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800387c:	f000 f832 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8003880:	0001      	movs	r1, r0
 8003882:	4b12      	ldr	r3, [pc, #72]	@ (80038cc <HAL_RCC_ClockConfig+0x278>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	220f      	movs	r2, #15
 800388a:	4013      	ands	r3, r2
 800388c:	4a12      	ldr	r2, [pc, #72]	@ (80038d8 <HAL_RCC_ClockConfig+0x284>)
 800388e:	5cd3      	ldrb	r3, [r2, r3]
 8003890:	000a      	movs	r2, r1
 8003892:	40da      	lsrs	r2, r3
 8003894:	4b11      	ldr	r3, [pc, #68]	@ (80038dc <HAL_RCC_ClockConfig+0x288>)
 8003896:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003898:	4b11      	ldr	r3, [pc, #68]	@ (80038e0 <HAL_RCC_ClockConfig+0x28c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	250b      	movs	r5, #11
 800389e:	197c      	adds	r4, r7, r5
 80038a0:	0018      	movs	r0, r3
 80038a2:	f7fe f851 	bl	8001948 <HAL_InitTick>
 80038a6:	0003      	movs	r3, r0
 80038a8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80038aa:	197b      	adds	r3, r7, r5
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80038b2:	197b      	adds	r3, r7, r5
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	e000      	b.n	80038ba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b004      	add	sp, #16
 80038c0:	bdb0      	pop	{r4, r5, r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	40022000 	.word	0x40022000
 80038c8:	00001388 	.word	0x00001388
 80038cc:	40021000 	.word	0x40021000
 80038d0:	fffff8ff 	.word	0xfffff8ff
 80038d4:	ffffc7ff 	.word	0xffffc7ff
 80038d8:	08006a08 	.word	0x08006a08
 80038dc:	2000000c 	.word	0x2000000c
 80038e0:	20000010 	.word	0x20000010

080038e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	b5b0      	push	{r4, r5, r7, lr}
 80038e6:	b08e      	sub	sp, #56	@ 0x38
 80038e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80038ea:	4b4c      	ldr	r3, [pc, #304]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x138>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f2:	230c      	movs	r3, #12
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	d014      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x40>
 80038fa:	d900      	bls.n	80038fe <HAL_RCC_GetSysClockFreq+0x1a>
 80038fc:	e07b      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x112>
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d002      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0x24>
 8003902:	2b08      	cmp	r3, #8
 8003904:	d00b      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x3a>
 8003906:	e076      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003908:	4b44      	ldr	r3, [pc, #272]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x138>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2210      	movs	r2, #16
 800390e:	4013      	ands	r3, r2
 8003910:	d002      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003912:	4b43      	ldr	r3, [pc, #268]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003914:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003916:	e07c      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003918:	4b42      	ldr	r3, [pc, #264]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x140>)
 800391a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800391c:	e079      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800391e:	4b42      	ldr	r3, [pc, #264]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x144>)
 8003920:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003922:	e076      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003926:	0c9a      	lsrs	r2, r3, #18
 8003928:	230f      	movs	r3, #15
 800392a:	401a      	ands	r2, r3
 800392c:	4b3f      	ldr	r3, [pc, #252]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x148>)
 800392e:	5c9b      	ldrb	r3, [r3, r2]
 8003930:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003934:	0d9a      	lsrs	r2, r3, #22
 8003936:	2303      	movs	r3, #3
 8003938:	4013      	ands	r3, r2
 800393a:	3301      	adds	r3, #1
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800393e:	4b37      	ldr	r3, [pc, #220]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x138>)
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	2380      	movs	r3, #128	@ 0x80
 8003944:	025b      	lsls	r3, r3, #9
 8003946:	4013      	ands	r3, r2
 8003948:	d01a      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800394a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	4a35      	ldr	r2, [pc, #212]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x144>)
 8003954:	2300      	movs	r3, #0
 8003956:	69b8      	ldr	r0, [r7, #24]
 8003958:	69f9      	ldr	r1, [r7, #28]
 800395a:	f7fc fc93 	bl	8000284 <__aeabi_lmul>
 800395e:	0002      	movs	r2, r0
 8003960:	000b      	movs	r3, r1
 8003962:	0010      	movs	r0, r2
 8003964:	0019      	movs	r1, r3
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f7fc fc67 	bl	8000244 <__aeabi_uldivmod>
 8003976:	0002      	movs	r2, r0
 8003978:	000b      	movs	r3, r1
 800397a:	0013      	movs	r3, r2
 800397c:	637b      	str	r3, [r7, #52]	@ 0x34
 800397e:	e037      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003980:	4b26      	ldr	r3, [pc, #152]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x138>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2210      	movs	r2, #16
 8003986:	4013      	ands	r3, r2
 8003988:	d01a      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4a23      	ldr	r2, [pc, #140]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003994:	2300      	movs	r3, #0
 8003996:	68b8      	ldr	r0, [r7, #8]
 8003998:	68f9      	ldr	r1, [r7, #12]
 800399a:	f7fc fc73 	bl	8000284 <__aeabi_lmul>
 800399e:	0002      	movs	r2, r0
 80039a0:	000b      	movs	r3, r1
 80039a2:	0010      	movs	r0, r2
 80039a4:	0019      	movs	r1, r3
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f7fc fc47 	bl	8000244 <__aeabi_uldivmod>
 80039b6:	0002      	movs	r2, r0
 80039b8:	000b      	movs	r3, r1
 80039ba:	0013      	movs	r3, r2
 80039bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80039be:	e017      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c2:	0018      	movs	r0, r3
 80039c4:	2300      	movs	r3, #0
 80039c6:	0019      	movs	r1, r3
 80039c8:	4a16      	ldr	r2, [pc, #88]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x140>)
 80039ca:	2300      	movs	r3, #0
 80039cc:	f7fc fc5a 	bl	8000284 <__aeabi_lmul>
 80039d0:	0002      	movs	r2, r0
 80039d2:	000b      	movs	r3, r1
 80039d4:	0010      	movs	r0, r2
 80039d6:	0019      	movs	r1, r3
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	001c      	movs	r4, r3
 80039dc:	2300      	movs	r3, #0
 80039de:	001d      	movs	r5, r3
 80039e0:	0022      	movs	r2, r4
 80039e2:	002b      	movs	r3, r5
 80039e4:	f7fc fc2e 	bl	8000244 <__aeabi_uldivmod>
 80039e8:	0002      	movs	r2, r0
 80039ea:	000b      	movs	r3, r1
 80039ec:	0013      	movs	r3, r2
 80039ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80039f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80039f4:	e00d      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80039f6:	4b09      	ldr	r3, [pc, #36]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x138>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	0b5b      	lsrs	r3, r3, #13
 80039fc:	2207      	movs	r2, #7
 80039fe:	4013      	ands	r3, r2
 8003a00:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	3301      	adds	r3, #1
 8003a06:	2280      	movs	r2, #128	@ 0x80
 8003a08:	0212      	lsls	r2, r2, #8
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	0013      	movs	r3, r2
 8003a0e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003a10:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b00e      	add	sp, #56	@ 0x38
 8003a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	003d0900 	.word	0x003d0900
 8003a24:	00f42400 	.word	0x00f42400
 8003a28:	007a1200 	.word	0x007a1200
 8003a2c:	08006a20 	.word	0x08006a20

08003a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a34:	4b02      	ldr	r3, [pc, #8]	@ (8003a40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	0018      	movs	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			@ (mov r8, r8)
 8003a40:	2000000c 	.word	0x2000000c

08003a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a48:	f7ff fff2 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a4c:	0001      	movs	r1, r0
 8003a4e:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	2207      	movs	r2, #7
 8003a56:	4013      	ands	r3, r2
 8003a58:	4a04      	ldr	r2, [pc, #16]	@ (8003a6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a5a:	5cd3      	ldrb	r3, [r2, r3]
 8003a5c:	40d9      	lsrs	r1, r3
 8003a5e:	000b      	movs	r3, r1
}
 8003a60:	0018      	movs	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			@ (mov r8, r8)
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	08006a18 	.word	0x08006a18

08003a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a74:	f7ff ffdc 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a78:	0001      	movs	r1, r0
 8003a7a:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	0adb      	lsrs	r3, r3, #11
 8003a80:	2207      	movs	r2, #7
 8003a82:	4013      	ands	r3, r2
 8003a84:	4a04      	ldr	r2, [pc, #16]	@ (8003a98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a86:	5cd3      	ldrb	r3, [r2, r3]
 8003a88:	40d9      	lsrs	r1, r3
 8003a8a:	000b      	movs	r3, r1
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			@ (mov r8, r8)
 8003a94:	40021000 	.word	0x40021000
 8003a98:	08006a18 	.word	0x08006a18

08003a9c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003aa4:	2017      	movs	r0, #23
 8003aa6:	183b      	adds	r3, r7, r0
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d100      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003ab6:	e0c7      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab8:	4b84      	ldr	r3, [pc, #528]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003abc:	2380      	movs	r3, #128	@ 0x80
 8003abe:	055b      	lsls	r3, r3, #21
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d109      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac4:	4b81      	ldr	r3, [pc, #516]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ac6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ac8:	4b80      	ldr	r3, [pc, #512]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003aca:	2180      	movs	r1, #128	@ 0x80
 8003acc:	0549      	lsls	r1, r1, #21
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003ad2:	183b      	adds	r3, r7, r0
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad8:	4b7d      	ldr	r3, [pc, #500]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	2380      	movs	r3, #128	@ 0x80
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d11a      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae4:	4b7a      	ldr	r3, [pc, #488]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4b79      	ldr	r3, [pc, #484]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003aea:	2180      	movs	r1, #128	@ 0x80
 8003aec:	0049      	lsls	r1, r1, #1
 8003aee:	430a      	orrs	r2, r1
 8003af0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af2:	f7fd ff6f 	bl	80019d4 <HAL_GetTick>
 8003af6:	0003      	movs	r3, r0
 8003af8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afa:	e008      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afc:	f7fd ff6a 	bl	80019d4 <HAL_GetTick>
 8003b00:	0002      	movs	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	@ 0x64
 8003b08:	d901      	bls.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e0d9      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0e:	4b70      	ldr	r3, [pc, #448]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	2380      	movs	r3, #128	@ 0x80
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	4013      	ands	r3, r2
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003b1a:	4b6c      	ldr	r3, [pc, #432]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	23c0      	movs	r3, #192	@ 0xc0
 8003b20:	039b      	lsls	r3, r3, #14
 8003b22:	4013      	ands	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	23c0      	movs	r3, #192	@ 0xc0
 8003b2c:	039b      	lsls	r3, r3, #14
 8003b2e:	4013      	ands	r3, r2
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d013      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	23c0      	movs	r3, #192	@ 0xc0
 8003b3c:	029b      	lsls	r3, r3, #10
 8003b3e:	401a      	ands	r2, r3
 8003b40:	23c0      	movs	r3, #192	@ 0xc0
 8003b42:	029b      	lsls	r3, r3, #10
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d10a      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003b48:	4b60      	ldr	r3, [pc, #384]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	2380      	movs	r3, #128	@ 0x80
 8003b4e:	029b      	lsls	r3, r3, #10
 8003b50:	401a      	ands	r2, r3
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	029b      	lsls	r3, r3, #10
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d101      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e0b1      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003b5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b62:	23c0      	movs	r3, #192	@ 0xc0
 8003b64:	029b      	lsls	r3, r3, #10
 8003b66:	4013      	ands	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d03b      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	23c0      	movs	r3, #192	@ 0xc0
 8003b76:	029b      	lsls	r3, r3, #10
 8003b78:	4013      	ands	r3, r2
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d033      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2220      	movs	r2, #32
 8003b86:	4013      	ands	r3, r2
 8003b88:	d02e      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003b8a:	4b50      	ldr	r3, [pc, #320]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b8e:	4a51      	ldr	r2, [pc, #324]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b94:	4b4d      	ldr	r3, [pc, #308]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b98:	4b4c      	ldr	r3, [pc, #304]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b9a:	2180      	movs	r1, #128	@ 0x80
 8003b9c:	0309      	lsls	r1, r1, #12
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ba4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ba6:	4b49      	ldr	r3, [pc, #292]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ba8:	494b      	ldr	r1, [pc, #300]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003baa:	400a      	ands	r2, r1
 8003bac:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003bae:	4b47      	ldr	r3, [pc, #284]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	2380      	movs	r3, #128	@ 0x80
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d014      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7fd ff09 	bl	80019d4 <HAL_GetTick>
 8003bc2:	0003      	movs	r3, r0
 8003bc4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bc6:	e009      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	f7fd ff04 	bl	80019d4 <HAL_GetTick>
 8003bcc:	0002      	movs	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	4a42      	ldr	r2, [pc, #264]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e072      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003bde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003be0:	2380      	movs	r3, #128	@ 0x80
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4013      	ands	r3, r2
 8003be6:	d0ef      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2220      	movs	r2, #32
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d01f      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	23c0      	movs	r3, #192	@ 0xc0
 8003bf8:	029b      	lsls	r3, r3, #10
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	23c0      	movs	r3, #192	@ 0xc0
 8003bfe:	029b      	lsls	r3, r3, #10
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d10c      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003c04:	4b31      	ldr	r3, [pc, #196]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a35      	ldr	r2, [pc, #212]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	23c0      	movs	r3, #192	@ 0xc0
 8003c14:	039b      	lsls	r3, r3, #14
 8003c16:	401a      	ands	r2, r3
 8003c18:	4b2c      	ldr	r3, [pc, #176]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	23c0      	movs	r3, #192	@ 0xc0
 8003c28:	029b      	lsls	r3, r3, #10
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	4b27      	ldr	r3, [pc, #156]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c32:	2317      	movs	r3, #23
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3c:	4b23      	ldr	r3, [pc, #140]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c40:	4b22      	ldr	r3, [pc, #136]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c42:	4928      	ldr	r1, [pc, #160]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c44:	400a      	ands	r2, r1
 8003c46:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c52:	4b1e      	ldr	r3, [pc, #120]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c56:	220c      	movs	r2, #12
 8003c58:	4393      	bics	r3, r2
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	4b1a      	ldr	r3, [pc, #104]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c62:	430a      	orrs	r2, r1
 8003c64:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d009      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c70:	4b16      	ldr	r3, [pc, #88]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c74:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	0019      	movs	r1, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	4b13      	ldr	r3, [pc, #76]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c80:	430a      	orrs	r2, r1
 8003c82:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2208      	movs	r2, #8
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d009      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c92:	4a16      	ldr	r2, [pc, #88]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2280      	movs	r2, #128	@ 0x80
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d009      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003cac:	4b07      	ldr	r3, [pc, #28]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb0:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	0019      	movs	r1, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	4b04      	ldr	r3, [pc, #16]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b006      	add	sp, #24
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40007000 	.word	0x40007000
 8003cd4:	fffcffff 	.word	0xfffcffff
 8003cd8:	fff7ffff 	.word	0xfff7ffff
 8003cdc:	00001388 	.word	0x00001388
 8003ce0:	ffcfffff 	.word	0xffcfffff
 8003ce4:	efffffff 	.word	0xefffffff
 8003ce8:	fffff3ff 	.word	0xfffff3ff
 8003cec:	ffffcfff 	.word	0xffffcfff
 8003cf0:	fff3ffff 	.word	0xfff3ffff

08003cf4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003cf4:	b5b0      	push	{r4, r5, r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003cfc:	230f      	movs	r3, #15
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	2201      	movs	r2, #1
 8003d02:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e088      	b.n	8003e20 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2221      	movs	r2, #33	@ 0x21
 8003d12:	5c9b      	ldrb	r3, [r3, r2]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d107      	bne.n	8003d2a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	2100      	movs	r1, #0
 8003d20:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7fd fc79 	bl	800161c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2221      	movs	r2, #33	@ 0x21
 8003d2e:	2102      	movs	r1, #2
 8003d30:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2210      	movs	r2, #16
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d05f      	beq.n	8003e00 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	22ca      	movs	r2, #202	@ 0xca
 8003d46:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2253      	movs	r2, #83	@ 0x53
 8003d4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003d50:	250f      	movs	r5, #15
 8003d52:	197c      	adds	r4, r7, r5
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f000 fc7e 	bl	8004658 <RTC_EnterInitMode>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003d60:	0028      	movs	r0, r5
 8003d62:	183b      	adds	r3, r7, r0
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d12c      	bne.n	8003dc4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	492c      	ldr	r1, [pc, #176]	@ (8003e28 <HAL_RTC_Init+0x134>)
 8003d76:	400a      	ands	r2, r1
 8003d78:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6899      	ldr	r1, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68d2      	ldr	r2, [r2, #12]
 8003da0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6919      	ldr	r1, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	041a      	lsls	r2, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003db6:	183c      	adds	r4, r7, r0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f000 fc90 	bl	80046e0 <RTC_ExitInitMode>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003dc4:	230f      	movs	r3, #15
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d113      	bne.n	8003df6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2103      	movs	r1, #3
 8003dda:	438a      	bics	r2, r1
 8003ddc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	22ff      	movs	r2, #255	@ 0xff
 8003dfc:	625a      	str	r2, [r3, #36]	@ 0x24
 8003dfe:	e003      	b.n	8003e08 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003e00:	230f      	movs	r3, #15
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003e08:	230f      	movs	r3, #15
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d103      	bne.n	8003e1a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2221      	movs	r2, #33	@ 0x21
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003e1a:	230f      	movs	r3, #15
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	781b      	ldrb	r3, [r3, #0]
}
 8003e20:	0018      	movs	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b004      	add	sp, #16
 8003e26:	bdb0      	pop	{r4, r5, r7, pc}
 8003e28:	ff8fffbf 	.word	0xff8fffbf

08003e2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e2c:	b5b0      	push	{r4, r5, r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	5c9b      	ldrb	r3, [r3, r2]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_RTC_SetTime+0x1e>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e092      	b.n	8003f70 <HAL_RTC_SetTime+0x144>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	2101      	movs	r1, #1
 8003e50:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2221      	movs	r2, #33	@ 0x21
 8003e56:	2102      	movs	r1, #2
 8003e58:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d125      	bne.n	8003eac <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2240      	movs	r2, #64	@ 0x40
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d102      	bne.n	8003e72 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	0018      	movs	r0, r3
 8003e78:	f000 fc5c 	bl	8004734 <RTC_ByteToBcd2>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	785b      	ldrb	r3, [r3, #1]
 8003e84:	0018      	movs	r0, r3
 8003e86:	f000 fc55 	bl	8004734 <RTC_ByteToBcd2>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003e8e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	789b      	ldrb	r3, [r3, #2]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f000 fc4d 	bl	8004734 <RTC_ByteToBcd2>
 8003e9a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e9c:	0022      	movs	r2, r4
 8003e9e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	78db      	ldrb	r3, [r3, #3]
 8003ea4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	e017      	b.n	8003edc <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2240      	movs	r2, #64	@ 0x40
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d102      	bne.n	8003ebe <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	785b      	ldrb	r3, [r3, #1]
 8003ec8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003eca:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003ed0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	78db      	ldrb	r3, [r3, #3]
 8003ed6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	22ca      	movs	r2, #202	@ 0xca
 8003ee2:	625a      	str	r2, [r3, #36]	@ 0x24
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2253      	movs	r2, #83	@ 0x53
 8003eea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003eec:	2513      	movs	r5, #19
 8003eee:	197c      	adds	r4, r7, r5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f000 fbb0 	bl	8004658 <RTC_EnterInitMode>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003efc:	0028      	movs	r0, r5
 8003efe:	183b      	adds	r3, r7, r0
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d120      	bne.n	8003f48 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	491a      	ldr	r1, [pc, #104]	@ (8003f78 <HAL_RTC_SetTime+0x14c>)
 8003f0e:	400a      	ands	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4917      	ldr	r1, [pc, #92]	@ (8003f7c <HAL_RTC_SetTime+0x150>)
 8003f1e:	400a      	ands	r2, r1
 8003f20:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6899      	ldr	r1, [r3, #8]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f3a:	183c      	adds	r4, r7, r0
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 fbce 	bl	80046e0 <RTC_ExitInitMode>
 8003f44:	0003      	movs	r3, r0
 8003f46:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003f48:	2313      	movs	r3, #19
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d103      	bne.n	8003f5a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2221      	movs	r2, #33	@ 0x21
 8003f56:	2101      	movs	r1, #1
 8003f58:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	22ff      	movs	r2, #255	@ 0xff
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	2100      	movs	r1, #0
 8003f68:	5499      	strb	r1, [r3, r2]

  return status;
 8003f6a:	2313      	movs	r3, #19
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	781b      	ldrb	r3, [r3, #0]
}
 8003f70:	0018      	movs	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b006      	add	sp, #24
 8003f76:	bdb0      	pop	{r4, r5, r7, pc}
 8003f78:	007f7f7f 	.word	0x007f7f7f
 8003f7c:	fffbffff 	.word	0xfffbffff

08003f80 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	045b      	lsls	r3, r3, #17
 8003fa2:	0c5a      	lsrs	r2, r3, #17
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a22      	ldr	r2, [pc, #136]	@ (8004038 <HAL_RTC_GetTime+0xb8>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	0c1b      	lsrs	r3, r3, #16
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	223f      	movs	r2, #63	@ 0x3f
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	227f      	movs	r2, #127	@ 0x7f
 8003fcc:	4013      	ands	r3, r2
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	227f      	movs	r2, #127	@ 0x7f
 8003fda:	4013      	ands	r3, r2
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	0d9b      	lsrs	r3, r3, #22
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2201      	movs	r2, #1
 8003fea:	4013      	ands	r3, r2
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d11a      	bne.n	800402e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f000 fbba 	bl	8004776 <RTC_Bcd2ToByte>
 8004002:	0003      	movs	r3, r0
 8004004:	001a      	movs	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	785b      	ldrb	r3, [r3, #1]
 800400e:	0018      	movs	r0, r3
 8004010:	f000 fbb1 	bl	8004776 <RTC_Bcd2ToByte>
 8004014:	0003      	movs	r3, r0
 8004016:	001a      	movs	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	789b      	ldrb	r3, [r3, #2]
 8004020:	0018      	movs	r0, r3
 8004022:	f000 fba8 	bl	8004776 <RTC_Bcd2ToByte>
 8004026:	0003      	movs	r3, r0
 8004028:	001a      	movs	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	0018      	movs	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	b006      	add	sp, #24
 8004036:	bd80      	pop	{r7, pc}
 8004038:	007f7f7f 	.word	0x007f7f7f

0800403c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800403c:	b5b0      	push	{r4, r5, r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	5c9b      	ldrb	r3, [r3, r2]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_RTC_SetDate+0x1e>
 8004056:	2302      	movs	r3, #2
 8004058:	e07e      	b.n	8004158 <HAL_RTC_SetDate+0x11c>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	2101      	movs	r1, #1
 8004060:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2221      	movs	r2, #33	@ 0x21
 8004066:	2102      	movs	r1, #2
 8004068:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10e      	bne.n	800408e <HAL_RTC_SetDate+0x52>
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	785b      	ldrb	r3, [r3, #1]
 8004074:	001a      	movs	r2, r3
 8004076:	2310      	movs	r3, #16
 8004078:	4013      	ands	r3, r2
 800407a:	d008      	beq.n	800408e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	785b      	ldrb	r3, [r3, #1]
 8004080:	2210      	movs	r2, #16
 8004082:	4393      	bics	r3, r2
 8004084:	b2db      	uxtb	r3, r3
 8004086:	330a      	adds	r3, #10
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d11c      	bne.n	80040ce <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	78db      	ldrb	r3, [r3, #3]
 8004098:	0018      	movs	r0, r3
 800409a:	f000 fb4b 	bl	8004734 <RTC_ByteToBcd2>
 800409e:	0003      	movs	r3, r0
 80040a0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	785b      	ldrb	r3, [r3, #1]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 fb44 	bl	8004734 <RTC_ByteToBcd2>
 80040ac:	0003      	movs	r3, r0
 80040ae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80040b0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	789b      	ldrb	r3, [r3, #2]
 80040b6:	0018      	movs	r0, r3
 80040b8:	f000 fb3c 	bl	8004734 <RTC_ByteToBcd2>
 80040bc:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80040be:	0022      	movs	r2, r4
 80040c0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	e00e      	b.n	80040ec <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	78db      	ldrb	r3, [r3, #3]
 80040d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	785b      	ldrb	r3, [r3, #1]
 80040d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80040da:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80040e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	22ca      	movs	r2, #202	@ 0xca
 80040f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2253      	movs	r2, #83	@ 0x53
 80040fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80040fc:	2513      	movs	r5, #19
 80040fe:	197c      	adds	r4, r7, r5
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	0018      	movs	r0, r3
 8004104:	f000 faa8 	bl	8004658 <RTC_EnterInitMode>
 8004108:	0003      	movs	r3, r0
 800410a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800410c:	0028      	movs	r0, r5
 800410e:	183b      	adds	r3, r7, r0
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10c      	bne.n	8004130 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4910      	ldr	r1, [pc, #64]	@ (8004160 <HAL_RTC_SetDate+0x124>)
 800411e:	400a      	ands	r2, r1
 8004120:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004122:	183c      	adds	r4, r7, r0
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	0018      	movs	r0, r3
 8004128:	f000 fada 	bl	80046e0 <RTC_ExitInitMode>
 800412c:	0003      	movs	r3, r0
 800412e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8004130:	2313      	movs	r3, #19
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d103      	bne.n	8004142 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2221      	movs	r2, #33	@ 0x21
 800413e:	2101      	movs	r1, #1
 8004140:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	22ff      	movs	r2, #255	@ 0xff
 8004148:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	2100      	movs	r1, #0
 8004150:	5499      	strb	r1, [r3, r2]

  return status;
 8004152:	2313      	movs	r3, #19
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	781b      	ldrb	r3, [r3, #0]
}
 8004158:	0018      	movs	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	b006      	add	sp, #24
 800415e:	bdb0      	pop	{r4, r5, r7, pc}
 8004160:	00ffff3f 	.word	0x00ffff3f

08004164 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004164:	b590      	push	{r4, r7, lr}
 8004166:	b089      	sub	sp, #36	@ 0x24
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004170:	4ba7      	ldr	r3, [pc, #668]	@ (8004410 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	22fa      	movs	r2, #250	@ 0xfa
 8004176:	01d1      	lsls	r1, r2, #7
 8004178:	0018      	movs	r0, r3
 800417a:	f7fb ffd7 	bl	800012c <__udivsi3>
 800417e:	0003      	movs	r3, r0
 8004180:	001a      	movs	r2, r3
 8004182:	0013      	movs	r3, r2
 8004184:	015b      	lsls	r3, r3, #5
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	189b      	adds	r3, r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	5c9b      	ldrb	r3, [r3, r2]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_RTC_SetAlarm_IT+0x42>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e130      	b.n	8004408 <HAL_RTC_SetAlarm_IT+0x2a4>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	2101      	movs	r1, #1
 80041ac:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2221      	movs	r2, #33	@ 0x21
 80041b2:	2102      	movs	r1, #2
 80041b4:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d136      	bne.n	800422a <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2240      	movs	r2, #64	@ 0x40
 80041c4:	4013      	ands	r3, r2
 80041c6:	d102      	bne.n	80041ce <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2200      	movs	r2, #0
 80041cc:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 faae 	bl	8004734 <RTC_ByteToBcd2>
 80041d8:	0003      	movs	r3, r0
 80041da:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	785b      	ldrb	r3, [r3, #1]
 80041e0:	0018      	movs	r0, r3
 80041e2:	f000 faa7 	bl	8004734 <RTC_ByteToBcd2>
 80041e6:	0003      	movs	r3, r0
 80041e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80041ea:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	789b      	ldrb	r3, [r3, #2]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 fa9f 	bl	8004734 <RTC_ByteToBcd2>
 80041f6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80041f8:	0022      	movs	r2, r4
 80041fa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	78db      	ldrb	r3, [r3, #3]
 8004200:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004202:	431a      	orrs	r2, r3
 8004204:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2220      	movs	r2, #32
 800420a:	5c9b      	ldrb	r3, [r3, r2]
 800420c:	0018      	movs	r0, r3
 800420e:	f000 fa91 	bl	8004734 <RTC_ByteToBcd2>
 8004212:	0003      	movs	r3, r0
 8004214:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004216:	0022      	movs	r2, r4
 8004218:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800421e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004224:	4313      	orrs	r3, r2
 8004226:	61fb      	str	r3, [r7, #28]
 8004228:	e022      	b.n	8004270 <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2240      	movs	r2, #64	@ 0x40
 8004232:	4013      	ands	r3, r2
 8004234:	d102      	bne.n	800423c <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2200      	movs	r2, #0
 800423a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	785b      	ldrb	r3, [r3, #1]
 8004246:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004248:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800424e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	78db      	ldrb	r3, [r3, #3]
 8004254:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004256:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2120      	movs	r1, #32
 800425c:	5c5b      	ldrb	r3, [r3, r1]
 800425e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004260:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004266:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800426c:	4313      	orrs	r3, r2
 800426e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004278:	4313      	orrs	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	22ca      	movs	r2, #202	@ 0xca
 8004282:	625a      	str	r2, [r3, #36]	@ 0x24
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2253      	movs	r2, #83	@ 0x53
 800428a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004290:	2380      	movs	r3, #128	@ 0x80
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	429a      	cmp	r2, r3
 8004296:	d146      	bne.n	8004326 <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	495c      	ldr	r1, [pc, #368]	@ (8004414 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80042a4:	400a      	ands	r2, r1
 80042a6:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	22ff      	movs	r2, #255	@ 0xff
 80042b0:	401a      	ands	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4958      	ldr	r1, [pc, #352]	@ (8004418 <HAL_RTC_SetAlarm_IT+0x2b4>)
 80042b8:	430a      	orrs	r2, r1
 80042ba:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	3b01      	subs	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10d      	bne.n	80042e4 <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	22ff      	movs	r2, #255	@ 0xff
 80042ce:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2221      	movs	r2, #33	@ 0x21
 80042d4:	2103      	movs	r1, #3
 80042d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	2100      	movs	r1, #0
 80042de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e091      	b.n	8004408 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	4013      	ands	r3, r2
 80042ee:	d0e5      	beq.n	80042bc <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2180      	movs	r1, #128	@ 0x80
 800430c:	0049      	lsls	r1, r1, #1
 800430e:	430a      	orrs	r2, r1
 8004310:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2180      	movs	r1, #128	@ 0x80
 800431e:	0149      	lsls	r1, r1, #5
 8004320:	430a      	orrs	r2, r1
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	e055      	b.n	80043d2 <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	493a      	ldr	r1, [pc, #232]	@ (800441c <HAL_RTC_SetAlarm_IT+0x2b8>)
 8004332:	400a      	ands	r2, r1
 8004334:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	22ff      	movs	r2, #255	@ 0xff
 800433e:	401a      	ands	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4936      	ldr	r1, [pc, #216]	@ (8004420 <HAL_RTC_SetAlarm_IT+0x2bc>)
 8004346:	430a      	orrs	r2, r1
 8004348:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800434a:	4b31      	ldr	r3, [pc, #196]	@ (8004410 <HAL_RTC_SetAlarm_IT+0x2ac>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	22fa      	movs	r2, #250	@ 0xfa
 8004350:	01d1      	lsls	r1, r2, #7
 8004352:	0018      	movs	r0, r3
 8004354:	f7fb feea 	bl	800012c <__udivsi3>
 8004358:	0003      	movs	r3, r0
 800435a:	001a      	movs	r2, r3
 800435c:	0013      	movs	r3, r2
 800435e:	015b      	lsls	r3, r3, #5
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	189b      	adds	r3, r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	3b01      	subs	r3, #1
 800436e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10d      	bne.n	8004392 <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	22ff      	movs	r2, #255	@ 0xff
 800437c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2221      	movs	r2, #33	@ 0x21
 8004382:	2103      	movs	r1, #3
 8004384:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	2100      	movs	r1, #0
 800438c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e03a      	b.n	8004408 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2202      	movs	r2, #2
 800439a:	4013      	ands	r3, r2
 800439c:	d0e5      	beq.n	800436a <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2180      	movs	r1, #128	@ 0x80
 80043ba:	0089      	lsls	r1, r1, #2
 80043bc:	430a      	orrs	r2, r1
 80043be:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2180      	movs	r1, #128	@ 0x80
 80043cc:	0189      	lsls	r1, r1, #6
 80043ce:	430a      	orrs	r2, r1
 80043d0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80043d2:	4b14      	ldr	r3, [pc, #80]	@ (8004424 <HAL_RTC_SetAlarm_IT+0x2c0>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b13      	ldr	r3, [pc, #76]	@ (8004424 <HAL_RTC_SetAlarm_IT+0x2c0>)
 80043d8:	2180      	movs	r1, #128	@ 0x80
 80043da:	0289      	lsls	r1, r1, #10
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80043e0:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <HAL_RTC_SetAlarm_IT+0x2c0>)
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004424 <HAL_RTC_SetAlarm_IT+0x2c0>)
 80043e6:	2180      	movs	r1, #128	@ 0x80
 80043e8:	0289      	lsls	r1, r1, #10
 80043ea:	430a      	orrs	r2, r1
 80043ec:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	22ff      	movs	r2, #255	@ 0xff
 80043f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2221      	movs	r2, #33	@ 0x21
 80043fa:	2101      	movs	r1, #1
 80043fc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	2100      	movs	r1, #0
 8004404:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	0018      	movs	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	b009      	add	sp, #36	@ 0x24
 800440e:	bd90      	pop	{r4, r7, pc}
 8004410:	2000000c 	.word	0x2000000c
 8004414:	fffffeff 	.word	0xfffffeff
 8004418:	fffffe7f 	.word	0xfffffe7f
 800441c:	fffffdff 	.word	0xfffffdff
 8004420:	fffffd7f 	.word	0xfffffd7f
 8004424:	40010400 	.word	0x40010400

08004428 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	5c9b      	ldrb	r3, [r3, r2]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_RTC_DeactivateAlarm+0x1c>
 8004440:	2302      	movs	r3, #2
 8004442:	e086      	b.n	8004552 <HAL_RTC_DeactivateAlarm+0x12a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	2101      	movs	r1, #1
 800444a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2221      	movs	r2, #33	@ 0x21
 8004450:	2102      	movs	r1, #2
 8004452:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	22ca      	movs	r2, #202	@ 0xca
 800445a:	625a      	str	r2, [r3, #36]	@ 0x24
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2253      	movs	r2, #83	@ 0x53
 8004462:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	2380      	movs	r3, #128	@ 0x80
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	429a      	cmp	r2, r3
 800446c:	d132      	bne.n	80044d4 <HAL_RTC_DeactivateAlarm+0xac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4938      	ldr	r1, [pc, #224]	@ (800455c <HAL_RTC_DeactivateAlarm+0x134>)
 800447a:	400a      	ands	r2, r1
 800447c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4935      	ldr	r1, [pc, #212]	@ (8004560 <HAL_RTC_DeactivateAlarm+0x138>)
 800448a:	400a      	ands	r2, r1
 800448c:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800448e:	f7fd faa1 	bl	80019d4 <HAL_GetTick>
 8004492:	0003      	movs	r3, r0
 8004494:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004496:	e016      	b.n	80044c6 <HAL_RTC_DeactivateAlarm+0x9e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004498:	f7fd fa9c 	bl	80019d4 <HAL_GetTick>
 800449c:	0002      	movs	r2, r0
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad2      	subs	r2, r2, r3
 80044a2:	23fa      	movs	r3, #250	@ 0xfa
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d90d      	bls.n	80044c6 <HAL_RTC_DeactivateAlarm+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	22ff      	movs	r2, #255	@ 0xff
 80044b0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2221      	movs	r2, #33	@ 0x21
 80044b6:	2103      	movs	r1, #3
 80044b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	2100      	movs	r1, #0
 80044c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e045      	b.n	8004552 <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	4013      	ands	r3, r2
 80044d0:	d0e2      	beq.n	8004498 <HAL_RTC_DeactivateAlarm+0x70>
 80044d2:	e031      	b.n	8004538 <HAL_RTC_DeactivateAlarm+0x110>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4921      	ldr	r1, [pc, #132]	@ (8004564 <HAL_RTC_DeactivateAlarm+0x13c>)
 80044e0:	400a      	ands	r2, r1
 80044e2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	491e      	ldr	r1, [pc, #120]	@ (8004568 <HAL_RTC_DeactivateAlarm+0x140>)
 80044f0:	400a      	ands	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044f4:	f7fd fa6e 	bl	80019d4 <HAL_GetTick>
 80044f8:	0003      	movs	r3, r0
 80044fa:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80044fc:	e016      	b.n	800452c <HAL_RTC_DeactivateAlarm+0x104>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044fe:	f7fd fa69 	bl	80019d4 <HAL_GetTick>
 8004502:	0002      	movs	r2, r0
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1ad2      	subs	r2, r2, r3
 8004508:	23fa      	movs	r3, #250	@ 0xfa
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	429a      	cmp	r2, r3
 800450e:	d90d      	bls.n	800452c <HAL_RTC_DeactivateAlarm+0x104>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	22ff      	movs	r2, #255	@ 0xff
 8004516:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2221      	movs	r2, #33	@ 0x21
 800451c:	2103      	movs	r1, #3
 800451e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	2100      	movs	r1, #0
 8004526:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e012      	b.n	8004552 <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2202      	movs	r2, #2
 8004534:	4013      	ands	r3, r2
 8004536:	d0e2      	beq.n	80044fe <HAL_RTC_DeactivateAlarm+0xd6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	22ff      	movs	r2, #255	@ 0xff
 800453e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2221      	movs	r2, #33	@ 0x21
 8004544:	2101      	movs	r1, #1
 8004546:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	2100      	movs	r1, #0
 800454e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	0018      	movs	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	b004      	add	sp, #16
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			@ (mov r8, r8)
 800455c:	fffffeff 	.word	0xfffffeff
 8004560:	ffffefff 	.word	0xffffefff
 8004564:	fffffdff 	.word	0xfffffdff
 8004568:	ffffdfff 	.word	0xffffdfff

0800456c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004574:	4b21      	ldr	r3, [pc, #132]	@ (80045fc <HAL_RTC_AlarmIRQHandler+0x90>)
 8004576:	2280      	movs	r2, #128	@ 0x80
 8004578:	0292      	lsls	r2, r2, #10
 800457a:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	2380      	movs	r3, #128	@ 0x80
 8004584:	015b      	lsls	r3, r3, #5
 8004586:	4013      	ands	r3, r2
 8004588:	d014      	beq.n	80045b4 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	2380      	movs	r3, #128	@ 0x80
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	4013      	ands	r3, r2
 8004596:	d00d      	beq.n	80045b4 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	22ff      	movs	r2, #255	@ 0xff
 80045a0:	401a      	ands	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4916      	ldr	r1, [pc, #88]	@ (8004600 <HAL_RTC_AlarmIRQHandler+0x94>)
 80045a8:	430a      	orrs	r2, r1
 80045aa:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	0018      	movs	r0, r3
 80045b0:	f7fb fffa 	bl	80005a8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	2380      	movs	r3, #128	@ 0x80
 80045bc:	019b      	lsls	r3, r3, #6
 80045be:	4013      	ands	r3, r2
 80045c0:	d014      	beq.n	80045ec <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	2380      	movs	r3, #128	@ 0x80
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4013      	ands	r3, r2
 80045ce:	d00d      	beq.n	80045ec <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	22ff      	movs	r2, #255	@ 0xff
 80045d8:	401a      	ands	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4909      	ldr	r1, [pc, #36]	@ (8004604 <HAL_RTC_AlarmIRQHandler+0x98>)
 80045e0:	430a      	orrs	r2, r1
 80045e2:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	0018      	movs	r0, r3
 80045e8:	f000 f8e4 	bl	80047b4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2221      	movs	r2, #33	@ 0x21
 80045f0:	2101      	movs	r1, #1
 80045f2:	5499      	strb	r1, [r3, r2]
}
 80045f4:	46c0      	nop			@ (mov r8, r8)
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b002      	add	sp, #8
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40010400 	.word	0x40010400
 8004600:	fffffe7f 	.word	0xfffffe7f
 8004604:	fffffd7f 	.word	0xfffffd7f

08004608 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a0e      	ldr	r2, [pc, #56]	@ (8004654 <HAL_RTC_WaitForSynchro+0x4c>)
 800461a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800461c:	f7fd f9da 	bl	80019d4 <HAL_GetTick>
 8004620:	0003      	movs	r3, r0
 8004622:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004624:	e00a      	b.n	800463c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004626:	f7fd f9d5 	bl	80019d4 <HAL_GetTick>
 800462a:	0002      	movs	r2, r0
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1ad2      	subs	r2, r2, r3
 8004630:	23fa      	movs	r3, #250	@ 0xfa
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	429a      	cmp	r2, r3
 8004636:	d901      	bls.n	800463c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e006      	b.n	800464a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	4013      	ands	r3, r2
 8004646:	d0ee      	beq.n	8004626 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	0018      	movs	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	b004      	add	sp, #16
 8004650:	bd80      	pop	{r7, pc}
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	0001ff5f 	.word	0x0001ff5f

08004658 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004664:	230f      	movs	r3, #15
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2240      	movs	r2, #64	@ 0x40
 8004674:	4013      	ands	r3, r2
 8004676:	d12c      	bne.n	80046d2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2180      	movs	r1, #128	@ 0x80
 8004684:	430a      	orrs	r2, r1
 8004686:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004688:	f7fd f9a4 	bl	80019d4 <HAL_GetTick>
 800468c:	0003      	movs	r3, r0
 800468e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004690:	e014      	b.n	80046bc <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004692:	f7fd f99f 	bl	80019d4 <HAL_GetTick>
 8004696:	0002      	movs	r2, r0
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	1ad2      	subs	r2, r2, r3
 800469c:	200f      	movs	r0, #15
 800469e:	183b      	adds	r3, r7, r0
 80046a0:	1839      	adds	r1, r7, r0
 80046a2:	7809      	ldrb	r1, [r1, #0]
 80046a4:	7019      	strb	r1, [r3, #0]
 80046a6:	23fa      	movs	r3, #250	@ 0xfa
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d906      	bls.n	80046bc <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2221      	movs	r2, #33	@ 0x21
 80046b2:	2104      	movs	r1, #4
 80046b4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80046b6:	183b      	adds	r3, r7, r0
 80046b8:	2201      	movs	r2, #1
 80046ba:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2240      	movs	r2, #64	@ 0x40
 80046c4:	4013      	ands	r3, r2
 80046c6:	d104      	bne.n	80046d2 <RTC_EnterInitMode+0x7a>
 80046c8:	230f      	movs	r3, #15
 80046ca:	18fb      	adds	r3, r7, r3
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d1df      	bne.n	8004692 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80046d2:	230f      	movs	r3, #15
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	781b      	ldrb	r3, [r3, #0]
}
 80046d8:	0018      	movs	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	b004      	add	sp, #16
 80046de:	bd80      	pop	{r7, pc}

080046e0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e8:	240f      	movs	r4, #15
 80046ea:	193b      	adds	r3, r7, r4
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2180      	movs	r1, #128	@ 0x80
 80046fc:	438a      	bics	r2, r1
 80046fe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2220      	movs	r2, #32
 8004708:	4013      	ands	r3, r2
 800470a:	d10c      	bne.n	8004726 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0018      	movs	r0, r3
 8004710:	f7ff ff7a 	bl	8004608 <HAL_RTC_WaitForSynchro>
 8004714:	1e03      	subs	r3, r0, #0
 8004716:	d006      	beq.n	8004726 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2221      	movs	r2, #33	@ 0x21
 800471c:	2104      	movs	r1, #4
 800471e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004720:	193b      	adds	r3, r7, r4
 8004722:	2201      	movs	r2, #1
 8004724:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004726:	230f      	movs	r3, #15
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	781b      	ldrb	r3, [r3, #0]
}
 800472c:	0018      	movs	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	b005      	add	sp, #20
 8004732:	bd90      	pop	{r4, r7, pc}

08004734 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	0002      	movs	r2, r0
 800473c:	1dfb      	adds	r3, r7, #7
 800473e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004744:	e007      	b.n	8004756 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3301      	adds	r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800474c:	1dfb      	adds	r3, r7, #7
 800474e:	1dfa      	adds	r2, r7, #7
 8004750:	7812      	ldrb	r2, [r2, #0]
 8004752:	3a0a      	subs	r2, #10
 8004754:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8004756:	1dfb      	adds	r3, r7, #7
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b09      	cmp	r3, #9
 800475c:	d8f3      	bhi.n	8004746 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	b2da      	uxtb	r2, r3
 8004766:	1dfb      	adds	r3, r7, #7
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	4313      	orrs	r3, r2
 800476c:	b2db      	uxtb	r3, r3
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b004      	add	sp, #16
 8004774:	bd80      	pop	{r7, pc}

08004776 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	0002      	movs	r2, r0
 800477e:	1dfb      	adds	r3, r7, #7
 8004780:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004786:	1dfb      	adds	r3, r7, #7
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	b2db      	uxtb	r3, r3
 800478e:	001a      	movs	r2, r3
 8004790:	0013      	movs	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	189b      	adds	r3, r3, r2
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	1dfb      	adds	r3, r7, #7
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	210f      	movs	r1, #15
 80047a4:	400b      	ands	r3, r1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	18d3      	adds	r3, r2, r3
 80047aa:	b2db      	uxtb	r3, r3
}
 80047ac:	0018      	movs	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b004      	add	sp, #16
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80047bc:	46c0      	nop			@ (mov r8, r8)
 80047be:	46bd      	mov	sp, r7
 80047c0:	b002      	add	sp, #8
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e032      	b.n	800483c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2239      	movs	r2, #57	@ 0x39
 80047da:	5c9b      	ldrb	r3, [r3, r2]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d107      	bne.n	80047f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2238      	movs	r2, #56	@ 0x38
 80047e6:	2100      	movs	r1, #0
 80047e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f7fc ff53 	bl	8001698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2239      	movs	r2, #57	@ 0x39
 80047f6:	2102      	movs	r1, #2
 80047f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3304      	adds	r3, #4
 8004802:	0019      	movs	r1, r3
 8004804:	0010      	movs	r0, r2
 8004806:	f000 fc2b 	bl	8005060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	223e      	movs	r2, #62	@ 0x3e
 800480e:	2101      	movs	r1, #1
 8004810:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	223a      	movs	r2, #58	@ 0x3a
 8004816:	2101      	movs	r1, #1
 8004818:	5499      	strb	r1, [r3, r2]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	223b      	movs	r2, #59	@ 0x3b
 800481e:	2101      	movs	r1, #1
 8004820:	5499      	strb	r1, [r3, r2]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	223c      	movs	r2, #60	@ 0x3c
 8004826:	2101      	movs	r1, #1
 8004828:	5499      	strb	r1, [r3, r2]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	223d      	movs	r2, #61	@ 0x3d
 800482e:	2101      	movs	r1, #1
 8004830:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2239      	movs	r2, #57	@ 0x39
 8004836:	2101      	movs	r1, #1
 8004838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	0018      	movs	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	b002      	add	sp, #8
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2239      	movs	r2, #57	@ 0x39
 8004850:	5c9b      	ldrb	r3, [r3, r2]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	d001      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e031      	b.n	80048c0 <HAL_TIM_Base_Start_IT+0x7c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2239      	movs	r2, #57	@ 0x39
 8004860:	2102      	movs	r1, #2
 8004862:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2101      	movs	r1, #1
 8004870:	430a      	orrs	r2, r1
 8004872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	2380      	movs	r3, #128	@ 0x80
 800487a:	05db      	lsls	r3, r3, #23
 800487c:	429a      	cmp	r2, r3
 800487e:	d004      	beq.n	800488a <HAL_TIM_Base_Start_IT+0x46>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a10      	ldr	r2, [pc, #64]	@ (80048c8 <HAL_TIM_Base_Start_IT+0x84>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d111      	bne.n	80048ae <HAL_TIM_Base_Start_IT+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2207      	movs	r2, #7
 8004892:	4013      	ands	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b06      	cmp	r3, #6
 800489a:	d010      	beq.n	80048be <HAL_TIM_Base_Start_IT+0x7a>
    {
      __HAL_TIM_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2101      	movs	r1, #1
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ac:	e007      	b.n	80048be <HAL_TIM_Base_Start_IT+0x7a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2101      	movs	r1, #1
 80048ba:	430a      	orrs	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	0018      	movs	r0, r3
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b004      	add	sp, #16
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40010800 	.word	0x40010800

080048cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2101      	movs	r1, #1
 80048e0:	438a      	bics	r2, r1
 80048e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004914 <HAL_TIM_Base_Stop_IT+0x48>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	d107      	bne.n	8004900 <HAL_TIM_Base_Stop_IT+0x34>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2101      	movs	r1, #1
 80048fc:	438a      	bics	r2, r1
 80048fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2239      	movs	r2, #57	@ 0x39
 8004904:	2101      	movs	r1, #1
 8004906:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	0018      	movs	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	b002      	add	sp, #8
 8004910:	bd80      	pop	{r7, pc}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	00001111 	.word	0x00001111

08004918 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e032      	b.n	8004990 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2239      	movs	r2, #57	@ 0x39
 800492e:	5c9b      	ldrb	r3, [r3, r2]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d107      	bne.n	8004946 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2238      	movs	r2, #56	@ 0x38
 800493a:	2100      	movs	r1, #0
 800493c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f7fc fe8b 	bl	800165c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2239      	movs	r2, #57	@ 0x39
 800494a:	2102      	movs	r1, #2
 800494c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3304      	adds	r3, #4
 8004956:	0019      	movs	r1, r3
 8004958:	0010      	movs	r0, r2
 800495a:	f000 fb81 	bl	8005060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	223e      	movs	r2, #62	@ 0x3e
 8004962:	2101      	movs	r1, #1
 8004964:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	223a      	movs	r2, #58	@ 0x3a
 800496a:	2101      	movs	r1, #1
 800496c:	5499      	strb	r1, [r3, r2]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	223b      	movs	r2, #59	@ 0x3b
 8004972:	2101      	movs	r1, #1
 8004974:	5499      	strb	r1, [r3, r2]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	223c      	movs	r2, #60	@ 0x3c
 800497a:	2101      	movs	r1, #1
 800497c:	5499      	strb	r1, [r3, r2]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	223d      	movs	r2, #61	@ 0x3d
 8004982:	2101      	movs	r1, #1
 8004984:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2239      	movs	r2, #57	@ 0x39
 800498a:	2101      	movs	r1, #1
 800498c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	0018      	movs	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	b002      	add	sp, #8
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d108      	bne.n	80049ba <HAL_TIM_PWM_Start+0x22>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	223a      	movs	r2, #58	@ 0x3a
 80049ac:	5c9b      	ldrb	r3, [r3, r2]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	1e5a      	subs	r2, r3, #1
 80049b4:	4193      	sbcs	r3, r2
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	e01f      	b.n	80049fa <HAL_TIM_PWM_Start+0x62>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d108      	bne.n	80049d2 <HAL_TIM_PWM_Start+0x3a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	223b      	movs	r2, #59	@ 0x3b
 80049c4:	5c9b      	ldrb	r3, [r3, r2]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	1e5a      	subs	r2, r3, #1
 80049cc:	4193      	sbcs	r3, r2
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	e013      	b.n	80049fa <HAL_TIM_PWM_Start+0x62>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d108      	bne.n	80049ea <HAL_TIM_PWM_Start+0x52>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	223c      	movs	r2, #60	@ 0x3c
 80049dc:	5c9b      	ldrb	r3, [r3, r2]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	1e5a      	subs	r2, r3, #1
 80049e4:	4193      	sbcs	r3, r2
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	e007      	b.n	80049fa <HAL_TIM_PWM_Start+0x62>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	223d      	movs	r2, #61	@ 0x3d
 80049ee:	5c9b      	ldrb	r3, [r3, r2]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	1e5a      	subs	r2, r3, #1
 80049f6:	4193      	sbcs	r3, r2
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e048      	b.n	8004a94 <HAL_TIM_PWM_Start+0xfc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d104      	bne.n	8004a12 <HAL_TIM_PWM_Start+0x7a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	223a      	movs	r2, #58	@ 0x3a
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	5499      	strb	r1, [r3, r2]
 8004a10:	e013      	b.n	8004a3a <HAL_TIM_PWM_Start+0xa2>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d104      	bne.n	8004a22 <HAL_TIM_PWM_Start+0x8a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	223b      	movs	r2, #59	@ 0x3b
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	5499      	strb	r1, [r3, r2]
 8004a20:	e00b      	b.n	8004a3a <HAL_TIM_PWM_Start+0xa2>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_PWM_Start+0x9a>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	223c      	movs	r2, #60	@ 0x3c
 8004a2c:	2102      	movs	r1, #2
 8004a2e:	5499      	strb	r1, [r3, r2]
 8004a30:	e003      	b.n	8004a3a <HAL_TIM_PWM_Start+0xa2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	223d      	movs	r2, #61	@ 0x3d
 8004a36:	2102      	movs	r1, #2
 8004a38:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6839      	ldr	r1, [r7, #0]
 8004a40:	2201      	movs	r2, #1
 8004a42:	0018      	movs	r0, r3
 8004a44:	f000 fcf4 	bl	8005430 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	2380      	movs	r3, #128	@ 0x80
 8004a4e:	05db      	lsls	r3, r3, #23
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d004      	beq.n	8004a5e <HAL_TIM_PWM_Start+0xc6>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a10      	ldr	r2, [pc, #64]	@ (8004a9c <HAL_TIM_PWM_Start+0x104>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d111      	bne.n	8004a82 <HAL_TIM_PWM_Start+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	2207      	movs	r2, #7
 8004a66:	4013      	ands	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d010      	beq.n	8004a92 <HAL_TIM_PWM_Start+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a80:	e007      	b.n	8004a92 <HAL_TIM_PWM_Start+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b004      	add	sp, #16
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40010800 	.word	0x40010800

08004aa0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6839      	ldr	r1, [r7, #0]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 fcbc 	bl	8005430 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	4a16      	ldr	r2, [pc, #88]	@ (8004b18 <HAL_TIM_PWM_Stop+0x78>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d107      	bne.n	8004ad4 <HAL_TIM_PWM_Stop+0x34>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2101      	movs	r1, #1
 8004ad0:	438a      	bics	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d104      	bne.n	8004ae4 <HAL_TIM_PWM_Stop+0x44>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	223a      	movs	r2, #58	@ 0x3a
 8004ade:	2101      	movs	r1, #1
 8004ae0:	5499      	strb	r1, [r3, r2]
 8004ae2:	e013      	b.n	8004b0c <HAL_TIM_PWM_Stop+0x6c>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d104      	bne.n	8004af4 <HAL_TIM_PWM_Stop+0x54>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	223b      	movs	r2, #59	@ 0x3b
 8004aee:	2101      	movs	r1, #1
 8004af0:	5499      	strb	r1, [r3, r2]
 8004af2:	e00b      	b.n	8004b0c <HAL_TIM_PWM_Stop+0x6c>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d104      	bne.n	8004b04 <HAL_TIM_PWM_Stop+0x64>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	223c      	movs	r2, #60	@ 0x3c
 8004afe:	2101      	movs	r1, #1
 8004b00:	5499      	strb	r1, [r3, r2]
 8004b02:	e003      	b.n	8004b0c <HAL_TIM_PWM_Stop+0x6c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	223d      	movs	r2, #61	@ 0x3d
 8004b08:	2101      	movs	r1, #1
 8004b0a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	0018      	movs	r0, r3
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b002      	add	sp, #8
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	46c0      	nop			@ (mov r8, r8)
 8004b18:	00001111 	.word	0x00001111

08004b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d124      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d11d      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2203      	movs	r2, #3
 8004b46:	4252      	negs	r2, r2
 8004b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2203      	movs	r2, #3
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d004      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f000 fa66 	bl	8005030 <HAL_TIM_IC_CaptureCallback>
 8004b64:	e007      	b.n	8004b76 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f000 fa59 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f000 fa65 	bl	8005040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2204      	movs	r2, #4
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d125      	bne.n	8004bd6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2204      	movs	r2, #4
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d11e      	bne.n	8004bd6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2205      	movs	r2, #5
 8004b9e:	4252      	negs	r2, r2
 8004ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	23c0      	movs	r3, #192	@ 0xc0
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d004      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f000 fa39 	bl	8005030 <HAL_TIM_IC_CaptureCallback>
 8004bbe:	e007      	b.n	8004bd0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f000 fa2c 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f000 fa38 	bl	8005040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2208      	movs	r2, #8
 8004bde:	4013      	ands	r3, r2
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d124      	bne.n	8004c2e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	2208      	movs	r2, #8
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d11d      	bne.n	8004c2e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2209      	movs	r2, #9
 8004bf8:	4252      	negs	r2, r2
 8004bfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2204      	movs	r2, #4
 8004c00:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	2203      	movs	r2, #3
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f000 fa0d 	bl	8005030 <HAL_TIM_IC_CaptureCallback>
 8004c16:	e007      	b.n	8004c28 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f000 fa00 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	0018      	movs	r0, r3
 8004c24:	f000 fa0c 	bl	8005040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	2210      	movs	r2, #16
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d125      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2210      	movs	r2, #16
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b10      	cmp	r3, #16
 8004c48:	d11e      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2211      	movs	r2, #17
 8004c50:	4252      	negs	r2, r2
 8004c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2208      	movs	r2, #8
 8004c58:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	23c0      	movs	r3, #192	@ 0xc0
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4013      	ands	r3, r2
 8004c66:	d004      	beq.n	8004c72 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f000 f9e0 	bl	8005030 <HAL_TIM_IC_CaptureCallback>
 8004c70:	e007      	b.n	8004c82 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	0018      	movs	r0, r3
 8004c76:	f000 f9d3 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f000 f9df 	bl	8005040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d10f      	bne.n	8004cb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d108      	bne.n	8004cb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	4252      	negs	r2, r2
 8004cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f7fb fc8f 	bl	80005d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2240      	movs	r2, #64	@ 0x40
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b40      	cmp	r3, #64	@ 0x40
 8004cc2:	d10f      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2240      	movs	r2, #64	@ 0x40
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b40      	cmp	r3, #64	@ 0x40
 8004cd0:	d108      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2241      	movs	r2, #65	@ 0x41
 8004cd8:	4252      	negs	r2, r2
 8004cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f000 f9b6 	bl	8005050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ce4:	46c0      	nop			@ (mov r8, r8)
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b002      	add	sp, #8
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf8:	2317      	movs	r3, #23
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2238      	movs	r2, #56	@ 0x38
 8004d04:	5c9b      	ldrb	r3, [r3, r2]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_TIM_PWM_ConfigChannel+0x22>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e0ad      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2238      	movs	r2, #56	@ 0x38
 8004d12:	2101      	movs	r1, #1
 8004d14:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d100      	bne.n	8004d1e <HAL_TIM_PWM_ConfigChannel+0x32>
 8004d1c:	e076      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x120>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	d900      	bls.n	8004d26 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004d24:	e095      	b.n	8004e52 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d04e      	beq.n	8004dca <HAL_TIM_PWM_ConfigChannel+0xde>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d900      	bls.n	8004d34 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004d32:	e08e      	b.n	8004e52 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x56>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d021      	beq.n	8004d84 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004d40:	e087      	b.n	8004e52 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	0011      	movs	r1, r2
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f000 f9d2 	bl	80050f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2108      	movs	r1, #8
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2104      	movs	r1, #4
 8004d6c:	438a      	bics	r2, r1
 8004d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6999      	ldr	r1, [r3, #24]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	619a      	str	r2, [r3, #24]
      break;
 8004d82:	e06b      	b.n	8004e5c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	0011      	movs	r1, r2
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f000 f9ed 	bl	800516c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2180      	movs	r1, #128	@ 0x80
 8004d9e:	0109      	lsls	r1, r1, #4
 8004da0:	430a      	orrs	r2, r1
 8004da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4931      	ldr	r1, [pc, #196]	@ (8004e74 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004db0:	400a      	ands	r2, r1
 8004db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6999      	ldr	r1, [r3, #24]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	021a      	lsls	r2, r3, #8
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	619a      	str	r2, [r3, #24]
      break;
 8004dc8:	e048      	b.n	8004e5c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	0011      	movs	r1, r2
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f000 fa0c 	bl	80051f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69da      	ldr	r2, [r3, #28]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2108      	movs	r1, #8
 8004de4:	430a      	orrs	r2, r1
 8004de6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2104      	movs	r1, #4
 8004df4:	438a      	bics	r2, r1
 8004df6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69d9      	ldr	r1, [r3, #28]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	61da      	str	r2, [r3, #28]
      break;
 8004e0a:	e027      	b.n	8004e5c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	0011      	movs	r1, r2
 8004e14:	0018      	movs	r0, r3
 8004e16:	f000 fa2b 	bl	8005270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2180      	movs	r1, #128	@ 0x80
 8004e26:	0109      	lsls	r1, r1, #4
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69da      	ldr	r2, [r3, #28]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	490f      	ldr	r1, [pc, #60]	@ (8004e74 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004e38:	400a      	ands	r2, r1
 8004e3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69d9      	ldr	r1, [r3, #28]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	021a      	lsls	r2, r3, #8
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	61da      	str	r2, [r3, #28]
      break;
 8004e50:	e004      	b.n	8004e5c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004e52:	2317      	movs	r3, #23
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	2201      	movs	r2, #1
 8004e58:	701a      	strb	r2, [r3, #0]
      break;
 8004e5a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2238      	movs	r2, #56	@ 0x38
 8004e60:	2100      	movs	r1, #0
 8004e62:	5499      	strb	r1, [r3, r2]

  return status;
 8004e64:	2317      	movs	r3, #23
 8004e66:	18fb      	adds	r3, r7, r3
 8004e68:	781b      	ldrb	r3, [r3, #0]
}
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	b006      	add	sp, #24
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	46c0      	nop			@ (mov r8, r8)
 8004e74:	fffffbff 	.word	0xfffffbff

08004e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e82:	230f      	movs	r3, #15
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	2200      	movs	r2, #0
 8004e88:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2238      	movs	r2, #56	@ 0x38
 8004e8e:	5c9b      	ldrb	r3, [r3, r2]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_TIM_ConfigClockSource+0x20>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e0bc      	b.n	8005012 <HAL_TIM_ConfigClockSource+0x19a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2238      	movs	r2, #56	@ 0x38
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2239      	movs	r2, #57	@ 0x39
 8004ea4:	2102      	movs	r1, #2
 8004ea6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2277      	movs	r2, #119	@ 0x77
 8004eb4:	4393      	bics	r3, r2
 8004eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a58      	ldr	r2, [pc, #352]	@ (800501c <HAL_TIM_ConfigClockSource+0x1a4>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2280      	movs	r2, #128	@ 0x80
 8004ece:	0192      	lsls	r2, r2, #6
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d040      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0xde>
 8004ed4:	2280      	movs	r2, #128	@ 0x80
 8004ed6:	0192      	lsls	r2, r2, #6
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d900      	bls.n	8004ede <HAL_TIM_ConfigClockSource+0x66>
 8004edc:	e088      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x178>
 8004ede:	2280      	movs	r2, #128	@ 0x80
 8004ee0:	0152      	lsls	r2, r2, #5
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d100      	bne.n	8004ee8 <HAL_TIM_ConfigClockSource+0x70>
 8004ee6:	e088      	b.n	8004ffa <HAL_TIM_ConfigClockSource+0x182>
 8004ee8:	2280      	movs	r2, #128	@ 0x80
 8004eea:	0152      	lsls	r2, r2, #5
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d900      	bls.n	8004ef2 <HAL_TIM_ConfigClockSource+0x7a>
 8004ef0:	e07e      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x178>
 8004ef2:	2b70      	cmp	r3, #112	@ 0x70
 8004ef4:	d018      	beq.n	8004f28 <HAL_TIM_ConfigClockSource+0xb0>
 8004ef6:	d900      	bls.n	8004efa <HAL_TIM_ConfigClockSource+0x82>
 8004ef8:	e07a      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x178>
 8004efa:	2b60      	cmp	r3, #96	@ 0x60
 8004efc:	d04f      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x126>
 8004efe:	d900      	bls.n	8004f02 <HAL_TIM_ConfigClockSource+0x8a>
 8004f00:	e076      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x178>
 8004f02:	2b50      	cmp	r3, #80	@ 0x50
 8004f04:	d03b      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x106>
 8004f06:	d900      	bls.n	8004f0a <HAL_TIM_ConfigClockSource+0x92>
 8004f08:	e072      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x178>
 8004f0a:	2b40      	cmp	r3, #64	@ 0x40
 8004f0c:	d057      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x146>
 8004f0e:	d900      	bls.n	8004f12 <HAL_TIM_ConfigClockSource+0x9a>
 8004f10:	e06e      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x178>
 8004f12:	2b30      	cmp	r3, #48	@ 0x30
 8004f14:	d063      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x166>
 8004f16:	d86b      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x178>
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d060      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x166>
 8004f1c:	d868      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x178>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d05d      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x166>
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d05b      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x166>
 8004f26:	e063      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f38:	f000 fa5a 	bl	80053f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2277      	movs	r2, #119	@ 0x77
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	609a      	str	r2, [r3, #8]
      break;
 8004f54:	e052      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f66:	f000 fa43 	bl	80053f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2180      	movs	r1, #128	@ 0x80
 8004f76:	01c9      	lsls	r1, r1, #7
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]
      break;
 8004f7c:	e03e      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8a:	001a      	movs	r2, r3
 8004f8c:	f000 f9b6 	bl	80052fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2150      	movs	r1, #80	@ 0x50
 8004f96:	0018      	movs	r0, r3
 8004f98:	f000 fa10 	bl	80053bc <TIM_ITRx_SetConfig>
      break;
 8004f9c:	e02e      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004faa:	001a      	movs	r2, r3
 8004fac:	f000 f9d4 	bl	8005358 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2160      	movs	r1, #96	@ 0x60
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f000 fa00 	bl	80053bc <TIM_ITRx_SetConfig>
      break;
 8004fbc:	e01e      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fca:	001a      	movs	r2, r3
 8004fcc:	f000 f996 	bl	80052fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2140      	movs	r1, #64	@ 0x40
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f000 f9f0 	bl	80053bc <TIM_ITRx_SetConfig>
      break;
 8004fdc:	e00e      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	0019      	movs	r1, r3
 8004fe8:	0010      	movs	r0, r2
 8004fea:	f000 f9e7 	bl	80053bc <TIM_ITRx_SetConfig>
      break;
 8004fee:	e005      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004ff0:	230f      	movs	r3, #15
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
      break;
 8004ff8:	e000      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004ffa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2239      	movs	r2, #57	@ 0x39
 8005000:	2101      	movs	r1, #1
 8005002:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2238      	movs	r2, #56	@ 0x38
 8005008:	2100      	movs	r1, #0
 800500a:	5499      	strb	r1, [r3, r2]

  return status;
 800500c:	230f      	movs	r3, #15
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	781b      	ldrb	r3, [r3, #0]
}
 8005012:	0018      	movs	r0, r3
 8005014:	46bd      	mov	sp, r7
 8005016:	b004      	add	sp, #16
 8005018:	bd80      	pop	{r7, pc}
 800501a:	46c0      	nop			@ (mov r8, r8)
 800501c:	ffff00ff 	.word	0xffff00ff

08005020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005028:	46c0      	nop			@ (mov r8, r8)
 800502a:	46bd      	mov	sp, r7
 800502c:	b002      	add	sp, #8
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005038:	46c0      	nop			@ (mov r8, r8)
 800503a:	46bd      	mov	sp, r7
 800503c:	b002      	add	sp, #8
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005048:	46c0      	nop			@ (mov r8, r8)
 800504a:	46bd      	mov	sp, r7
 800504c:	b002      	add	sp, #8
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005058:	46c0      	nop			@ (mov r8, r8)
 800505a:	46bd      	mov	sp, r7
 800505c:	b002      	add	sp, #8
 800505e:	bd80      	pop	{r7, pc}

08005060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	2380      	movs	r3, #128	@ 0x80
 8005074:	05db      	lsls	r3, r3, #23
 8005076:	429a      	cmp	r2, r3
 8005078:	d003      	beq.n	8005082 <TIM_Base_SetConfig+0x22>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a1b      	ldr	r2, [pc, #108]	@ (80050ec <TIM_Base_SetConfig+0x8c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d108      	bne.n	8005094 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2270      	movs	r2, #112	@ 0x70
 8005086:	4393      	bics	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	2380      	movs	r3, #128	@ 0x80
 8005098:	05db      	lsls	r3, r3, #23
 800509a:	429a      	cmp	r2, r3
 800509c:	d003      	beq.n	80050a6 <TIM_Base_SetConfig+0x46>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a12      	ldr	r2, [pc, #72]	@ (80050ec <TIM_Base_SetConfig+0x8c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d108      	bne.n	80050b8 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4a11      	ldr	r2, [pc, #68]	@ (80050f0 <TIM_Base_SetConfig+0x90>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2280      	movs	r2, #128	@ 0x80
 80050bc:	4393      	bics	r3, r2
 80050be:	001a      	movs	r2, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	615a      	str	r2, [r3, #20]
}
 80050e4:	46c0      	nop			@ (mov r8, r8)
 80050e6:	46bd      	mov	sp, r7
 80050e8:	b004      	add	sp, #16
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40010800 	.word	0x40010800
 80050f0:	fffffcff 	.word	0xfffffcff

080050f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	2201      	movs	r2, #1
 8005104:	4393      	bics	r3, r2
 8005106:	001a      	movs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2270      	movs	r2, #112	@ 0x70
 8005122:	4393      	bics	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2203      	movs	r2, #3
 800512a:	4393      	bics	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2202      	movs	r2, #2
 800513c:	4393      	bics	r3, r2
 800513e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	621a      	str	r2, [r3, #32]
}
 8005164:	46c0      	nop			@ (mov r8, r8)
 8005166:	46bd      	mov	sp, r7
 8005168:	b006      	add	sp, #24
 800516a:	bd80      	pop	{r7, pc}

0800516c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	2210      	movs	r2, #16
 800517c:	4393      	bics	r3, r2
 800517e:	001a      	movs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4a13      	ldr	r2, [pc, #76]	@ (80051e8 <TIM_OC2_SetConfig+0x7c>)
 800519a:	4013      	ands	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a12      	ldr	r2, [pc, #72]	@ (80051ec <TIM_OC2_SetConfig+0x80>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	021b      	lsls	r3, r3, #8
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2220      	movs	r2, #32
 80051b6:	4393      	bics	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	46c0      	nop			@ (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b006      	add	sp, #24
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	ffff8fff 	.word	0xffff8fff
 80051ec:	fffffcff 	.word	0xfffffcff

080051f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005268 <TIM_OC3_SetConfig+0x78>)
 8005200:	401a      	ands	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2270      	movs	r2, #112	@ 0x70
 800521c:	4393      	bics	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2203      	movs	r2, #3
 8005224:	4393      	bics	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	4a0d      	ldr	r2, [pc, #52]	@ (800526c <TIM_OC3_SetConfig+0x7c>)
 8005236:	4013      	ands	r3, r2
 8005238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	46c0      	nop			@ (mov r8, r8)
 8005262:	46bd      	mov	sp, r7
 8005264:	b006      	add	sp, #24
 8005266:	bd80      	pop	{r7, pc}
 8005268:	fffffeff 	.word	0xfffffeff
 800526c:	fffffdff 	.word	0xfffffdff

08005270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	4a1b      	ldr	r2, [pc, #108]	@ (80052ec <TIM_OC4_SetConfig+0x7c>)
 8005280:	401a      	ands	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4a15      	ldr	r2, [pc, #84]	@ (80052f0 <TIM_OC4_SetConfig+0x80>)
 800529c:	4013      	ands	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a14      	ldr	r2, [pc, #80]	@ (80052f4 <TIM_OC4_SetConfig+0x84>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	4a10      	ldr	r2, [pc, #64]	@ (80052f8 <TIM_OC4_SetConfig+0x88>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	031b      	lsls	r3, r3, #12
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	621a      	str	r2, [r3, #32]
}
 80052e2:	46c0      	nop			@ (mov r8, r8)
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b006      	add	sp, #24
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	46c0      	nop			@ (mov r8, r8)
 80052ec:	ffffefff 	.word	0xffffefff
 80052f0:	ffff8fff 	.word	0xffff8fff
 80052f4:	fffffcff 	.word	0xfffffcff
 80052f8:	ffffdfff 	.word	0xffffdfff

080052fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	2201      	movs	r2, #1
 8005314:	4393      	bics	r3, r2
 8005316:	001a      	movs	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	22f0      	movs	r2, #240	@ 0xf0
 8005326:	4393      	bics	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	220a      	movs	r2, #10
 8005338:	4393      	bics	r3, r2
 800533a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	621a      	str	r2, [r3, #32]
}
 8005350:	46c0      	nop			@ (mov r8, r8)
 8005352:	46bd      	mov	sp, r7
 8005354:	b006      	add	sp, #24
 8005356:	bd80      	pop	{r7, pc}

08005358 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	2210      	movs	r2, #16
 800536a:	4393      	bics	r3, r2
 800536c:	001a      	movs	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	4a0d      	ldr	r2, [pc, #52]	@ (80053b8 <TIM_TI2_ConfigInputStage+0x60>)
 8005382:	4013      	ands	r3, r2
 8005384:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	031b      	lsls	r3, r3, #12
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	22a0      	movs	r2, #160	@ 0xa0
 8005394:	4393      	bics	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	46c0      	nop			@ (mov r8, r8)
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b006      	add	sp, #24
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	46c0      	nop			@ (mov r8, r8)
 80053b8:	ffff0fff 	.word	0xffff0fff

080053bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2270      	movs	r2, #112	@ 0x70
 80053d0:	4393      	bics	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	2207      	movs	r2, #7
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	609a      	str	r2, [r3, #8]
}
 80053e6:	46c0      	nop			@ (mov r8, r8)
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b004      	add	sp, #16
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	4a09      	ldr	r2, [pc, #36]	@ (800542c <TIM_ETR_SetConfig+0x3c>)
 8005408:	4013      	ands	r3, r2
 800540a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	021a      	lsls	r2, r3, #8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	431a      	orrs	r2, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4313      	orrs	r3, r2
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	609a      	str	r2, [r3, #8]
}
 8005424:	46c0      	nop			@ (mov r8, r8)
 8005426:	46bd      	mov	sp, r7
 8005428:	b006      	add	sp, #24
 800542a:	bd80      	pop	{r7, pc}
 800542c:	ffff00ff 	.word	0xffff00ff

08005430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	221f      	movs	r2, #31
 8005440:	4013      	ands	r3, r2
 8005442:	2201      	movs	r2, #1
 8005444:	409a      	lsls	r2, r3
 8005446:	0013      	movs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	43d2      	mvns	r2, r2
 8005452:	401a      	ands	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a1a      	ldr	r2, [r3, #32]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	211f      	movs	r1, #31
 8005460:	400b      	ands	r3, r1
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	4099      	lsls	r1, r3
 8005466:	000b      	movs	r3, r1
 8005468:	431a      	orrs	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	46bd      	mov	sp, r7
 8005472:	b006      	add	sp, #24
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2238      	movs	r2, #56	@ 0x38
 8005486:	5c9b      	ldrb	r3, [r3, r2]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800548c:	2302      	movs	r3, #2
 800548e:	e03d      	b.n	800550c <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2238      	movs	r2, #56	@ 0x38
 8005494:	2101      	movs	r1, #1
 8005496:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2239      	movs	r2, #57	@ 0x39
 800549c:	2102      	movs	r1, #2
 800549e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2270      	movs	r2, #112	@ 0x70
 80054b4:	4393      	bics	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	2380      	movs	r3, #128	@ 0x80
 80054d0:	05db      	lsls	r3, r3, #23
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d004      	beq.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a0e      	ldr	r2, [pc, #56]	@ (8005514 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d10c      	bne.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2280      	movs	r2, #128	@ 0x80
 80054e4:	4393      	bics	r3, r2
 80054e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2239      	movs	r2, #57	@ 0x39
 80054fe:	2101      	movs	r1, #1
 8005500:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2238      	movs	r2, #56	@ 0x38
 8005506:	2100      	movs	r1, #0
 8005508:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	0018      	movs	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	b004      	add	sp, #16
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40010800 	.word	0x40010800

08005518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e044      	b.n	80055b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d107      	bne.n	8005542 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2278      	movs	r2, #120	@ 0x78
 8005536:	2100      	movs	r1, #0
 8005538:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0018      	movs	r0, r3
 800553e:	f7fc f829 	bl	8001594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2224      	movs	r2, #36	@ 0x24
 8005546:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2101      	movs	r1, #1
 8005554:	438a      	bics	r2, r1
 8005556:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	0018      	movs	r0, r3
 800555c:	f000 f8d0 	bl	8005700 <UART_SetConfig>
 8005560:	0003      	movs	r3, r0
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e024      	b.n	80055b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	0018      	movs	r0, r3
 8005576:	f000 fb0d 	bl	8005b94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	490d      	ldr	r1, [pc, #52]	@ (80055bc <HAL_UART_Init+0xa4>)
 8005586:	400a      	ands	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	212a      	movs	r1, #42	@ 0x2a
 8005596:	438a      	bics	r2, r1
 8005598:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2101      	movs	r1, #1
 80055a6:	430a      	orrs	r2, r1
 80055a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	0018      	movs	r0, r3
 80055ae:	f000 fba5 	bl	8005cfc <UART_CheckIdleState>
 80055b2:	0003      	movs	r3, r0
}
 80055b4:	0018      	movs	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b002      	add	sp, #8
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	ffffb7ff 	.word	0xffffb7ff

080055c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08a      	sub	sp, #40	@ 0x28
 80055c4:	af02      	add	r7, sp, #8
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	603b      	str	r3, [r7, #0]
 80055cc:	1dbb      	adds	r3, r7, #6
 80055ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d000      	beq.n	80055da <HAL_UART_Transmit+0x1a>
 80055d8:	e08c      	b.n	80056f4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_UART_Transmit+0x28>
 80055e0:	1dbb      	adds	r3, r7, #6
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e084      	b.n	80056f6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	2380      	movs	r3, #128	@ 0x80
 80055f2:	015b      	lsls	r3, r3, #5
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d109      	bne.n	800560c <HAL_UART_Transmit+0x4c>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2201      	movs	r2, #1
 8005604:	4013      	ands	r3, r2
 8005606:	d001      	beq.n	800560c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e074      	b.n	80056f6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2284      	movs	r2, #132	@ 0x84
 8005610:	2100      	movs	r1, #0
 8005612:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2221      	movs	r2, #33	@ 0x21
 8005618:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800561a:	f7fc f9db 	bl	80019d4 <HAL_GetTick>
 800561e:	0003      	movs	r3, r0
 8005620:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1dba      	adds	r2, r7, #6
 8005626:	2150      	movs	r1, #80	@ 0x50
 8005628:	8812      	ldrh	r2, [r2, #0]
 800562a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1dba      	adds	r2, r7, #6
 8005630:	2152      	movs	r1, #82	@ 0x52
 8005632:	8812      	ldrh	r2, [r2, #0]
 8005634:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	2380      	movs	r3, #128	@ 0x80
 800563c:	015b      	lsls	r3, r3, #5
 800563e:	429a      	cmp	r2, r3
 8005640:	d108      	bne.n	8005654 <HAL_UART_Transmit+0x94>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e003      	b.n	800565c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005658:	2300      	movs	r3, #0
 800565a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800565c:	e02f      	b.n	80056be <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	0013      	movs	r3, r2
 8005668:	2200      	movs	r2, #0
 800566a:	2180      	movs	r1, #128	@ 0x80
 800566c:	f000 fbee 	bl	8005e4c <UART_WaitOnFlagUntilTimeout>
 8005670:	1e03      	subs	r3, r0, #0
 8005672:	d004      	beq.n	800567e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e03b      	b.n	80056f6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	001a      	movs	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	05d2      	lsls	r2, r2, #23
 8005690:	0dd2      	lsrs	r2, r2, #23
 8005692:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	3302      	adds	r3, #2
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	e007      	b.n	80056ac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	781a      	ldrb	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3301      	adds	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2252      	movs	r2, #82	@ 0x52
 80056b0:	5a9b      	ldrh	r3, [r3, r2]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b299      	uxth	r1, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2252      	movs	r2, #82	@ 0x52
 80056bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2252      	movs	r2, #82	@ 0x52
 80056c2:	5a9b      	ldrh	r3, [r3, r2]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1c9      	bne.n	800565e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	0013      	movs	r3, r2
 80056d4:	2200      	movs	r2, #0
 80056d6:	2140      	movs	r1, #64	@ 0x40
 80056d8:	f000 fbb8 	bl	8005e4c <UART_WaitOnFlagUntilTimeout>
 80056dc:	1e03      	subs	r3, r0, #0
 80056de:	d004      	beq.n	80056ea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2220      	movs	r2, #32
 80056e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e005      	b.n	80056f6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	e000      	b.n	80056f6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80056f4:	2302      	movs	r3, #2
  }
}
 80056f6:	0018      	movs	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	b008      	add	sp, #32
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005700:	b5b0      	push	{r4, r5, r7, lr}
 8005702:	b08e      	sub	sp, #56	@ 0x38
 8005704:	af00      	add	r7, sp, #0
 8005706:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005708:	231a      	movs	r3, #26
 800570a:	2218      	movs	r2, #24
 800570c:	189b      	adds	r3, r3, r2
 800570e:	19db      	adds	r3, r3, r7
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	431a      	orrs	r2, r3
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	431a      	orrs	r2, r3
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	4313      	orrs	r3, r2
 800572a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4ab4      	ldr	r2, [pc, #720]	@ (8005a04 <UART_SetConfig+0x304>)
 8005734:	4013      	ands	r3, r2
 8005736:	0019      	movs	r1, r3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800573e:	430a      	orrs	r2, r1
 8005740:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	4aaf      	ldr	r2, [pc, #700]	@ (8005a08 <UART_SetConfig+0x308>)
 800574a:	4013      	ands	r3, r2
 800574c:	0019      	movs	r1, r3
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4aa9      	ldr	r2, [pc, #676]	@ (8005a0c <UART_SetConfig+0x30c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d004      	beq.n	8005774 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005770:	4313      	orrs	r3, r2
 8005772:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	4aa5      	ldr	r2, [pc, #660]	@ (8005a10 <UART_SetConfig+0x310>)
 800577c:	4013      	ands	r3, r2
 800577e:	0019      	movs	r1, r3
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005786:	430a      	orrs	r2, r1
 8005788:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4aa1      	ldr	r2, [pc, #644]	@ (8005a14 <UART_SetConfig+0x314>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d131      	bne.n	80057f8 <UART_SetConfig+0xf8>
 8005794:	4ba0      	ldr	r3, [pc, #640]	@ (8005a18 <UART_SetConfig+0x318>)
 8005796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005798:	220c      	movs	r2, #12
 800579a:	4013      	ands	r3, r2
 800579c:	2b0c      	cmp	r3, #12
 800579e:	d01d      	beq.n	80057dc <UART_SetConfig+0xdc>
 80057a0:	d823      	bhi.n	80057ea <UART_SetConfig+0xea>
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d00c      	beq.n	80057c0 <UART_SetConfig+0xc0>
 80057a6:	d820      	bhi.n	80057ea <UART_SetConfig+0xea>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <UART_SetConfig+0xb2>
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d00e      	beq.n	80057ce <UART_SetConfig+0xce>
 80057b0:	e01b      	b.n	80057ea <UART_SetConfig+0xea>
 80057b2:	231b      	movs	r3, #27
 80057b4:	2218      	movs	r2, #24
 80057b6:	189b      	adds	r3, r3, r2
 80057b8:	19db      	adds	r3, r3, r7
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e065      	b.n	800588c <UART_SetConfig+0x18c>
 80057c0:	231b      	movs	r3, #27
 80057c2:	2218      	movs	r2, #24
 80057c4:	189b      	adds	r3, r3, r2
 80057c6:	19db      	adds	r3, r3, r7
 80057c8:	2202      	movs	r2, #2
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	e05e      	b.n	800588c <UART_SetConfig+0x18c>
 80057ce:	231b      	movs	r3, #27
 80057d0:	2218      	movs	r2, #24
 80057d2:	189b      	adds	r3, r3, r2
 80057d4:	19db      	adds	r3, r3, r7
 80057d6:	2204      	movs	r2, #4
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	e057      	b.n	800588c <UART_SetConfig+0x18c>
 80057dc:	231b      	movs	r3, #27
 80057de:	2218      	movs	r2, #24
 80057e0:	189b      	adds	r3, r3, r2
 80057e2:	19db      	adds	r3, r3, r7
 80057e4:	2208      	movs	r2, #8
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	e050      	b.n	800588c <UART_SetConfig+0x18c>
 80057ea:	231b      	movs	r3, #27
 80057ec:	2218      	movs	r2, #24
 80057ee:	189b      	adds	r3, r3, r2
 80057f0:	19db      	adds	r3, r3, r7
 80057f2:	2210      	movs	r2, #16
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	e049      	b.n	800588c <UART_SetConfig+0x18c>
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a83      	ldr	r2, [pc, #524]	@ (8005a0c <UART_SetConfig+0x30c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d13e      	bne.n	8005880 <UART_SetConfig+0x180>
 8005802:	4b85      	ldr	r3, [pc, #532]	@ (8005a18 <UART_SetConfig+0x318>)
 8005804:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005806:	23c0      	movs	r3, #192	@ 0xc0
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	4013      	ands	r3, r2
 800580c:	22c0      	movs	r2, #192	@ 0xc0
 800580e:	0112      	lsls	r2, r2, #4
 8005810:	4293      	cmp	r3, r2
 8005812:	d027      	beq.n	8005864 <UART_SetConfig+0x164>
 8005814:	22c0      	movs	r2, #192	@ 0xc0
 8005816:	0112      	lsls	r2, r2, #4
 8005818:	4293      	cmp	r3, r2
 800581a:	d82a      	bhi.n	8005872 <UART_SetConfig+0x172>
 800581c:	2280      	movs	r2, #128	@ 0x80
 800581e:	0112      	lsls	r2, r2, #4
 8005820:	4293      	cmp	r3, r2
 8005822:	d011      	beq.n	8005848 <UART_SetConfig+0x148>
 8005824:	2280      	movs	r2, #128	@ 0x80
 8005826:	0112      	lsls	r2, r2, #4
 8005828:	4293      	cmp	r3, r2
 800582a:	d822      	bhi.n	8005872 <UART_SetConfig+0x172>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <UART_SetConfig+0x13a>
 8005830:	2280      	movs	r2, #128	@ 0x80
 8005832:	00d2      	lsls	r2, r2, #3
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <UART_SetConfig+0x156>
 8005838:	e01b      	b.n	8005872 <UART_SetConfig+0x172>
 800583a:	231b      	movs	r3, #27
 800583c:	2218      	movs	r2, #24
 800583e:	189b      	adds	r3, r3, r2
 8005840:	19db      	adds	r3, r3, r7
 8005842:	2200      	movs	r2, #0
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	e021      	b.n	800588c <UART_SetConfig+0x18c>
 8005848:	231b      	movs	r3, #27
 800584a:	2218      	movs	r2, #24
 800584c:	189b      	adds	r3, r3, r2
 800584e:	19db      	adds	r3, r3, r7
 8005850:	2202      	movs	r2, #2
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	e01a      	b.n	800588c <UART_SetConfig+0x18c>
 8005856:	231b      	movs	r3, #27
 8005858:	2218      	movs	r2, #24
 800585a:	189b      	adds	r3, r3, r2
 800585c:	19db      	adds	r3, r3, r7
 800585e:	2204      	movs	r2, #4
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	e013      	b.n	800588c <UART_SetConfig+0x18c>
 8005864:	231b      	movs	r3, #27
 8005866:	2218      	movs	r2, #24
 8005868:	189b      	adds	r3, r3, r2
 800586a:	19db      	adds	r3, r3, r7
 800586c:	2208      	movs	r2, #8
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	e00c      	b.n	800588c <UART_SetConfig+0x18c>
 8005872:	231b      	movs	r3, #27
 8005874:	2218      	movs	r2, #24
 8005876:	189b      	adds	r3, r3, r2
 8005878:	19db      	adds	r3, r3, r7
 800587a:	2210      	movs	r2, #16
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	e005      	b.n	800588c <UART_SetConfig+0x18c>
 8005880:	231b      	movs	r3, #27
 8005882:	2218      	movs	r2, #24
 8005884:	189b      	adds	r3, r3, r2
 8005886:	19db      	adds	r3, r3, r7
 8005888:	2210      	movs	r2, #16
 800588a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a5e      	ldr	r2, [pc, #376]	@ (8005a0c <UART_SetConfig+0x30c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d000      	beq.n	8005898 <UART_SetConfig+0x198>
 8005896:	e084      	b.n	80059a2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005898:	231b      	movs	r3, #27
 800589a:	2218      	movs	r2, #24
 800589c:	189b      	adds	r3, r3, r2
 800589e:	19db      	adds	r3, r3, r7
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d01d      	beq.n	80058e2 <UART_SetConfig+0x1e2>
 80058a6:	dc20      	bgt.n	80058ea <UART_SetConfig+0x1ea>
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d015      	beq.n	80058d8 <UART_SetConfig+0x1d8>
 80058ac:	dc1d      	bgt.n	80058ea <UART_SetConfig+0x1ea>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <UART_SetConfig+0x1b8>
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d005      	beq.n	80058c2 <UART_SetConfig+0x1c2>
 80058b6:	e018      	b.n	80058ea <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b8:	f7fe f8c4 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 80058bc:	0003      	movs	r3, r0
 80058be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80058c0:	e01c      	b.n	80058fc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058c2:	4b55      	ldr	r3, [pc, #340]	@ (8005a18 <UART_SetConfig+0x318>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2210      	movs	r2, #16
 80058c8:	4013      	ands	r3, r2
 80058ca:	d002      	beq.n	80058d2 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80058cc:	4b53      	ldr	r3, [pc, #332]	@ (8005a1c <UART_SetConfig+0x31c>)
 80058ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058d0:	e014      	b.n	80058fc <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80058d2:	4b53      	ldr	r3, [pc, #332]	@ (8005a20 <UART_SetConfig+0x320>)
 80058d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80058d6:	e011      	b.n	80058fc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d8:	f7fe f804 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 80058dc:	0003      	movs	r3, r0
 80058de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80058e0:	e00c      	b.n	80058fc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058e2:	2380      	movs	r3, #128	@ 0x80
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80058e8:	e008      	b.n	80058fc <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80058ee:	231a      	movs	r3, #26
 80058f0:	2218      	movs	r2, #24
 80058f2:	189b      	adds	r3, r3, r2
 80058f4:	19db      	adds	r3, r3, r7
 80058f6:	2201      	movs	r2, #1
 80058f8:	701a      	strb	r2, [r3, #0]
        break;
 80058fa:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d100      	bne.n	8005904 <UART_SetConfig+0x204>
 8005902:	e12f      	b.n	8005b64 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	0013      	movs	r3, r2
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	189b      	adds	r3, r3, r2
 800590e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005910:	429a      	cmp	r2, r3
 8005912:	d305      	bcc.n	8005920 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800591a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800591c:	429a      	cmp	r2, r3
 800591e:	d906      	bls.n	800592e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8005920:	231a      	movs	r3, #26
 8005922:	2218      	movs	r2, #24
 8005924:	189b      	adds	r3, r3, r2
 8005926:	19db      	adds	r3, r3, r7
 8005928:	2201      	movs	r2, #1
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	e11a      	b.n	8005b64 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800592e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	6939      	ldr	r1, [r7, #16]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	000b      	movs	r3, r1
 800593c:	0e1b      	lsrs	r3, r3, #24
 800593e:	0010      	movs	r0, r2
 8005940:	0205      	lsls	r5, r0, #8
 8005942:	431d      	orrs	r5, r3
 8005944:	000b      	movs	r3, r1
 8005946:	021c      	lsls	r4, r3, #8
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	60bb      	str	r3, [r7, #8]
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	68b8      	ldr	r0, [r7, #8]
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	1900      	adds	r0, r0, r4
 800595a:	4169      	adcs	r1, r5
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	603b      	str	r3, [r7, #0]
 8005962:	2300      	movs	r3, #0
 8005964:	607b      	str	r3, [r7, #4]
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f7fa fc6b 	bl	8000244 <__aeabi_uldivmod>
 800596e:	0002      	movs	r2, r0
 8005970:	000b      	movs	r3, r1
 8005972:	0013      	movs	r3, r2
 8005974:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005978:	23c0      	movs	r3, #192	@ 0xc0
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	429a      	cmp	r2, r3
 800597e:	d309      	bcc.n	8005994 <UART_SetConfig+0x294>
 8005980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005982:	2380      	movs	r3, #128	@ 0x80
 8005984:	035b      	lsls	r3, r3, #13
 8005986:	429a      	cmp	r2, r3
 8005988:	d204      	bcs.n	8005994 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005990:	60da      	str	r2, [r3, #12]
 8005992:	e0e7      	b.n	8005b64 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8005994:	231a      	movs	r3, #26
 8005996:	2218      	movs	r2, #24
 8005998:	189b      	adds	r3, r3, r2
 800599a:	19db      	adds	r3, r3, r7
 800599c:	2201      	movs	r2, #1
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	e0e0      	b.n	8005b64 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	69da      	ldr	r2, [r3, #28]
 80059a6:	2380      	movs	r3, #128	@ 0x80
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d000      	beq.n	80059b0 <UART_SetConfig+0x2b0>
 80059ae:	e082      	b.n	8005ab6 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80059b0:	231b      	movs	r3, #27
 80059b2:	2218      	movs	r2, #24
 80059b4:	189b      	adds	r3, r3, r2
 80059b6:	19db      	adds	r3, r3, r7
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d834      	bhi.n	8005a28 <UART_SetConfig+0x328>
 80059be:	009a      	lsls	r2, r3, #2
 80059c0:	4b18      	ldr	r3, [pc, #96]	@ (8005a24 <UART_SetConfig+0x324>)
 80059c2:	18d3      	adds	r3, r2, r3
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c8:	f7fe f83c 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 80059cc:	0003      	movs	r3, r0
 80059ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80059d0:	e033      	b.n	8005a3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059d2:	f7fe f84d 	bl	8003a70 <HAL_RCC_GetPCLK2Freq>
 80059d6:	0003      	movs	r3, r0
 80059d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80059da:	e02e      	b.n	8005a3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005a18 <UART_SetConfig+0x318>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2210      	movs	r2, #16
 80059e2:	4013      	ands	r3, r2
 80059e4:	d002      	beq.n	80059ec <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80059e6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a1c <UART_SetConfig+0x31c>)
 80059e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059ea:	e026      	b.n	8005a3a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80059ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005a20 <UART_SetConfig+0x320>)
 80059ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80059f0:	e023      	b.n	8005a3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059f2:	f7fd ff77 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 80059f6:	0003      	movs	r3, r0
 80059f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80059fa:	e01e      	b.n	8005a3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059fc:	2380      	movs	r3, #128	@ 0x80
 80059fe:	021b      	lsls	r3, r3, #8
 8005a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a02:	e01a      	b.n	8005a3a <UART_SetConfig+0x33a>
 8005a04:	efff69f3 	.word	0xefff69f3
 8005a08:	ffffcfff 	.word	0xffffcfff
 8005a0c:	40004800 	.word	0x40004800
 8005a10:	fffff4ff 	.word	0xfffff4ff
 8005a14:	40004400 	.word	0x40004400
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	003d0900 	.word	0x003d0900
 8005a20:	00f42400 	.word	0x00f42400
 8005a24:	08006a2c 	.word	0x08006a2c
      default:
        pclk = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005a2c:	231a      	movs	r3, #26
 8005a2e:	2218      	movs	r2, #24
 8005a30:	189b      	adds	r3, r3, r2
 8005a32:	19db      	adds	r3, r3, r7
 8005a34:	2201      	movs	r2, #1
 8005a36:	701a      	strb	r2, [r3, #0]
        break;
 8005a38:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d100      	bne.n	8005a42 <UART_SetConfig+0x342>
 8005a40:	e090      	b.n	8005b64 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a44:	005a      	lsls	r2, r3, #1
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	085b      	lsrs	r3, r3, #1
 8005a4c:	18d2      	adds	r2, r2, r3
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	0019      	movs	r1, r3
 8005a54:	0010      	movs	r0, r2
 8005a56:	f7fa fb69 	bl	800012c <__udivsi3>
 8005a5a:	0003      	movs	r3, r0
 8005a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a60:	2b0f      	cmp	r3, #15
 8005a62:	d921      	bls.n	8005aa8 <UART_SetConfig+0x3a8>
 8005a64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a66:	2380      	movs	r3, #128	@ 0x80
 8005a68:	025b      	lsls	r3, r3, #9
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d21c      	bcs.n	8005aa8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	200e      	movs	r0, #14
 8005a74:	2418      	movs	r4, #24
 8005a76:	1903      	adds	r3, r0, r4
 8005a78:	19db      	adds	r3, r3, r7
 8005a7a:	210f      	movs	r1, #15
 8005a7c:	438a      	bics	r2, r1
 8005a7e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a82:	085b      	lsrs	r3, r3, #1
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2207      	movs	r2, #7
 8005a88:	4013      	ands	r3, r2
 8005a8a:	b299      	uxth	r1, r3
 8005a8c:	1903      	adds	r3, r0, r4
 8005a8e:	19db      	adds	r3, r3, r7
 8005a90:	1902      	adds	r2, r0, r4
 8005a92:	19d2      	adds	r2, r2, r7
 8005a94:	8812      	ldrh	r2, [r2, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	1902      	adds	r2, r0, r4
 8005aa0:	19d2      	adds	r2, r2, r7
 8005aa2:	8812      	ldrh	r2, [r2, #0]
 8005aa4:	60da      	str	r2, [r3, #12]
 8005aa6:	e05d      	b.n	8005b64 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005aa8:	231a      	movs	r3, #26
 8005aaa:	2218      	movs	r2, #24
 8005aac:	189b      	adds	r3, r3, r2
 8005aae:	19db      	adds	r3, r3, r7
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	e056      	b.n	8005b64 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ab6:	231b      	movs	r3, #27
 8005ab8:	2218      	movs	r2, #24
 8005aba:	189b      	adds	r3, r3, r2
 8005abc:	19db      	adds	r3, r3, r7
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d822      	bhi.n	8005b0a <UART_SetConfig+0x40a>
 8005ac4:	009a      	lsls	r2, r3, #2
 8005ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8005b84 <UART_SetConfig+0x484>)
 8005ac8:	18d3      	adds	r3, r2, r3
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ace:	f7fd ffb9 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8005ad2:	0003      	movs	r3, r0
 8005ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005ad6:	e021      	b.n	8005b1c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad8:	f7fd ffca 	bl	8003a70 <HAL_RCC_GetPCLK2Freq>
 8005adc:	0003      	movs	r3, r0
 8005ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005ae0:	e01c      	b.n	8005b1c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ae2:	4b29      	ldr	r3, [pc, #164]	@ (8005b88 <UART_SetConfig+0x488>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2210      	movs	r2, #16
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d002      	beq.n	8005af2 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005aec:	4b27      	ldr	r3, [pc, #156]	@ (8005b8c <UART_SetConfig+0x48c>)
 8005aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005af0:	e014      	b.n	8005b1c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8005af2:	4b27      	ldr	r3, [pc, #156]	@ (8005b90 <UART_SetConfig+0x490>)
 8005af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005af6:	e011      	b.n	8005b1c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005af8:	f7fd fef4 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8005afc:	0003      	movs	r3, r0
 8005afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b00:	e00c      	b.n	8005b1c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b02:	2380      	movs	r3, #128	@ 0x80
 8005b04:	021b      	lsls	r3, r3, #8
 8005b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b08:	e008      	b.n	8005b1c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005b0e:	231a      	movs	r3, #26
 8005b10:	2218      	movs	r2, #24
 8005b12:	189b      	adds	r3, r3, r2
 8005b14:	19db      	adds	r3, r3, r7
 8005b16:	2201      	movs	r2, #1
 8005b18:	701a      	strb	r2, [r3, #0]
        break;
 8005b1a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d020      	beq.n	8005b64 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	085a      	lsrs	r2, r3, #1
 8005b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2a:	18d2      	adds	r2, r2, r3
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	0019      	movs	r1, r3
 8005b32:	0010      	movs	r0, r2
 8005b34:	f7fa fafa 	bl	800012c <__udivsi3>
 8005b38:	0003      	movs	r3, r0
 8005b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3e:	2b0f      	cmp	r3, #15
 8005b40:	d90a      	bls.n	8005b58 <UART_SetConfig+0x458>
 8005b42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b44:	2380      	movs	r3, #128	@ 0x80
 8005b46:	025b      	lsls	r3, r3, #9
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d205      	bcs.n	8005b58 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	60da      	str	r2, [r3, #12]
 8005b56:	e005      	b.n	8005b64 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005b58:	231a      	movs	r3, #26
 8005b5a:	2218      	movs	r2, #24
 8005b5c:	189b      	adds	r3, r3, r2
 8005b5e:	19db      	adds	r3, r3, r7
 8005b60:	2201      	movs	r2, #1
 8005b62:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	2200      	movs	r2, #0
 8005b68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005b70:	231a      	movs	r3, #26
 8005b72:	2218      	movs	r2, #24
 8005b74:	189b      	adds	r3, r3, r2
 8005b76:	19db      	adds	r3, r3, r7
 8005b78:	781b      	ldrb	r3, [r3, #0]
}
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	b00e      	add	sp, #56	@ 0x38
 8005b80:	bdb0      	pop	{r4, r5, r7, pc}
 8005b82:	46c0      	nop			@ (mov r8, r8)
 8005b84:	08006a50 	.word	0x08006a50
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	003d0900 	.word	0x003d0900
 8005b90:	00f42400 	.word	0x00f42400

08005b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d00b      	beq.n	8005bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	4a4a      	ldr	r2, [pc, #296]	@ (8005cd8 <UART_AdvFeatureConfig+0x144>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	0019      	movs	r1, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d00b      	beq.n	8005be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	4a43      	ldr	r2, [pc, #268]	@ (8005cdc <UART_AdvFeatureConfig+0x148>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	0019      	movs	r1, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be4:	2204      	movs	r2, #4
 8005be6:	4013      	ands	r3, r2
 8005be8:	d00b      	beq.n	8005c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4a3b      	ldr	r2, [pc, #236]	@ (8005ce0 <UART_AdvFeatureConfig+0x14c>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	0019      	movs	r1, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	2208      	movs	r2, #8
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4a34      	ldr	r2, [pc, #208]	@ (8005ce4 <UART_AdvFeatureConfig+0x150>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	0019      	movs	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c28:	2210      	movs	r2, #16
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d00b      	beq.n	8005c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce8 <UART_AdvFeatureConfig+0x154>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	0019      	movs	r1, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	d00b      	beq.n	8005c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	4a25      	ldr	r2, [pc, #148]	@ (8005cec <UART_AdvFeatureConfig+0x158>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	0019      	movs	r1, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6c:	2240      	movs	r2, #64	@ 0x40
 8005c6e:	4013      	ands	r3, r2
 8005c70:	d01d      	beq.n	8005cae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf0 <UART_AdvFeatureConfig+0x15c>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	0019      	movs	r1, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c8e:	2380      	movs	r3, #128	@ 0x80
 8005c90:	035b      	lsls	r3, r3, #13
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d10b      	bne.n	8005cae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	4a15      	ldr	r2, [pc, #84]	@ (8005cf4 <UART_AdvFeatureConfig+0x160>)
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	0019      	movs	r1, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb2:	2280      	movs	r2, #128	@ 0x80
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	d00b      	beq.n	8005cd0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8005cf8 <UART_AdvFeatureConfig+0x164>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	0019      	movs	r1, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	605a      	str	r2, [r3, #4]
  }
}
 8005cd0:	46c0      	nop			@ (mov r8, r8)
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b002      	add	sp, #8
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	fffdffff 	.word	0xfffdffff
 8005cdc:	fffeffff 	.word	0xfffeffff
 8005ce0:	fffbffff 	.word	0xfffbffff
 8005ce4:	ffff7fff 	.word	0xffff7fff
 8005ce8:	ffffefff 	.word	0xffffefff
 8005cec:	ffffdfff 	.word	0xffffdfff
 8005cf0:	ffefffff 	.word	0xffefffff
 8005cf4:	ff9fffff 	.word	0xff9fffff
 8005cf8:	fff7ffff 	.word	0xfff7ffff

08005cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b092      	sub	sp, #72	@ 0x48
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2284      	movs	r2, #132	@ 0x84
 8005d08:	2100      	movs	r1, #0
 8005d0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d0c:	f7fb fe62 	bl	80019d4 <HAL_GetTick>
 8005d10:	0003      	movs	r3, r0
 8005d12:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d12c      	bne.n	8005d7c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d24:	2280      	movs	r2, #128	@ 0x80
 8005d26:	0391      	lsls	r1, r2, #14
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	4a46      	ldr	r2, [pc, #280]	@ (8005e44 <UART_CheckIdleState+0x148>)
 8005d2c:	9200      	str	r2, [sp, #0]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f000 f88c 	bl	8005e4c <UART_WaitOnFlagUntilTimeout>
 8005d34:	1e03      	subs	r3, r0, #0
 8005d36:	d021      	beq.n	8005d7c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d38:	f3ef 8310 	mrs	r3, PRIMASK
 8005d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d42:	2301      	movs	r3, #1
 8005d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d48:	f383 8810 	msr	PRIMASK, r3
}
 8005d4c:	46c0      	nop			@ (mov r8, r8)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2180      	movs	r1, #128	@ 0x80
 8005d5a:	438a      	bics	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d64:	f383 8810 	msr	PRIMASK, r3
}
 8005d68:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2278      	movs	r2, #120	@ 0x78
 8005d74:	2100      	movs	r1, #0
 8005d76:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e05f      	b.n	8005e3c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2204      	movs	r2, #4
 8005d84:	4013      	ands	r3, r2
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d146      	bne.n	8005e18 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d8c:	2280      	movs	r2, #128	@ 0x80
 8005d8e:	03d1      	lsls	r1, r2, #15
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4a2c      	ldr	r2, [pc, #176]	@ (8005e44 <UART_CheckIdleState+0x148>)
 8005d94:	9200      	str	r2, [sp, #0]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f000 f858 	bl	8005e4c <UART_WaitOnFlagUntilTimeout>
 8005d9c:	1e03      	subs	r3, r0, #0
 8005d9e:	d03b      	beq.n	8005e18 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da0:	f3ef 8310 	mrs	r3, PRIMASK
 8005da4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005da6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005daa:	2301      	movs	r3, #1
 8005dac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f383 8810 	msr	PRIMASK, r3
}
 8005db4:	46c0      	nop			@ (mov r8, r8)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4921      	ldr	r1, [pc, #132]	@ (8005e48 <UART_CheckIdleState+0x14c>)
 8005dc2:	400a      	ands	r2, r1
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f383 8810 	msr	PRIMASK, r3
}
 8005dd0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8005dd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8005dd8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dda:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ddc:	2301      	movs	r3, #1
 8005dde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f383 8810 	msr	PRIMASK, r3
}
 8005de6:	46c0      	nop			@ (mov r8, r8)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2101      	movs	r1, #1
 8005df4:	438a      	bics	r2, r1
 8005df6:	609a      	str	r2, [r3, #8]
 8005df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	f383 8810 	msr	PRIMASK, r3
}
 8005e02:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2280      	movs	r2, #128	@ 0x80
 8005e08:	2120      	movs	r1, #32
 8005e0a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2278      	movs	r2, #120	@ 0x78
 8005e10:	2100      	movs	r1, #0
 8005e12:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e011      	b.n	8005e3c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2280      	movs	r2, #128	@ 0x80
 8005e22:	2120      	movs	r1, #32
 8005e24:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2278      	movs	r2, #120	@ 0x78
 8005e36:	2100      	movs	r1, #0
 8005e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b010      	add	sp, #64	@ 0x40
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	01ffffff 	.word	0x01ffffff
 8005e48:	fffffedf 	.word	0xfffffedf

08005e4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	1dfb      	adds	r3, r7, #7
 8005e5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e5c:	e04b      	b.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	3301      	adds	r3, #1
 8005e62:	d048      	beq.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e64:	f7fb fdb6 	bl	80019d4 <HAL_GetTick>
 8005e68:	0002      	movs	r2, r0
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d302      	bcc.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e04b      	b.n	8005f16 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2204      	movs	r2, #4
 8005e86:	4013      	ands	r3, r2
 8005e88:	d035      	beq.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	2208      	movs	r2, #8
 8005e92:	4013      	ands	r3, r2
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d111      	bne.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f000 f83c 	bl	8005f20 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2284      	movs	r2, #132	@ 0x84
 8005eac:	2108      	movs	r1, #8
 8005eae:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2278      	movs	r2, #120	@ 0x78
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e02c      	b.n	8005f16 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69da      	ldr	r2, [r3, #28]
 8005ec2:	2380      	movs	r3, #128	@ 0x80
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	401a      	ands	r2, r3
 8005ec8:	2380      	movs	r3, #128	@ 0x80
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d112      	bne.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2280      	movs	r2, #128	@ 0x80
 8005ed6:	0112      	lsls	r2, r2, #4
 8005ed8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	0018      	movs	r0, r3
 8005ede:	f000 f81f 	bl	8005f20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2284      	movs	r2, #132	@ 0x84
 8005ee6:	2120      	movs	r1, #32
 8005ee8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2278      	movs	r2, #120	@ 0x78
 8005eee:	2100      	movs	r1, #0
 8005ef0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e00f      	b.n	8005f16 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	4013      	ands	r3, r2
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	425a      	negs	r2, r3
 8005f06:	4153      	adcs	r3, r2
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	001a      	movs	r2, r3
 8005f0c:	1dfb      	adds	r3, r7, #7
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d0a4      	beq.n	8005e5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	0018      	movs	r0, r3
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	b004      	add	sp, #16
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08e      	sub	sp, #56	@ 0x38
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f28:	f3ef 8310 	mrs	r3, PRIMASK
 8005f2c:	617b      	str	r3, [r7, #20]
  return(result);
 8005f2e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f32:	2301      	movs	r3, #1
 8005f34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	f383 8810 	msr	PRIMASK, r3
}
 8005f3c:	46c0      	nop			@ (mov r8, r8)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4926      	ldr	r1, [pc, #152]	@ (8005fe4 <UART_EndRxTransfer+0xc4>)
 8005f4a:	400a      	ands	r2, r1
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f383 8810 	msr	PRIMASK, r3
}
 8005f58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f5e:	623b      	str	r3, [r7, #32]
  return(result);
 8005f60:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f62:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f64:	2301      	movs	r3, #1
 8005f66:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	f383 8810 	msr	PRIMASK, r3
}
 8005f6e:	46c0      	nop			@ (mov r8, r8)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	438a      	bics	r2, r1
 8005f7e:	609a      	str	r2, [r3, #8]
 8005f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f82:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f86:	f383 8810 	msr	PRIMASK, r3
}
 8005f8a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d118      	bne.n	8005fc6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f94:	f3ef 8310 	mrs	r3, PRIMASK
 8005f98:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f9a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f383 8810 	msr	PRIMASK, r3
}
 8005fa8:	46c0      	nop			@ (mov r8, r8)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2110      	movs	r1, #16
 8005fb6:	438a      	bics	r2, r1
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f383 8810 	msr	PRIMASK, r3
}
 8005fc4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2280      	movs	r2, #128	@ 0x80
 8005fca:	2120      	movs	r1, #32
 8005fcc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005fda:	46c0      	nop			@ (mov r8, r8)
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	b00e      	add	sp, #56	@ 0x38
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	46c0      	nop			@ (mov r8, r8)
 8005fe4:	fffffedf 	.word	0xfffffedf

08005fe8 <siprintf>:
 8005fe8:	b40e      	push	{r1, r2, r3}
 8005fea:	b500      	push	{lr}
 8005fec:	490b      	ldr	r1, [pc, #44]	@ (800601c <siprintf+0x34>)
 8005fee:	b09c      	sub	sp, #112	@ 0x70
 8005ff0:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ff2:	9002      	str	r0, [sp, #8]
 8005ff4:	9006      	str	r0, [sp, #24]
 8005ff6:	9107      	str	r1, [sp, #28]
 8005ff8:	9104      	str	r1, [sp, #16]
 8005ffa:	4809      	ldr	r0, [pc, #36]	@ (8006020 <siprintf+0x38>)
 8005ffc:	4909      	ldr	r1, [pc, #36]	@ (8006024 <siprintf+0x3c>)
 8005ffe:	cb04      	ldmia	r3!, {r2}
 8006000:	9105      	str	r1, [sp, #20]
 8006002:	6800      	ldr	r0, [r0, #0]
 8006004:	a902      	add	r1, sp, #8
 8006006:	9301      	str	r3, [sp, #4]
 8006008:	f000 f99e 	bl	8006348 <_svfiprintf_r>
 800600c:	2200      	movs	r2, #0
 800600e:	9b02      	ldr	r3, [sp, #8]
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	b01c      	add	sp, #112	@ 0x70
 8006014:	bc08      	pop	{r3}
 8006016:	b003      	add	sp, #12
 8006018:	4718      	bx	r3
 800601a:	46c0      	nop			@ (mov r8, r8)
 800601c:	7fffffff 	.word	0x7fffffff
 8006020:	20000018 	.word	0x20000018
 8006024:	ffff0208 	.word	0xffff0208

08006028 <memset>:
 8006028:	0003      	movs	r3, r0
 800602a:	1882      	adds	r2, r0, r2
 800602c:	4293      	cmp	r3, r2
 800602e:	d100      	bne.n	8006032 <memset+0xa>
 8006030:	4770      	bx	lr
 8006032:	7019      	strb	r1, [r3, #0]
 8006034:	3301      	adds	r3, #1
 8006036:	e7f9      	b.n	800602c <memset+0x4>

08006038 <__errno>:
 8006038:	4b01      	ldr	r3, [pc, #4]	@ (8006040 <__errno+0x8>)
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	4770      	bx	lr
 800603e:	46c0      	nop			@ (mov r8, r8)
 8006040:	20000018 	.word	0x20000018

08006044 <__libc_init_array>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	2600      	movs	r6, #0
 8006048:	4c0c      	ldr	r4, [pc, #48]	@ (800607c <__libc_init_array+0x38>)
 800604a:	4d0d      	ldr	r5, [pc, #52]	@ (8006080 <__libc_init_array+0x3c>)
 800604c:	1b64      	subs	r4, r4, r5
 800604e:	10a4      	asrs	r4, r4, #2
 8006050:	42a6      	cmp	r6, r4
 8006052:	d109      	bne.n	8006068 <__libc_init_array+0x24>
 8006054:	2600      	movs	r6, #0
 8006056:	f000 fc65 	bl	8006924 <_init>
 800605a:	4c0a      	ldr	r4, [pc, #40]	@ (8006084 <__libc_init_array+0x40>)
 800605c:	4d0a      	ldr	r5, [pc, #40]	@ (8006088 <__libc_init_array+0x44>)
 800605e:	1b64      	subs	r4, r4, r5
 8006060:	10a4      	asrs	r4, r4, #2
 8006062:	42a6      	cmp	r6, r4
 8006064:	d105      	bne.n	8006072 <__libc_init_array+0x2e>
 8006066:	bd70      	pop	{r4, r5, r6, pc}
 8006068:	00b3      	lsls	r3, r6, #2
 800606a:	58eb      	ldr	r3, [r5, r3]
 800606c:	4798      	blx	r3
 800606e:	3601      	adds	r6, #1
 8006070:	e7ee      	b.n	8006050 <__libc_init_array+0xc>
 8006072:	00b3      	lsls	r3, r6, #2
 8006074:	58eb      	ldr	r3, [r5, r3]
 8006076:	4798      	blx	r3
 8006078:	3601      	adds	r6, #1
 800607a:	e7f2      	b.n	8006062 <__libc_init_array+0x1e>
 800607c:	08006ab0 	.word	0x08006ab0
 8006080:	08006ab0 	.word	0x08006ab0
 8006084:	08006ab4 	.word	0x08006ab4
 8006088:	08006ab0 	.word	0x08006ab0

0800608c <__retarget_lock_acquire_recursive>:
 800608c:	4770      	bx	lr

0800608e <__retarget_lock_release_recursive>:
 800608e:	4770      	bx	lr

08006090 <_free_r>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	0005      	movs	r5, r0
 8006094:	1e0c      	subs	r4, r1, #0
 8006096:	d010      	beq.n	80060ba <_free_r+0x2a>
 8006098:	3c04      	subs	r4, #4
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	da00      	bge.n	80060a2 <_free_r+0x12>
 80060a0:	18e4      	adds	r4, r4, r3
 80060a2:	0028      	movs	r0, r5
 80060a4:	f000 f8e0 	bl	8006268 <__malloc_lock>
 80060a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006120 <_free_r+0x90>)
 80060aa:	6813      	ldr	r3, [r2, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d105      	bne.n	80060bc <_free_r+0x2c>
 80060b0:	6063      	str	r3, [r4, #4]
 80060b2:	6014      	str	r4, [r2, #0]
 80060b4:	0028      	movs	r0, r5
 80060b6:	f000 f8df 	bl	8006278 <__malloc_unlock>
 80060ba:	bd70      	pop	{r4, r5, r6, pc}
 80060bc:	42a3      	cmp	r3, r4
 80060be:	d908      	bls.n	80060d2 <_free_r+0x42>
 80060c0:	6820      	ldr	r0, [r4, #0]
 80060c2:	1821      	adds	r1, r4, r0
 80060c4:	428b      	cmp	r3, r1
 80060c6:	d1f3      	bne.n	80060b0 <_free_r+0x20>
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	1809      	adds	r1, r1, r0
 80060ce:	6021      	str	r1, [r4, #0]
 80060d0:	e7ee      	b.n	80060b0 <_free_r+0x20>
 80060d2:	001a      	movs	r2, r3
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <_free_r+0x4e>
 80060da:	42a3      	cmp	r3, r4
 80060dc:	d9f9      	bls.n	80060d2 <_free_r+0x42>
 80060de:	6811      	ldr	r1, [r2, #0]
 80060e0:	1850      	adds	r0, r2, r1
 80060e2:	42a0      	cmp	r0, r4
 80060e4:	d10b      	bne.n	80060fe <_free_r+0x6e>
 80060e6:	6820      	ldr	r0, [r4, #0]
 80060e8:	1809      	adds	r1, r1, r0
 80060ea:	1850      	adds	r0, r2, r1
 80060ec:	6011      	str	r1, [r2, #0]
 80060ee:	4283      	cmp	r3, r0
 80060f0:	d1e0      	bne.n	80060b4 <_free_r+0x24>
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	1841      	adds	r1, r0, r1
 80060f8:	6011      	str	r1, [r2, #0]
 80060fa:	6053      	str	r3, [r2, #4]
 80060fc:	e7da      	b.n	80060b4 <_free_r+0x24>
 80060fe:	42a0      	cmp	r0, r4
 8006100:	d902      	bls.n	8006108 <_free_r+0x78>
 8006102:	230c      	movs	r3, #12
 8006104:	602b      	str	r3, [r5, #0]
 8006106:	e7d5      	b.n	80060b4 <_free_r+0x24>
 8006108:	6820      	ldr	r0, [r4, #0]
 800610a:	1821      	adds	r1, r4, r0
 800610c:	428b      	cmp	r3, r1
 800610e:	d103      	bne.n	8006118 <_free_r+0x88>
 8006110:	6819      	ldr	r1, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	1809      	adds	r1, r1, r0
 8006116:	6021      	str	r1, [r4, #0]
 8006118:	6063      	str	r3, [r4, #4]
 800611a:	6054      	str	r4, [r2, #4]
 800611c:	e7ca      	b.n	80060b4 <_free_r+0x24>
 800611e:	46c0      	nop			@ (mov r8, r8)
 8006120:	200003c4 	.word	0x200003c4

08006124 <sbrk_aligned>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	4e0f      	ldr	r6, [pc, #60]	@ (8006164 <sbrk_aligned+0x40>)
 8006128:	000d      	movs	r5, r1
 800612a:	6831      	ldr	r1, [r6, #0]
 800612c:	0004      	movs	r4, r0
 800612e:	2900      	cmp	r1, #0
 8006130:	d102      	bne.n	8006138 <sbrk_aligned+0x14>
 8006132:	f000 fb99 	bl	8006868 <_sbrk_r>
 8006136:	6030      	str	r0, [r6, #0]
 8006138:	0029      	movs	r1, r5
 800613a:	0020      	movs	r0, r4
 800613c:	f000 fb94 	bl	8006868 <_sbrk_r>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d103      	bne.n	800614c <sbrk_aligned+0x28>
 8006144:	2501      	movs	r5, #1
 8006146:	426d      	negs	r5, r5
 8006148:	0028      	movs	r0, r5
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	2303      	movs	r3, #3
 800614e:	1cc5      	adds	r5, r0, #3
 8006150:	439d      	bics	r5, r3
 8006152:	42a8      	cmp	r0, r5
 8006154:	d0f8      	beq.n	8006148 <sbrk_aligned+0x24>
 8006156:	1a29      	subs	r1, r5, r0
 8006158:	0020      	movs	r0, r4
 800615a:	f000 fb85 	bl	8006868 <_sbrk_r>
 800615e:	3001      	adds	r0, #1
 8006160:	d1f2      	bne.n	8006148 <sbrk_aligned+0x24>
 8006162:	e7ef      	b.n	8006144 <sbrk_aligned+0x20>
 8006164:	200003c0 	.word	0x200003c0

08006168 <_malloc_r>:
 8006168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800616a:	2203      	movs	r2, #3
 800616c:	1ccb      	adds	r3, r1, #3
 800616e:	4393      	bics	r3, r2
 8006170:	3308      	adds	r3, #8
 8006172:	0005      	movs	r5, r0
 8006174:	001f      	movs	r7, r3
 8006176:	2b0c      	cmp	r3, #12
 8006178:	d234      	bcs.n	80061e4 <_malloc_r+0x7c>
 800617a:	270c      	movs	r7, #12
 800617c:	42b9      	cmp	r1, r7
 800617e:	d833      	bhi.n	80061e8 <_malloc_r+0x80>
 8006180:	0028      	movs	r0, r5
 8006182:	f000 f871 	bl	8006268 <__malloc_lock>
 8006186:	4e37      	ldr	r6, [pc, #220]	@ (8006264 <_malloc_r+0xfc>)
 8006188:	6833      	ldr	r3, [r6, #0]
 800618a:	001c      	movs	r4, r3
 800618c:	2c00      	cmp	r4, #0
 800618e:	d12f      	bne.n	80061f0 <_malloc_r+0x88>
 8006190:	0039      	movs	r1, r7
 8006192:	0028      	movs	r0, r5
 8006194:	f7ff ffc6 	bl	8006124 <sbrk_aligned>
 8006198:	0004      	movs	r4, r0
 800619a:	1c43      	adds	r3, r0, #1
 800619c:	d15f      	bne.n	800625e <_malloc_r+0xf6>
 800619e:	6834      	ldr	r4, [r6, #0]
 80061a0:	9400      	str	r4, [sp, #0]
 80061a2:	9b00      	ldr	r3, [sp, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d14a      	bne.n	800623e <_malloc_r+0xd6>
 80061a8:	2c00      	cmp	r4, #0
 80061aa:	d052      	beq.n	8006252 <_malloc_r+0xea>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	0028      	movs	r0, r5
 80061b0:	18e3      	adds	r3, r4, r3
 80061b2:	9900      	ldr	r1, [sp, #0]
 80061b4:	9301      	str	r3, [sp, #4]
 80061b6:	f000 fb57 	bl	8006868 <_sbrk_r>
 80061ba:	9b01      	ldr	r3, [sp, #4]
 80061bc:	4283      	cmp	r3, r0
 80061be:	d148      	bne.n	8006252 <_malloc_r+0xea>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	0028      	movs	r0, r5
 80061c4:	1aff      	subs	r7, r7, r3
 80061c6:	0039      	movs	r1, r7
 80061c8:	f7ff ffac 	bl	8006124 <sbrk_aligned>
 80061cc:	3001      	adds	r0, #1
 80061ce:	d040      	beq.n	8006252 <_malloc_r+0xea>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	19db      	adds	r3, r3, r7
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	6833      	ldr	r3, [r6, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	2a00      	cmp	r2, #0
 80061dc:	d133      	bne.n	8006246 <_malloc_r+0xde>
 80061de:	9b00      	ldr	r3, [sp, #0]
 80061e0:	6033      	str	r3, [r6, #0]
 80061e2:	e019      	b.n	8006218 <_malloc_r+0xb0>
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	dac9      	bge.n	800617c <_malloc_r+0x14>
 80061e8:	230c      	movs	r3, #12
 80061ea:	602b      	str	r3, [r5, #0]
 80061ec:	2000      	movs	r0, #0
 80061ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061f0:	6821      	ldr	r1, [r4, #0]
 80061f2:	1bc9      	subs	r1, r1, r7
 80061f4:	d420      	bmi.n	8006238 <_malloc_r+0xd0>
 80061f6:	290b      	cmp	r1, #11
 80061f8:	d90a      	bls.n	8006210 <_malloc_r+0xa8>
 80061fa:	19e2      	adds	r2, r4, r7
 80061fc:	6027      	str	r7, [r4, #0]
 80061fe:	42a3      	cmp	r3, r4
 8006200:	d104      	bne.n	800620c <_malloc_r+0xa4>
 8006202:	6032      	str	r2, [r6, #0]
 8006204:	6863      	ldr	r3, [r4, #4]
 8006206:	6011      	str	r1, [r2, #0]
 8006208:	6053      	str	r3, [r2, #4]
 800620a:	e005      	b.n	8006218 <_malloc_r+0xb0>
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	e7f9      	b.n	8006204 <_malloc_r+0x9c>
 8006210:	6862      	ldr	r2, [r4, #4]
 8006212:	42a3      	cmp	r3, r4
 8006214:	d10e      	bne.n	8006234 <_malloc_r+0xcc>
 8006216:	6032      	str	r2, [r6, #0]
 8006218:	0028      	movs	r0, r5
 800621a:	f000 f82d 	bl	8006278 <__malloc_unlock>
 800621e:	0020      	movs	r0, r4
 8006220:	2207      	movs	r2, #7
 8006222:	300b      	adds	r0, #11
 8006224:	1d23      	adds	r3, r4, #4
 8006226:	4390      	bics	r0, r2
 8006228:	1ac2      	subs	r2, r0, r3
 800622a:	4298      	cmp	r0, r3
 800622c:	d0df      	beq.n	80061ee <_malloc_r+0x86>
 800622e:	1a1b      	subs	r3, r3, r0
 8006230:	50a3      	str	r3, [r4, r2]
 8006232:	e7dc      	b.n	80061ee <_malloc_r+0x86>
 8006234:	605a      	str	r2, [r3, #4]
 8006236:	e7ef      	b.n	8006218 <_malloc_r+0xb0>
 8006238:	0023      	movs	r3, r4
 800623a:	6864      	ldr	r4, [r4, #4]
 800623c:	e7a6      	b.n	800618c <_malloc_r+0x24>
 800623e:	9c00      	ldr	r4, [sp, #0]
 8006240:	6863      	ldr	r3, [r4, #4]
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	e7ad      	b.n	80061a2 <_malloc_r+0x3a>
 8006246:	001a      	movs	r2, r3
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	42a3      	cmp	r3, r4
 800624c:	d1fb      	bne.n	8006246 <_malloc_r+0xde>
 800624e:	2300      	movs	r3, #0
 8006250:	e7da      	b.n	8006208 <_malloc_r+0xa0>
 8006252:	230c      	movs	r3, #12
 8006254:	0028      	movs	r0, r5
 8006256:	602b      	str	r3, [r5, #0]
 8006258:	f000 f80e 	bl	8006278 <__malloc_unlock>
 800625c:	e7c6      	b.n	80061ec <_malloc_r+0x84>
 800625e:	6007      	str	r7, [r0, #0]
 8006260:	e7da      	b.n	8006218 <_malloc_r+0xb0>
 8006262:	46c0      	nop			@ (mov r8, r8)
 8006264:	200003c4 	.word	0x200003c4

08006268 <__malloc_lock>:
 8006268:	b510      	push	{r4, lr}
 800626a:	4802      	ldr	r0, [pc, #8]	@ (8006274 <__malloc_lock+0xc>)
 800626c:	f7ff ff0e 	bl	800608c <__retarget_lock_acquire_recursive>
 8006270:	bd10      	pop	{r4, pc}
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	200003bc 	.word	0x200003bc

08006278 <__malloc_unlock>:
 8006278:	b510      	push	{r4, lr}
 800627a:	4802      	ldr	r0, [pc, #8]	@ (8006284 <__malloc_unlock+0xc>)
 800627c:	f7ff ff07 	bl	800608e <__retarget_lock_release_recursive>
 8006280:	bd10      	pop	{r4, pc}
 8006282:	46c0      	nop			@ (mov r8, r8)
 8006284:	200003bc 	.word	0x200003bc

08006288 <__ssputs_r>:
 8006288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800628a:	688e      	ldr	r6, [r1, #8]
 800628c:	b085      	sub	sp, #20
 800628e:	001f      	movs	r7, r3
 8006290:	000c      	movs	r4, r1
 8006292:	680b      	ldr	r3, [r1, #0]
 8006294:	9002      	str	r0, [sp, #8]
 8006296:	9203      	str	r2, [sp, #12]
 8006298:	42be      	cmp	r6, r7
 800629a:	d830      	bhi.n	80062fe <__ssputs_r+0x76>
 800629c:	210c      	movs	r1, #12
 800629e:	5e62      	ldrsh	r2, [r4, r1]
 80062a0:	2190      	movs	r1, #144	@ 0x90
 80062a2:	00c9      	lsls	r1, r1, #3
 80062a4:	420a      	tst	r2, r1
 80062a6:	d028      	beq.n	80062fa <__ssputs_r+0x72>
 80062a8:	2003      	movs	r0, #3
 80062aa:	6921      	ldr	r1, [r4, #16]
 80062ac:	1a5b      	subs	r3, r3, r1
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	6963      	ldr	r3, [r4, #20]
 80062b2:	4343      	muls	r3, r0
 80062b4:	9801      	ldr	r0, [sp, #4]
 80062b6:	0fdd      	lsrs	r5, r3, #31
 80062b8:	18ed      	adds	r5, r5, r3
 80062ba:	1c7b      	adds	r3, r7, #1
 80062bc:	181b      	adds	r3, r3, r0
 80062be:	106d      	asrs	r5, r5, #1
 80062c0:	42ab      	cmp	r3, r5
 80062c2:	d900      	bls.n	80062c6 <__ssputs_r+0x3e>
 80062c4:	001d      	movs	r5, r3
 80062c6:	0552      	lsls	r2, r2, #21
 80062c8:	d528      	bpl.n	800631c <__ssputs_r+0x94>
 80062ca:	0029      	movs	r1, r5
 80062cc:	9802      	ldr	r0, [sp, #8]
 80062ce:	f7ff ff4b 	bl	8006168 <_malloc_r>
 80062d2:	1e06      	subs	r6, r0, #0
 80062d4:	d02c      	beq.n	8006330 <__ssputs_r+0xa8>
 80062d6:	9a01      	ldr	r2, [sp, #4]
 80062d8:	6921      	ldr	r1, [r4, #16]
 80062da:	f000 fae2 	bl	80068a2 <memcpy>
 80062de:	89a2      	ldrh	r2, [r4, #12]
 80062e0:	4b18      	ldr	r3, [pc, #96]	@ (8006344 <__ssputs_r+0xbc>)
 80062e2:	401a      	ands	r2, r3
 80062e4:	2380      	movs	r3, #128	@ 0x80
 80062e6:	4313      	orrs	r3, r2
 80062e8:	81a3      	strh	r3, [r4, #12]
 80062ea:	9b01      	ldr	r3, [sp, #4]
 80062ec:	6126      	str	r6, [r4, #16]
 80062ee:	18f6      	adds	r6, r6, r3
 80062f0:	6026      	str	r6, [r4, #0]
 80062f2:	003e      	movs	r6, r7
 80062f4:	6165      	str	r5, [r4, #20]
 80062f6:	1aed      	subs	r5, r5, r3
 80062f8:	60a5      	str	r5, [r4, #8]
 80062fa:	42be      	cmp	r6, r7
 80062fc:	d900      	bls.n	8006300 <__ssputs_r+0x78>
 80062fe:	003e      	movs	r6, r7
 8006300:	0032      	movs	r2, r6
 8006302:	9903      	ldr	r1, [sp, #12]
 8006304:	6820      	ldr	r0, [r4, #0]
 8006306:	f000 fa9b 	bl	8006840 <memmove>
 800630a:	2000      	movs	r0, #0
 800630c:	68a3      	ldr	r3, [r4, #8]
 800630e:	1b9b      	subs	r3, r3, r6
 8006310:	60a3      	str	r3, [r4, #8]
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	199b      	adds	r3, r3, r6
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	b005      	add	sp, #20
 800631a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631c:	002a      	movs	r2, r5
 800631e:	9802      	ldr	r0, [sp, #8]
 8006320:	f000 fac8 	bl	80068b4 <_realloc_r>
 8006324:	1e06      	subs	r6, r0, #0
 8006326:	d1e0      	bne.n	80062ea <__ssputs_r+0x62>
 8006328:	6921      	ldr	r1, [r4, #16]
 800632a:	9802      	ldr	r0, [sp, #8]
 800632c:	f7ff feb0 	bl	8006090 <_free_r>
 8006330:	230c      	movs	r3, #12
 8006332:	2001      	movs	r0, #1
 8006334:	9a02      	ldr	r2, [sp, #8]
 8006336:	4240      	negs	r0, r0
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	89a2      	ldrh	r2, [r4, #12]
 800633c:	3334      	adds	r3, #52	@ 0x34
 800633e:	4313      	orrs	r3, r2
 8006340:	81a3      	strh	r3, [r4, #12]
 8006342:	e7e9      	b.n	8006318 <__ssputs_r+0x90>
 8006344:	fffffb7f 	.word	0xfffffb7f

08006348 <_svfiprintf_r>:
 8006348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800634a:	b0a1      	sub	sp, #132	@ 0x84
 800634c:	9003      	str	r0, [sp, #12]
 800634e:	001d      	movs	r5, r3
 8006350:	898b      	ldrh	r3, [r1, #12]
 8006352:	000f      	movs	r7, r1
 8006354:	0016      	movs	r6, r2
 8006356:	061b      	lsls	r3, r3, #24
 8006358:	d511      	bpl.n	800637e <_svfiprintf_r+0x36>
 800635a:	690b      	ldr	r3, [r1, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10e      	bne.n	800637e <_svfiprintf_r+0x36>
 8006360:	2140      	movs	r1, #64	@ 0x40
 8006362:	f7ff ff01 	bl	8006168 <_malloc_r>
 8006366:	6038      	str	r0, [r7, #0]
 8006368:	6138      	str	r0, [r7, #16]
 800636a:	2800      	cmp	r0, #0
 800636c:	d105      	bne.n	800637a <_svfiprintf_r+0x32>
 800636e:	230c      	movs	r3, #12
 8006370:	9a03      	ldr	r2, [sp, #12]
 8006372:	6013      	str	r3, [r2, #0]
 8006374:	2001      	movs	r0, #1
 8006376:	4240      	negs	r0, r0
 8006378:	e0cf      	b.n	800651a <_svfiprintf_r+0x1d2>
 800637a:	2340      	movs	r3, #64	@ 0x40
 800637c:	617b      	str	r3, [r7, #20]
 800637e:	2300      	movs	r3, #0
 8006380:	ac08      	add	r4, sp, #32
 8006382:	6163      	str	r3, [r4, #20]
 8006384:	3320      	adds	r3, #32
 8006386:	7663      	strb	r3, [r4, #25]
 8006388:	3310      	adds	r3, #16
 800638a:	76a3      	strb	r3, [r4, #26]
 800638c:	9507      	str	r5, [sp, #28]
 800638e:	0035      	movs	r5, r6
 8006390:	782b      	ldrb	r3, [r5, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <_svfiprintf_r+0x52>
 8006396:	2b25      	cmp	r3, #37	@ 0x25
 8006398:	d148      	bne.n	800642c <_svfiprintf_r+0xe4>
 800639a:	1bab      	subs	r3, r5, r6
 800639c:	9305      	str	r3, [sp, #20]
 800639e:	42b5      	cmp	r5, r6
 80063a0:	d00b      	beq.n	80063ba <_svfiprintf_r+0x72>
 80063a2:	0032      	movs	r2, r6
 80063a4:	0039      	movs	r1, r7
 80063a6:	9803      	ldr	r0, [sp, #12]
 80063a8:	f7ff ff6e 	bl	8006288 <__ssputs_r>
 80063ac:	3001      	adds	r0, #1
 80063ae:	d100      	bne.n	80063b2 <_svfiprintf_r+0x6a>
 80063b0:	e0ae      	b.n	8006510 <_svfiprintf_r+0x1c8>
 80063b2:	6963      	ldr	r3, [r4, #20]
 80063b4:	9a05      	ldr	r2, [sp, #20]
 80063b6:	189b      	adds	r3, r3, r2
 80063b8:	6163      	str	r3, [r4, #20]
 80063ba:	782b      	ldrb	r3, [r5, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d100      	bne.n	80063c2 <_svfiprintf_r+0x7a>
 80063c0:	e0a6      	b.n	8006510 <_svfiprintf_r+0x1c8>
 80063c2:	2201      	movs	r2, #1
 80063c4:	2300      	movs	r3, #0
 80063c6:	4252      	negs	r2, r2
 80063c8:	6062      	str	r2, [r4, #4]
 80063ca:	a904      	add	r1, sp, #16
 80063cc:	3254      	adds	r2, #84	@ 0x54
 80063ce:	1852      	adds	r2, r2, r1
 80063d0:	1c6e      	adds	r6, r5, #1
 80063d2:	6023      	str	r3, [r4, #0]
 80063d4:	60e3      	str	r3, [r4, #12]
 80063d6:	60a3      	str	r3, [r4, #8]
 80063d8:	7013      	strb	r3, [r2, #0]
 80063da:	65a3      	str	r3, [r4, #88]	@ 0x58
 80063dc:	4b54      	ldr	r3, [pc, #336]	@ (8006530 <_svfiprintf_r+0x1e8>)
 80063de:	2205      	movs	r2, #5
 80063e0:	0018      	movs	r0, r3
 80063e2:	7831      	ldrb	r1, [r6, #0]
 80063e4:	9305      	str	r3, [sp, #20]
 80063e6:	f000 fa51 	bl	800688c <memchr>
 80063ea:	1c75      	adds	r5, r6, #1
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d11f      	bne.n	8006430 <_svfiprintf_r+0xe8>
 80063f0:	6822      	ldr	r2, [r4, #0]
 80063f2:	06d3      	lsls	r3, r2, #27
 80063f4:	d504      	bpl.n	8006400 <_svfiprintf_r+0xb8>
 80063f6:	2353      	movs	r3, #83	@ 0x53
 80063f8:	a904      	add	r1, sp, #16
 80063fa:	185b      	adds	r3, r3, r1
 80063fc:	2120      	movs	r1, #32
 80063fe:	7019      	strb	r1, [r3, #0]
 8006400:	0713      	lsls	r3, r2, #28
 8006402:	d504      	bpl.n	800640e <_svfiprintf_r+0xc6>
 8006404:	2353      	movs	r3, #83	@ 0x53
 8006406:	a904      	add	r1, sp, #16
 8006408:	185b      	adds	r3, r3, r1
 800640a:	212b      	movs	r1, #43	@ 0x2b
 800640c:	7019      	strb	r1, [r3, #0]
 800640e:	7833      	ldrb	r3, [r6, #0]
 8006410:	2b2a      	cmp	r3, #42	@ 0x2a
 8006412:	d016      	beq.n	8006442 <_svfiprintf_r+0xfa>
 8006414:	0035      	movs	r5, r6
 8006416:	2100      	movs	r1, #0
 8006418:	200a      	movs	r0, #10
 800641a:	68e3      	ldr	r3, [r4, #12]
 800641c:	782a      	ldrb	r2, [r5, #0]
 800641e:	1c6e      	adds	r6, r5, #1
 8006420:	3a30      	subs	r2, #48	@ 0x30
 8006422:	2a09      	cmp	r2, #9
 8006424:	d950      	bls.n	80064c8 <_svfiprintf_r+0x180>
 8006426:	2900      	cmp	r1, #0
 8006428:	d111      	bne.n	800644e <_svfiprintf_r+0x106>
 800642a:	e017      	b.n	800645c <_svfiprintf_r+0x114>
 800642c:	3501      	adds	r5, #1
 800642e:	e7af      	b.n	8006390 <_svfiprintf_r+0x48>
 8006430:	9b05      	ldr	r3, [sp, #20]
 8006432:	6822      	ldr	r2, [r4, #0]
 8006434:	1ac0      	subs	r0, r0, r3
 8006436:	2301      	movs	r3, #1
 8006438:	4083      	lsls	r3, r0
 800643a:	4313      	orrs	r3, r2
 800643c:	002e      	movs	r6, r5
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	e7cc      	b.n	80063dc <_svfiprintf_r+0x94>
 8006442:	9b07      	ldr	r3, [sp, #28]
 8006444:	1d19      	adds	r1, r3, #4
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	9107      	str	r1, [sp, #28]
 800644a:	2b00      	cmp	r3, #0
 800644c:	db01      	blt.n	8006452 <_svfiprintf_r+0x10a>
 800644e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006450:	e004      	b.n	800645c <_svfiprintf_r+0x114>
 8006452:	425b      	negs	r3, r3
 8006454:	60e3      	str	r3, [r4, #12]
 8006456:	2302      	movs	r3, #2
 8006458:	4313      	orrs	r3, r2
 800645a:	6023      	str	r3, [r4, #0]
 800645c:	782b      	ldrb	r3, [r5, #0]
 800645e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006460:	d10c      	bne.n	800647c <_svfiprintf_r+0x134>
 8006462:	786b      	ldrb	r3, [r5, #1]
 8006464:	2b2a      	cmp	r3, #42	@ 0x2a
 8006466:	d134      	bne.n	80064d2 <_svfiprintf_r+0x18a>
 8006468:	9b07      	ldr	r3, [sp, #28]
 800646a:	3502      	adds	r5, #2
 800646c:	1d1a      	adds	r2, r3, #4
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	9207      	str	r2, [sp, #28]
 8006472:	2b00      	cmp	r3, #0
 8006474:	da01      	bge.n	800647a <_svfiprintf_r+0x132>
 8006476:	2301      	movs	r3, #1
 8006478:	425b      	negs	r3, r3
 800647a:	9309      	str	r3, [sp, #36]	@ 0x24
 800647c:	4e2d      	ldr	r6, [pc, #180]	@ (8006534 <_svfiprintf_r+0x1ec>)
 800647e:	2203      	movs	r2, #3
 8006480:	0030      	movs	r0, r6
 8006482:	7829      	ldrb	r1, [r5, #0]
 8006484:	f000 fa02 	bl	800688c <memchr>
 8006488:	2800      	cmp	r0, #0
 800648a:	d006      	beq.n	800649a <_svfiprintf_r+0x152>
 800648c:	2340      	movs	r3, #64	@ 0x40
 800648e:	1b80      	subs	r0, r0, r6
 8006490:	4083      	lsls	r3, r0
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	3501      	adds	r5, #1
 8006496:	4313      	orrs	r3, r2
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	7829      	ldrb	r1, [r5, #0]
 800649c:	2206      	movs	r2, #6
 800649e:	4826      	ldr	r0, [pc, #152]	@ (8006538 <_svfiprintf_r+0x1f0>)
 80064a0:	1c6e      	adds	r6, r5, #1
 80064a2:	7621      	strb	r1, [r4, #24]
 80064a4:	f000 f9f2 	bl	800688c <memchr>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d038      	beq.n	800651e <_svfiprintf_r+0x1d6>
 80064ac:	4b23      	ldr	r3, [pc, #140]	@ (800653c <_svfiprintf_r+0x1f4>)
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d122      	bne.n	80064f8 <_svfiprintf_r+0x1b0>
 80064b2:	2207      	movs	r2, #7
 80064b4:	9b07      	ldr	r3, [sp, #28]
 80064b6:	3307      	adds	r3, #7
 80064b8:	4393      	bics	r3, r2
 80064ba:	3308      	adds	r3, #8
 80064bc:	9307      	str	r3, [sp, #28]
 80064be:	6963      	ldr	r3, [r4, #20]
 80064c0:	9a04      	ldr	r2, [sp, #16]
 80064c2:	189b      	adds	r3, r3, r2
 80064c4:	6163      	str	r3, [r4, #20]
 80064c6:	e762      	b.n	800638e <_svfiprintf_r+0x46>
 80064c8:	4343      	muls	r3, r0
 80064ca:	0035      	movs	r5, r6
 80064cc:	2101      	movs	r1, #1
 80064ce:	189b      	adds	r3, r3, r2
 80064d0:	e7a4      	b.n	800641c <_svfiprintf_r+0xd4>
 80064d2:	2300      	movs	r3, #0
 80064d4:	200a      	movs	r0, #10
 80064d6:	0019      	movs	r1, r3
 80064d8:	3501      	adds	r5, #1
 80064da:	6063      	str	r3, [r4, #4]
 80064dc:	782a      	ldrb	r2, [r5, #0]
 80064de:	1c6e      	adds	r6, r5, #1
 80064e0:	3a30      	subs	r2, #48	@ 0x30
 80064e2:	2a09      	cmp	r2, #9
 80064e4:	d903      	bls.n	80064ee <_svfiprintf_r+0x1a6>
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0c8      	beq.n	800647c <_svfiprintf_r+0x134>
 80064ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80064ec:	e7c6      	b.n	800647c <_svfiprintf_r+0x134>
 80064ee:	4341      	muls	r1, r0
 80064f0:	0035      	movs	r5, r6
 80064f2:	2301      	movs	r3, #1
 80064f4:	1889      	adds	r1, r1, r2
 80064f6:	e7f1      	b.n	80064dc <_svfiprintf_r+0x194>
 80064f8:	aa07      	add	r2, sp, #28
 80064fa:	9200      	str	r2, [sp, #0]
 80064fc:	0021      	movs	r1, r4
 80064fe:	003a      	movs	r2, r7
 8006500:	4b0f      	ldr	r3, [pc, #60]	@ (8006540 <_svfiprintf_r+0x1f8>)
 8006502:	9803      	ldr	r0, [sp, #12]
 8006504:	e000      	b.n	8006508 <_svfiprintf_r+0x1c0>
 8006506:	bf00      	nop
 8006508:	9004      	str	r0, [sp, #16]
 800650a:	9b04      	ldr	r3, [sp, #16]
 800650c:	3301      	adds	r3, #1
 800650e:	d1d6      	bne.n	80064be <_svfiprintf_r+0x176>
 8006510:	89bb      	ldrh	r3, [r7, #12]
 8006512:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006514:	065b      	lsls	r3, r3, #25
 8006516:	d500      	bpl.n	800651a <_svfiprintf_r+0x1d2>
 8006518:	e72c      	b.n	8006374 <_svfiprintf_r+0x2c>
 800651a:	b021      	add	sp, #132	@ 0x84
 800651c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800651e:	aa07      	add	r2, sp, #28
 8006520:	9200      	str	r2, [sp, #0]
 8006522:	0021      	movs	r1, r4
 8006524:	003a      	movs	r2, r7
 8006526:	4b06      	ldr	r3, [pc, #24]	@ (8006540 <_svfiprintf_r+0x1f8>)
 8006528:	9803      	ldr	r0, [sp, #12]
 800652a:	f000 f87b 	bl	8006624 <_printf_i>
 800652e:	e7eb      	b.n	8006508 <_svfiprintf_r+0x1c0>
 8006530:	08006a74 	.word	0x08006a74
 8006534:	08006a7a 	.word	0x08006a7a
 8006538:	08006a7e 	.word	0x08006a7e
 800653c:	00000000 	.word	0x00000000
 8006540:	08006289 	.word	0x08006289

08006544 <_printf_common>:
 8006544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006546:	0016      	movs	r6, r2
 8006548:	9301      	str	r3, [sp, #4]
 800654a:	688a      	ldr	r2, [r1, #8]
 800654c:	690b      	ldr	r3, [r1, #16]
 800654e:	000c      	movs	r4, r1
 8006550:	9000      	str	r0, [sp, #0]
 8006552:	4293      	cmp	r3, r2
 8006554:	da00      	bge.n	8006558 <_printf_common+0x14>
 8006556:	0013      	movs	r3, r2
 8006558:	0022      	movs	r2, r4
 800655a:	6033      	str	r3, [r6, #0]
 800655c:	3243      	adds	r2, #67	@ 0x43
 800655e:	7812      	ldrb	r2, [r2, #0]
 8006560:	2a00      	cmp	r2, #0
 8006562:	d001      	beq.n	8006568 <_printf_common+0x24>
 8006564:	3301      	adds	r3, #1
 8006566:	6033      	str	r3, [r6, #0]
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	069b      	lsls	r3, r3, #26
 800656c:	d502      	bpl.n	8006574 <_printf_common+0x30>
 800656e:	6833      	ldr	r3, [r6, #0]
 8006570:	3302      	adds	r3, #2
 8006572:	6033      	str	r3, [r6, #0]
 8006574:	6822      	ldr	r2, [r4, #0]
 8006576:	2306      	movs	r3, #6
 8006578:	0015      	movs	r5, r2
 800657a:	401d      	ands	r5, r3
 800657c:	421a      	tst	r2, r3
 800657e:	d027      	beq.n	80065d0 <_printf_common+0x8c>
 8006580:	0023      	movs	r3, r4
 8006582:	3343      	adds	r3, #67	@ 0x43
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	1e5a      	subs	r2, r3, #1
 8006588:	4193      	sbcs	r3, r2
 800658a:	6822      	ldr	r2, [r4, #0]
 800658c:	0692      	lsls	r2, r2, #26
 800658e:	d430      	bmi.n	80065f2 <_printf_common+0xae>
 8006590:	0022      	movs	r2, r4
 8006592:	9901      	ldr	r1, [sp, #4]
 8006594:	9800      	ldr	r0, [sp, #0]
 8006596:	9d08      	ldr	r5, [sp, #32]
 8006598:	3243      	adds	r2, #67	@ 0x43
 800659a:	47a8      	blx	r5
 800659c:	3001      	adds	r0, #1
 800659e:	d025      	beq.n	80065ec <_printf_common+0xa8>
 80065a0:	2206      	movs	r2, #6
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	2500      	movs	r5, #0
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	d105      	bne.n	80065b8 <_printf_common+0x74>
 80065ac:	6833      	ldr	r3, [r6, #0]
 80065ae:	68e5      	ldr	r5, [r4, #12]
 80065b0:	1aed      	subs	r5, r5, r3
 80065b2:	43eb      	mvns	r3, r5
 80065b4:	17db      	asrs	r3, r3, #31
 80065b6:	401d      	ands	r5, r3
 80065b8:	68a3      	ldr	r3, [r4, #8]
 80065ba:	6922      	ldr	r2, [r4, #16]
 80065bc:	4293      	cmp	r3, r2
 80065be:	dd01      	ble.n	80065c4 <_printf_common+0x80>
 80065c0:	1a9b      	subs	r3, r3, r2
 80065c2:	18ed      	adds	r5, r5, r3
 80065c4:	2600      	movs	r6, #0
 80065c6:	42b5      	cmp	r5, r6
 80065c8:	d120      	bne.n	800660c <_printf_common+0xc8>
 80065ca:	2000      	movs	r0, #0
 80065cc:	e010      	b.n	80065f0 <_printf_common+0xac>
 80065ce:	3501      	adds	r5, #1
 80065d0:	68e3      	ldr	r3, [r4, #12]
 80065d2:	6832      	ldr	r2, [r6, #0]
 80065d4:	1a9b      	subs	r3, r3, r2
 80065d6:	42ab      	cmp	r3, r5
 80065d8:	ddd2      	ble.n	8006580 <_printf_common+0x3c>
 80065da:	0022      	movs	r2, r4
 80065dc:	2301      	movs	r3, #1
 80065de:	9901      	ldr	r1, [sp, #4]
 80065e0:	9800      	ldr	r0, [sp, #0]
 80065e2:	9f08      	ldr	r7, [sp, #32]
 80065e4:	3219      	adds	r2, #25
 80065e6:	47b8      	blx	r7
 80065e8:	3001      	adds	r0, #1
 80065ea:	d1f0      	bne.n	80065ce <_printf_common+0x8a>
 80065ec:	2001      	movs	r0, #1
 80065ee:	4240      	negs	r0, r0
 80065f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065f2:	2030      	movs	r0, #48	@ 0x30
 80065f4:	18e1      	adds	r1, r4, r3
 80065f6:	3143      	adds	r1, #67	@ 0x43
 80065f8:	7008      	strb	r0, [r1, #0]
 80065fa:	0021      	movs	r1, r4
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	3145      	adds	r1, #69	@ 0x45
 8006600:	7809      	ldrb	r1, [r1, #0]
 8006602:	18a2      	adds	r2, r4, r2
 8006604:	3243      	adds	r2, #67	@ 0x43
 8006606:	3302      	adds	r3, #2
 8006608:	7011      	strb	r1, [r2, #0]
 800660a:	e7c1      	b.n	8006590 <_printf_common+0x4c>
 800660c:	0022      	movs	r2, r4
 800660e:	2301      	movs	r3, #1
 8006610:	9901      	ldr	r1, [sp, #4]
 8006612:	9800      	ldr	r0, [sp, #0]
 8006614:	9f08      	ldr	r7, [sp, #32]
 8006616:	321a      	adds	r2, #26
 8006618:	47b8      	blx	r7
 800661a:	3001      	adds	r0, #1
 800661c:	d0e6      	beq.n	80065ec <_printf_common+0xa8>
 800661e:	3601      	adds	r6, #1
 8006620:	e7d1      	b.n	80065c6 <_printf_common+0x82>
	...

08006624 <_printf_i>:
 8006624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006626:	b08b      	sub	sp, #44	@ 0x2c
 8006628:	9206      	str	r2, [sp, #24]
 800662a:	000a      	movs	r2, r1
 800662c:	3243      	adds	r2, #67	@ 0x43
 800662e:	9307      	str	r3, [sp, #28]
 8006630:	9005      	str	r0, [sp, #20]
 8006632:	9203      	str	r2, [sp, #12]
 8006634:	7e0a      	ldrb	r2, [r1, #24]
 8006636:	000c      	movs	r4, r1
 8006638:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800663a:	2a78      	cmp	r2, #120	@ 0x78
 800663c:	d809      	bhi.n	8006652 <_printf_i+0x2e>
 800663e:	2a62      	cmp	r2, #98	@ 0x62
 8006640:	d80b      	bhi.n	800665a <_printf_i+0x36>
 8006642:	2a00      	cmp	r2, #0
 8006644:	d100      	bne.n	8006648 <_printf_i+0x24>
 8006646:	e0bc      	b.n	80067c2 <_printf_i+0x19e>
 8006648:	497b      	ldr	r1, [pc, #492]	@ (8006838 <_printf_i+0x214>)
 800664a:	9104      	str	r1, [sp, #16]
 800664c:	2a58      	cmp	r2, #88	@ 0x58
 800664e:	d100      	bne.n	8006652 <_printf_i+0x2e>
 8006650:	e090      	b.n	8006774 <_printf_i+0x150>
 8006652:	0025      	movs	r5, r4
 8006654:	3542      	adds	r5, #66	@ 0x42
 8006656:	702a      	strb	r2, [r5, #0]
 8006658:	e022      	b.n	80066a0 <_printf_i+0x7c>
 800665a:	0010      	movs	r0, r2
 800665c:	3863      	subs	r0, #99	@ 0x63
 800665e:	2815      	cmp	r0, #21
 8006660:	d8f7      	bhi.n	8006652 <_printf_i+0x2e>
 8006662:	f7f9 fd59 	bl	8000118 <__gnu_thumb1_case_shi>
 8006666:	0016      	.short	0x0016
 8006668:	fff6001f 	.word	0xfff6001f
 800666c:	fff6fff6 	.word	0xfff6fff6
 8006670:	001ffff6 	.word	0x001ffff6
 8006674:	fff6fff6 	.word	0xfff6fff6
 8006678:	fff6fff6 	.word	0xfff6fff6
 800667c:	003600a1 	.word	0x003600a1
 8006680:	fff60080 	.word	0xfff60080
 8006684:	00b2fff6 	.word	0x00b2fff6
 8006688:	0036fff6 	.word	0x0036fff6
 800668c:	fff6fff6 	.word	0xfff6fff6
 8006690:	0084      	.short	0x0084
 8006692:	0025      	movs	r5, r4
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	3542      	adds	r5, #66	@ 0x42
 8006698:	1d11      	adds	r1, r2, #4
 800669a:	6019      	str	r1, [r3, #0]
 800669c:	6813      	ldr	r3, [r2, #0]
 800669e:	702b      	strb	r3, [r5, #0]
 80066a0:	2301      	movs	r3, #1
 80066a2:	e0a0      	b.n	80067e6 <_printf_i+0x1c2>
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	6809      	ldr	r1, [r1, #0]
 80066a8:	1d02      	adds	r2, r0, #4
 80066aa:	060d      	lsls	r5, r1, #24
 80066ac:	d50b      	bpl.n	80066c6 <_printf_i+0xa2>
 80066ae:	6806      	ldr	r6, [r0, #0]
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	2e00      	cmp	r6, #0
 80066b4:	da03      	bge.n	80066be <_printf_i+0x9a>
 80066b6:	232d      	movs	r3, #45	@ 0x2d
 80066b8:	9a03      	ldr	r2, [sp, #12]
 80066ba:	4276      	negs	r6, r6
 80066bc:	7013      	strb	r3, [r2, #0]
 80066be:	4b5e      	ldr	r3, [pc, #376]	@ (8006838 <_printf_i+0x214>)
 80066c0:	270a      	movs	r7, #10
 80066c2:	9304      	str	r3, [sp, #16]
 80066c4:	e018      	b.n	80066f8 <_printf_i+0xd4>
 80066c6:	6806      	ldr	r6, [r0, #0]
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	0649      	lsls	r1, r1, #25
 80066cc:	d5f1      	bpl.n	80066b2 <_printf_i+0x8e>
 80066ce:	b236      	sxth	r6, r6
 80066d0:	e7ef      	b.n	80066b2 <_printf_i+0x8e>
 80066d2:	6808      	ldr	r0, [r1, #0]
 80066d4:	6819      	ldr	r1, [r3, #0]
 80066d6:	c940      	ldmia	r1!, {r6}
 80066d8:	0605      	lsls	r5, r0, #24
 80066da:	d402      	bmi.n	80066e2 <_printf_i+0xbe>
 80066dc:	0640      	lsls	r0, r0, #25
 80066de:	d500      	bpl.n	80066e2 <_printf_i+0xbe>
 80066e0:	b2b6      	uxth	r6, r6
 80066e2:	6019      	str	r1, [r3, #0]
 80066e4:	4b54      	ldr	r3, [pc, #336]	@ (8006838 <_printf_i+0x214>)
 80066e6:	270a      	movs	r7, #10
 80066e8:	9304      	str	r3, [sp, #16]
 80066ea:	2a6f      	cmp	r2, #111	@ 0x6f
 80066ec:	d100      	bne.n	80066f0 <_printf_i+0xcc>
 80066ee:	3f02      	subs	r7, #2
 80066f0:	0023      	movs	r3, r4
 80066f2:	2200      	movs	r2, #0
 80066f4:	3343      	adds	r3, #67	@ 0x43
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	6863      	ldr	r3, [r4, #4]
 80066fa:	60a3      	str	r3, [r4, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	db03      	blt.n	8006708 <_printf_i+0xe4>
 8006700:	2104      	movs	r1, #4
 8006702:	6822      	ldr	r2, [r4, #0]
 8006704:	438a      	bics	r2, r1
 8006706:	6022      	str	r2, [r4, #0]
 8006708:	2e00      	cmp	r6, #0
 800670a:	d102      	bne.n	8006712 <_printf_i+0xee>
 800670c:	9d03      	ldr	r5, [sp, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00c      	beq.n	800672c <_printf_i+0x108>
 8006712:	9d03      	ldr	r5, [sp, #12]
 8006714:	0030      	movs	r0, r6
 8006716:	0039      	movs	r1, r7
 8006718:	f7f9 fd8e 	bl	8000238 <__aeabi_uidivmod>
 800671c:	9b04      	ldr	r3, [sp, #16]
 800671e:	3d01      	subs	r5, #1
 8006720:	5c5b      	ldrb	r3, [r3, r1]
 8006722:	702b      	strb	r3, [r5, #0]
 8006724:	0033      	movs	r3, r6
 8006726:	0006      	movs	r6, r0
 8006728:	429f      	cmp	r7, r3
 800672a:	d9f3      	bls.n	8006714 <_printf_i+0xf0>
 800672c:	2f08      	cmp	r7, #8
 800672e:	d109      	bne.n	8006744 <_printf_i+0x120>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	07db      	lsls	r3, r3, #31
 8006734:	d506      	bpl.n	8006744 <_printf_i+0x120>
 8006736:	6862      	ldr	r2, [r4, #4]
 8006738:	6923      	ldr	r3, [r4, #16]
 800673a:	429a      	cmp	r2, r3
 800673c:	dc02      	bgt.n	8006744 <_printf_i+0x120>
 800673e:	2330      	movs	r3, #48	@ 0x30
 8006740:	3d01      	subs	r5, #1
 8006742:	702b      	strb	r3, [r5, #0]
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	1b5b      	subs	r3, r3, r5
 8006748:	6123      	str	r3, [r4, #16]
 800674a:	9b07      	ldr	r3, [sp, #28]
 800674c:	0021      	movs	r1, r4
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	9805      	ldr	r0, [sp, #20]
 8006752:	9b06      	ldr	r3, [sp, #24]
 8006754:	aa09      	add	r2, sp, #36	@ 0x24
 8006756:	f7ff fef5 	bl	8006544 <_printf_common>
 800675a:	3001      	adds	r0, #1
 800675c:	d148      	bne.n	80067f0 <_printf_i+0x1cc>
 800675e:	2001      	movs	r0, #1
 8006760:	4240      	negs	r0, r0
 8006762:	b00b      	add	sp, #44	@ 0x2c
 8006764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006766:	2220      	movs	r2, #32
 8006768:	6809      	ldr	r1, [r1, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	6022      	str	r2, [r4, #0]
 800676e:	2278      	movs	r2, #120	@ 0x78
 8006770:	4932      	ldr	r1, [pc, #200]	@ (800683c <_printf_i+0x218>)
 8006772:	9104      	str	r1, [sp, #16]
 8006774:	0021      	movs	r1, r4
 8006776:	3145      	adds	r1, #69	@ 0x45
 8006778:	700a      	strb	r2, [r1, #0]
 800677a:	6819      	ldr	r1, [r3, #0]
 800677c:	6822      	ldr	r2, [r4, #0]
 800677e:	c940      	ldmia	r1!, {r6}
 8006780:	0610      	lsls	r0, r2, #24
 8006782:	d402      	bmi.n	800678a <_printf_i+0x166>
 8006784:	0650      	lsls	r0, r2, #25
 8006786:	d500      	bpl.n	800678a <_printf_i+0x166>
 8006788:	b2b6      	uxth	r6, r6
 800678a:	6019      	str	r1, [r3, #0]
 800678c:	07d3      	lsls	r3, r2, #31
 800678e:	d502      	bpl.n	8006796 <_printf_i+0x172>
 8006790:	2320      	movs	r3, #32
 8006792:	4313      	orrs	r3, r2
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	2e00      	cmp	r6, #0
 8006798:	d001      	beq.n	800679e <_printf_i+0x17a>
 800679a:	2710      	movs	r7, #16
 800679c:	e7a8      	b.n	80066f0 <_printf_i+0xcc>
 800679e:	2220      	movs	r2, #32
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	4393      	bics	r3, r2
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	e7f8      	b.n	800679a <_printf_i+0x176>
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	680d      	ldr	r5, [r1, #0]
 80067ac:	1d10      	adds	r0, r2, #4
 80067ae:	6949      	ldr	r1, [r1, #20]
 80067b0:	6018      	str	r0, [r3, #0]
 80067b2:	6813      	ldr	r3, [r2, #0]
 80067b4:	062e      	lsls	r6, r5, #24
 80067b6:	d501      	bpl.n	80067bc <_printf_i+0x198>
 80067b8:	6019      	str	r1, [r3, #0]
 80067ba:	e002      	b.n	80067c2 <_printf_i+0x19e>
 80067bc:	066d      	lsls	r5, r5, #25
 80067be:	d5fb      	bpl.n	80067b8 <_printf_i+0x194>
 80067c0:	8019      	strh	r1, [r3, #0]
 80067c2:	2300      	movs	r3, #0
 80067c4:	9d03      	ldr	r5, [sp, #12]
 80067c6:	6123      	str	r3, [r4, #16]
 80067c8:	e7bf      	b.n	800674a <_printf_i+0x126>
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	1d11      	adds	r1, r2, #4
 80067ce:	6019      	str	r1, [r3, #0]
 80067d0:	6815      	ldr	r5, [r2, #0]
 80067d2:	2100      	movs	r1, #0
 80067d4:	0028      	movs	r0, r5
 80067d6:	6862      	ldr	r2, [r4, #4]
 80067d8:	f000 f858 	bl	800688c <memchr>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d001      	beq.n	80067e4 <_printf_i+0x1c0>
 80067e0:	1b40      	subs	r0, r0, r5
 80067e2:	6060      	str	r0, [r4, #4]
 80067e4:	6863      	ldr	r3, [r4, #4]
 80067e6:	6123      	str	r3, [r4, #16]
 80067e8:	2300      	movs	r3, #0
 80067ea:	9a03      	ldr	r2, [sp, #12]
 80067ec:	7013      	strb	r3, [r2, #0]
 80067ee:	e7ac      	b.n	800674a <_printf_i+0x126>
 80067f0:	002a      	movs	r2, r5
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	9906      	ldr	r1, [sp, #24]
 80067f6:	9805      	ldr	r0, [sp, #20]
 80067f8:	9d07      	ldr	r5, [sp, #28]
 80067fa:	47a8      	blx	r5
 80067fc:	3001      	adds	r0, #1
 80067fe:	d0ae      	beq.n	800675e <_printf_i+0x13a>
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	079b      	lsls	r3, r3, #30
 8006804:	d415      	bmi.n	8006832 <_printf_i+0x20e>
 8006806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006808:	68e0      	ldr	r0, [r4, #12]
 800680a:	4298      	cmp	r0, r3
 800680c:	daa9      	bge.n	8006762 <_printf_i+0x13e>
 800680e:	0018      	movs	r0, r3
 8006810:	e7a7      	b.n	8006762 <_printf_i+0x13e>
 8006812:	0022      	movs	r2, r4
 8006814:	2301      	movs	r3, #1
 8006816:	9906      	ldr	r1, [sp, #24]
 8006818:	9805      	ldr	r0, [sp, #20]
 800681a:	9e07      	ldr	r6, [sp, #28]
 800681c:	3219      	adds	r2, #25
 800681e:	47b0      	blx	r6
 8006820:	3001      	adds	r0, #1
 8006822:	d09c      	beq.n	800675e <_printf_i+0x13a>
 8006824:	3501      	adds	r5, #1
 8006826:	68e3      	ldr	r3, [r4, #12]
 8006828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	42ab      	cmp	r3, r5
 800682e:	dcf0      	bgt.n	8006812 <_printf_i+0x1ee>
 8006830:	e7e9      	b.n	8006806 <_printf_i+0x1e2>
 8006832:	2500      	movs	r5, #0
 8006834:	e7f7      	b.n	8006826 <_printf_i+0x202>
 8006836:	46c0      	nop			@ (mov r8, r8)
 8006838:	08006a85 	.word	0x08006a85
 800683c:	08006a96 	.word	0x08006a96

08006840 <memmove>:
 8006840:	b510      	push	{r4, lr}
 8006842:	4288      	cmp	r0, r1
 8006844:	d806      	bhi.n	8006854 <memmove+0x14>
 8006846:	2300      	movs	r3, #0
 8006848:	429a      	cmp	r2, r3
 800684a:	d008      	beq.n	800685e <memmove+0x1e>
 800684c:	5ccc      	ldrb	r4, [r1, r3]
 800684e:	54c4      	strb	r4, [r0, r3]
 8006850:	3301      	adds	r3, #1
 8006852:	e7f9      	b.n	8006848 <memmove+0x8>
 8006854:	188b      	adds	r3, r1, r2
 8006856:	4298      	cmp	r0, r3
 8006858:	d2f5      	bcs.n	8006846 <memmove+0x6>
 800685a:	3a01      	subs	r2, #1
 800685c:	d200      	bcs.n	8006860 <memmove+0x20>
 800685e:	bd10      	pop	{r4, pc}
 8006860:	5c8b      	ldrb	r3, [r1, r2]
 8006862:	5483      	strb	r3, [r0, r2]
 8006864:	e7f9      	b.n	800685a <memmove+0x1a>
	...

08006868 <_sbrk_r>:
 8006868:	2300      	movs	r3, #0
 800686a:	b570      	push	{r4, r5, r6, lr}
 800686c:	4d06      	ldr	r5, [pc, #24]	@ (8006888 <_sbrk_r+0x20>)
 800686e:	0004      	movs	r4, r0
 8006870:	0008      	movs	r0, r1
 8006872:	602b      	str	r3, [r5, #0]
 8006874:	f7fa ffca 	bl	800180c <_sbrk>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d103      	bne.n	8006884 <_sbrk_r+0x1c>
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d000      	beq.n	8006884 <_sbrk_r+0x1c>
 8006882:	6023      	str	r3, [r4, #0]
 8006884:	bd70      	pop	{r4, r5, r6, pc}
 8006886:	46c0      	nop			@ (mov r8, r8)
 8006888:	200003b8 	.word	0x200003b8

0800688c <memchr>:
 800688c:	b2c9      	uxtb	r1, r1
 800688e:	1882      	adds	r2, r0, r2
 8006890:	4290      	cmp	r0, r2
 8006892:	d101      	bne.n	8006898 <memchr+0xc>
 8006894:	2000      	movs	r0, #0
 8006896:	4770      	bx	lr
 8006898:	7803      	ldrb	r3, [r0, #0]
 800689a:	428b      	cmp	r3, r1
 800689c:	d0fb      	beq.n	8006896 <memchr+0xa>
 800689e:	3001      	adds	r0, #1
 80068a0:	e7f6      	b.n	8006890 <memchr+0x4>

080068a2 <memcpy>:
 80068a2:	2300      	movs	r3, #0
 80068a4:	b510      	push	{r4, lr}
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d100      	bne.n	80068ac <memcpy+0xa>
 80068aa:	bd10      	pop	{r4, pc}
 80068ac:	5ccc      	ldrb	r4, [r1, r3]
 80068ae:	54c4      	strb	r4, [r0, r3]
 80068b0:	3301      	adds	r3, #1
 80068b2:	e7f8      	b.n	80068a6 <memcpy+0x4>

080068b4 <_realloc_r>:
 80068b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068b6:	0006      	movs	r6, r0
 80068b8:	000c      	movs	r4, r1
 80068ba:	0015      	movs	r5, r2
 80068bc:	2900      	cmp	r1, #0
 80068be:	d105      	bne.n	80068cc <_realloc_r+0x18>
 80068c0:	0011      	movs	r1, r2
 80068c2:	f7ff fc51 	bl	8006168 <_malloc_r>
 80068c6:	0004      	movs	r4, r0
 80068c8:	0020      	movs	r0, r4
 80068ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068cc:	2a00      	cmp	r2, #0
 80068ce:	d103      	bne.n	80068d8 <_realloc_r+0x24>
 80068d0:	f7ff fbde 	bl	8006090 <_free_r>
 80068d4:	2400      	movs	r4, #0
 80068d6:	e7f7      	b.n	80068c8 <_realloc_r+0x14>
 80068d8:	f000 f81b 	bl	8006912 <_malloc_usable_size_r>
 80068dc:	0007      	movs	r7, r0
 80068de:	4285      	cmp	r5, r0
 80068e0:	d802      	bhi.n	80068e8 <_realloc_r+0x34>
 80068e2:	0843      	lsrs	r3, r0, #1
 80068e4:	42ab      	cmp	r3, r5
 80068e6:	d3ef      	bcc.n	80068c8 <_realloc_r+0x14>
 80068e8:	0029      	movs	r1, r5
 80068ea:	0030      	movs	r0, r6
 80068ec:	f7ff fc3c 	bl	8006168 <_malloc_r>
 80068f0:	9001      	str	r0, [sp, #4]
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d0ee      	beq.n	80068d4 <_realloc_r+0x20>
 80068f6:	002a      	movs	r2, r5
 80068f8:	42bd      	cmp	r5, r7
 80068fa:	d900      	bls.n	80068fe <_realloc_r+0x4a>
 80068fc:	003a      	movs	r2, r7
 80068fe:	0021      	movs	r1, r4
 8006900:	9801      	ldr	r0, [sp, #4]
 8006902:	f7ff ffce 	bl	80068a2 <memcpy>
 8006906:	0021      	movs	r1, r4
 8006908:	0030      	movs	r0, r6
 800690a:	f7ff fbc1 	bl	8006090 <_free_r>
 800690e:	9c01      	ldr	r4, [sp, #4]
 8006910:	e7da      	b.n	80068c8 <_realloc_r+0x14>

08006912 <_malloc_usable_size_r>:
 8006912:	1f0b      	subs	r3, r1, #4
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	1f18      	subs	r0, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	da01      	bge.n	8006920 <_malloc_usable_size_r+0xe>
 800691c:	580b      	ldr	r3, [r1, r0]
 800691e:	18c0      	adds	r0, r0, r3
 8006920:	4770      	bx	lr
	...

08006924 <_init>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	46c0      	nop			@ (mov r8, r8)
 8006928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692a:	bc08      	pop	{r3}
 800692c:	469e      	mov	lr, r3
 800692e:	4770      	bx	lr

08006930 <_fini>:
 8006930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006932:	46c0      	nop			@ (mov r8, r8)
 8006934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006936:	bc08      	pop	{r3}
 8006938:	469e      	mov	lr, r3
 800693a:	4770      	bx	lr
