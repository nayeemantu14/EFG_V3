
EFG_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006960  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006a20  08006a20  00007a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bb0  08006bb0  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006bb0  08006bb0  00007bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bb8  08006bb8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb8  08006bb8  00007bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bbc  08006bbc  00007bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006bc0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000068  08006c28  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006c28  000083c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120b2  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000283f  00000000  00000000  0001a142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001c988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce7  00000000  00000000  0001da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000132c9  00000000  00000000  0001e707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133db  00000000  00000000  000319d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076e47  00000000  00000000  00044dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbbf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c8  00000000  00000000  000bbc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000bfd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006a08 	.word	0x08006a08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006a08 	.word	0x08006a08

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1824      	adds	r4, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	42a3      	cmp	r3, r4
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	@ 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0424      	lsls	r4, r4, #16
 80002d2:	1960      	adds	r0, r4, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			@ (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	@ (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <app_main>:
#include "app_main.h"
void app_main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	initSystem(&g_ctx);
 80004d0:	4b04      	ldr	r3, [pc, #16]	@ (80004e4 <app_main+0x18>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 f8b6 	bl	8000644 <initSystem>

	while(1)
	{
		processState(&g_ctx);
 80004d8:	4b02      	ldr	r3, [pc, #8]	@ (80004e4 <app_main+0x18>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 f902 	bl	80006e4 <processState>
 80004e0:	e7fa      	b.n	80004d8 <app_main+0xc>
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	200000bc 	.word	0x200000bc

080004e8 <HAL_GPIO_EXTI_Callback>:
	}
}
// Callback function for rising edge interrupt on GPIO EXTI line
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	0002      	movs	r2, r0
 80004f0:	1dbb      	adds	r3, r7, #6
 80004f2:	801a      	strh	r2, [r3, #0]
	SystemClock_Config();
 80004f4:	f000 fcf0 	bl	8000ed8 <SystemClock_Config>
	HAL_ResumeTick();
 80004f8:	f001 fb1a 	bl	8001b30 <HAL_ResumeTick>
	if(GPIO_Pin == GPIO_PIN_15)
 80004fc:	1dbb      	adds	r3, r7, #6
 80004fe:	881a      	ldrh	r2, [r3, #0]
 8000500:	2380      	movs	r3, #128	@ 0x80
 8000502:	021b      	lsls	r3, r3, #8
 8000504:	429a      	cmp	r2, r3
 8000506:	d12f      	bne.n	8000568 <HAL_GPIO_EXTI_Callback+0x80>
	{
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET) // Rising edge
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	021a      	lsls	r2, r3, #8
 800050c:	23a0      	movs	r3, #160	@ 0xa0
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	0011      	movs	r1, r2
 8000512:	0018      	movs	r0, r3
 8000514:	f002 f9ba 	bl	800288c <HAL_GPIO_ReadPin>
 8000518:	0003      	movs	r3, r0
 800051a:	2b01      	cmp	r3, #1
 800051c:	d10e      	bne.n	800053c <HAL_GPIO_EXTI_Callback+0x54>
		{
			if (buttonState == 1)
 800051e:	4b1e      	ldr	r3, [pc, #120]	@ (8000598 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	2b01      	cmp	r3, #1
 8000526:	d102      	bne.n	800052e <HAL_GPIO_EXTI_Callback+0x46>
			{
				holdTime = 0;
 8000528:	4b1c      	ldr	r3, [pc, #112]	@ (800059c <HAL_GPIO_EXTI_Callback+0xb4>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
			}
			wupFlag = 1;
 800052e:	4b1c      	ldr	r3, [pc, #112]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
			buttonState = 0;
 8000534:	4b18      	ldr	r3, [pc, #96]	@ (8000598 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET) // Falling edge
		{
			HAL_TIM_Base_Start_IT(&htim21);
		}
	}
}
 800053a:	e029      	b.n	8000590 <HAL_GPIO_EXTI_Callback+0xa8>
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET) // Falling edge
 800053c:	2380      	movs	r3, #128	@ 0x80
 800053e:	021a      	lsls	r2, r3, #8
 8000540:	23a0      	movs	r3, #160	@ 0xa0
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	0011      	movs	r1, r2
 8000546:	0018      	movs	r0, r3
 8000548:	f002 f9a0 	bl	800288c <HAL_GPIO_ReadPin>
 800054c:	1e03      	subs	r3, r0, #0
 800054e:	d11f      	bne.n	8000590 <HAL_GPIO_EXTI_Callback+0xa8>
			buttonState = 1;
 8000550:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
			holdTime = HAL_GetTick(); // Record button hold time
 8000556:	f001 faaf 	bl	8001ab8 <HAL_GetTick>
 800055a:	0002      	movs	r2, r0
 800055c:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <HAL_GPIO_EXTI_Callback+0xb4>)
 800055e:	601a      	str	r2, [r3, #0]
			wupFlag = 1;
 8000560:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
}
 8000566:	e013      	b.n	8000590 <HAL_GPIO_EXTI_Callback+0xa8>
	else if(GPIO_Pin == GPIO_PIN_9)
 8000568:	1dbb      	adds	r3, r7, #6
 800056a:	881a      	ldrh	r2, [r3, #0]
 800056c:	2380      	movs	r3, #128	@ 0x80
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	429a      	cmp	r2, r3
 8000572:	d10d      	bne.n	8000590 <HAL_GPIO_EXTI_Callback+0xa8>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET) // Falling edge
 8000574:	1dbb      	adds	r3, r7, #6
 8000576:	881a      	ldrh	r2, [r3, #0]
 8000578:	23a0      	movs	r3, #160	@ 0xa0
 800057a:	05db      	lsls	r3, r3, #23
 800057c:	0011      	movs	r1, r2
 800057e:	0018      	movs	r0, r3
 8000580:	f002 f984 	bl	800288c <HAL_GPIO_ReadPin>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d103      	bne.n	8000590 <HAL_GPIO_EXTI_Callback+0xa8>
			HAL_TIM_Base_Start_IT(&htim21);
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800058a:	0018      	movs	r0, r3
 800058c:	f004 f9cc 	bl	8004928 <HAL_TIM_Base_Start_IT>
}
 8000590:	46c0      	nop			@ (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200000b1 	.word	0x200000b1
 800059c:	200000b4 	.word	0x200000b4
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000238 	.word	0x20000238

080005a8 <HAL_RTC_AlarmAEventCallback>:

// Callback function for RTC Alarm A event
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 80005b0:	f000 fc92 	bl	8000ed8 <SystemClock_Config>
	HAL_ResumeTick();
 80005b4:	f001 fabc 	bl	8001b30 <HAL_ResumeTick>
	wupFlag = 1;
 80005b8:	4b04      	ldr	r3, [pc, #16]	@ (80005cc <HAL_RTC_AlarmAEventCallback+0x24>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	rtcFlag = 1;
 80005be:	4b04      	ldr	r3, [pc, #16]	@ (80005d0 <HAL_RTC_AlarmAEventCallback+0x28>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
}
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b002      	add	sp, #8
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000000 	.word	0x20000000
 80005d0:	200000ac 	.word	0x200000ac

080005d4 <HAL_TIM_PeriodElapsedCallback>:

// Callback function for TIM21 period elapsed interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if(htim == &htim21)
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d110      	bne.n	8000606 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET)
 80005e4:	2380      	movs	r3, #128	@ 0x80
 80005e6:	009a      	lsls	r2, r3, #2
 80005e8:	23a0      	movs	r3, #160	@ 0xa0
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	0011      	movs	r1, r2
 80005ee:	0018      	movs	r0, r3
 80005f0:	f002 f94c 	bl	800288c <HAL_GPIO_ReadPin>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d102      	bne.n	80005fe <HAL_TIM_PeriodElapsedCallback+0x2a>
		{
			floodFlag = 1; // Set flood flag
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
		}
		HAL_TIM_Base_Stop_IT(&htim21);
 80005fe:	4b04      	ldr	r3, [pc, #16]	@ (8000610 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000600:	0018      	movs	r0, r3
 8000602:	f004 f9d5 	bl	80049b0 <HAL_TIM_Base_Stop_IT>
	}
}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	20000238 	.word	0x20000238
 8000614:	200000b0 	.word	0x200000b0

08000618 <HAL_LPTIM_CompareMatchCallback>:
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8000620:	f000 fc5a 	bl	8000ed8 <SystemClock_Config>
	HAL_ResumeTick();
 8000624:	f001 fa84 	bl	8001b30 <HAL_ResumeTick>
	wupFlag = 1;
 8000628:	4b04      	ldr	r3, [pc, #16]	@ (800063c <HAL_LPTIM_CompareMatchCallback+0x24>)
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
	alert_flag = 1;
 800062e:	4b04      	ldr	r3, [pc, #16]	@ (8000640 <HAL_LPTIM_CompareMatchCallback+0x28>)
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
}
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b002      	add	sp, #8
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000000 	.word	0x20000000
 8000640:	200000ad 	.word	0x200000ad

08000644 <initSystem>:

void initSystem(SystemContext *ctx)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	ctx->currentState = STATE_INIT;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]

	RTC_ExitInitMode(&hrtc);
 8000652:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <initSystem+0x8c>)
 8000654:	0018      	movs	r0, r3
 8000656:	f004 f8b5 	bl	80047c4 <RTC_ExitInitMode>
	strcpy(message, "EFloodGuardLP(v3.5)\r\n");
 800065a:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <initSystem+0x90>)
 800065c:	4a1e      	ldr	r2, [pc, #120]	@ (80006d8 <initSystem+0x94>)
 800065e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000660:	c313      	stmia	r3!, {r0, r1, r4}
 8000662:	ca03      	ldmia	r2!, {r0, r1}
 8000664:	c303      	stmia	r3!, {r0, r1}
 8000666:	8812      	ldrh	r2, [r2, #0]
 8000668:	801a      	strh	r2, [r3, #0]
	console(message);
 800066a:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <initSystem+0x90>)
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fbf7 	bl	8000e60 <console>

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 8000672:	2380      	movs	r3, #128	@ 0x80
 8000674:	009a      	lsls	r2, r3, #2
 8000676:	23a0      	movs	r3, #160	@ 0xa0
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	0011      	movs	r1, r2
 800067c:	0018      	movs	r0, r3
 800067e:	f002 f905 	bl	800288c <HAL_GPIO_ReadPin>
 8000682:	0003      	movs	r3, r0
 8000684:	2b01      	cmp	r3, #1
 8000686:	d10b      	bne.n	80006a0 <initSystem+0x5c>
	{
		floodFlag = 0;
 8000688:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <initSystem+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 800068e:	2064      	movs	r0, #100	@ 0x64
 8000690:	f001 fa1c 	bl	8001acc <HAL_Delay>
		openValve();
 8000694:	f000 f946 	bl	8000924 <openValve>
		ctx->currentState = STATE_NORMAL;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
 800069e:	e010      	b.n	80006c2 <initSystem+0x7e>
	}
	else
	{
		floodFlag = 1;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <initSystem+0x98>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80006a6:	2064      	movs	r0, #100	@ 0x64
 80006a8:	f001 fa10 	bl	8001acc <HAL_Delay>
		closeValve();
 80006ac:	f000 f96e 	bl	800098c <closeValve>
		RTC_AlarmConfig(second[1]);
 80006b0:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <initSystem+0x9c>)
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fafe 	bl	8000cb8 <RTC_AlarmConfig>
		ctx->currentState = STATE_FLOOD;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2202      	movs	r2, #2
 80006c0:	701a      	strb	r2, [r3, #0]
	}
	alert();
 80006c2:	f000 fb5b 	bl	8000d7c <alert>
}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b003      	add	sp, #12
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	200001d4 	.word	0x200001d4
 80006d4:	20000084 	.word	0x20000084
 80006d8:	08006a20 	.word	0x08006a20
 80006dc:	200000b0 	.word	0x200000b0
 80006e0:	20000004 	.word	0x20000004

080006e4 <processState>:

void processState(SystemContext *ctx)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	uint32_t now = HAL_GetTick();
 80006ec:	f001 f9e4 	bl	8001ab8 <HAL_GetTick>
 80006f0:	0003      	movs	r3, r0
 80006f2:	60fb      	str	r3, [r7, #12]
	switch(ctx->currentState)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	d100      	bne.n	80006fe <processState+0x1a>
 80006fc:	e0ae      	b.n	800085c <processState+0x178>
 80006fe:	dd00      	ble.n	8000702 <processState+0x1e>
 8000700:	e0e0      	b.n	80008c4 <processState+0x1e0>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d002      	beq.n	800070c <processState+0x28>
 8000706:	2b02      	cmp	r3, #2
 8000708:	d063      	beq.n	80007d2 <processState+0xee>
 800070a:	e0db      	b.n	80008c4 <processState+0x1e0>
	{
	case STATE_NORMAL:

		if((floodFlag && Low_battery != 2) || (valve_open == 0 && Low_battery == 0))
 800070c:	4b72      	ldr	r3, [pc, #456]	@ (80008d8 <processState+0x1f4>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d004      	beq.n	8000720 <processState+0x3c>
 8000716:	4b71      	ldr	r3, [pc, #452]	@ (80008dc <processState+0x1f8>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b02      	cmp	r3, #2
 800071e:	d109      	bne.n	8000734 <processState+0x50>
 8000720:	4b6f      	ldr	r3, [pc, #444]	@ (80008e0 <processState+0x1fc>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d12c      	bne.n	8000784 <processState+0xa0>
 800072a:	4b6c      	ldr	r3, [pc, #432]	@ (80008dc <processState+0x1f8>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d127      	bne.n	8000784 <processState+0xa0>
		{
			if((now - holdTime >= 1000) && buttonState)
 8000734:	4b6b      	ldr	r3, [pc, #428]	@ (80008e4 <processState+0x200>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	68fa      	ldr	r2, [r7, #12]
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	23fa      	movs	r3, #250	@ 0xfa
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	429a      	cmp	r2, r3
 8000742:	d31f      	bcc.n	8000784 <processState+0xa0>
 8000744:	4b68      	ldr	r3, [pc, #416]	@ (80008e8 <processState+0x204>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d01a      	beq.n	8000784 <processState+0xa0>
			{
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 800074e:	2380      	movs	r3, #128	@ 0x80
 8000750:	009a      	lsls	r2, r3, #2
 8000752:	23a0      	movs	r3, #160	@ 0xa0
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f002 f897 	bl	800288c <HAL_GPIO_ReadPin>
 800075e:	0003      	movs	r3, r0
 8000760:	2b01      	cmp	r3, #1
 8000762:	d10d      	bne.n	8000780 <processState+0x9c>
				{
					strcpy(message, "Reset\r\n");
 8000764:	4b61      	ldr	r3, [pc, #388]	@ (80008ec <processState+0x208>)
 8000766:	4a62      	ldr	r2, [pc, #392]	@ (80008f0 <processState+0x20c>)
 8000768:	ca03      	ldmia	r2!, {r0, r1}
 800076a:	c303      	stmia	r3!, {r0, r1}
					console(message);
 800076c:	4b5f      	ldr	r3, [pc, #380]	@ (80008ec <processState+0x208>)
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fb76 	bl	8000e60 <console>
					holdTime = 0;
 8000774:	4b5b      	ldr	r3, [pc, #364]	@ (80008e4 <processState+0x200>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
					resetFloodEvent();
 800077a:	f000 f93b 	bl	80009f4 <resetFloodEvent>
 800077e:	e001      	b.n	8000784 <processState+0xa0>
				}
				else
				{
					removeFloodAlert();
 8000780:	f000 fb24 	bl	8000dcc <removeFloodAlert>
				}
			}
		}
		if (floodFlag)
 8000784:	4b54      	ldr	r3, [pc, #336]	@ (80008d8 <processState+0x1f4>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d003      	beq.n	8000796 <processState+0xb2>
		{
			ctx->currentState = STATE_FLOOD;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2202      	movs	r2, #2
 8000792:	701a      	strb	r2, [r3, #0]
		}
		else if(wupFlag)
		{
			ctx->currentState = STATE_SLEEP;
		}
		break;
 8000794:	e09a      	b.n	80008cc <processState+0x1e8>
		else if(rtcFlag)
 8000796:	4b57      	ldr	r3, [pc, #348]	@ (80008f4 <processState+0x210>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00e      	beq.n	80007be <processState+0xda>
			ctx->currentState = STATE_NORMAL ;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]
			strcpy(message, "RTC Event\r\n");
 80007a6:	4b51      	ldr	r3, [pc, #324]	@ (80008ec <processState+0x208>)
 80007a8:	4a53      	ldr	r2, [pc, #332]	@ (80008f8 <processState+0x214>)
 80007aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007ac:	c313      	stmia	r3!, {r0, r1, r4}
			console(message);
 80007ae:	4b4f      	ldr	r3, [pc, #316]	@ (80008ec <processState+0x208>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fb55 	bl	8000e60 <console>
			rtcFlag = 0;
 80007b6:	4b4f      	ldr	r3, [pc, #316]	@ (80008f4 <processState+0x210>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
		break;
 80007bc:	e086      	b.n	80008cc <processState+0x1e8>
		else if(wupFlag)
 80007be:	4b4f      	ldr	r3, [pc, #316]	@ (80008fc <processState+0x218>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d100      	bne.n	80007ca <processState+0xe6>
 80007c8:	e080      	b.n	80008cc <processState+0x1e8>
			ctx->currentState = STATE_SLEEP;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2203      	movs	r2, #3
 80007ce:	701a      	strb	r2, [r3, #0]
		break;
 80007d0:	e07c      	b.n	80008cc <processState+0x1e8>

	case STATE_FLOOD:
		if(valve_open == 1)
 80007d2:	4b43      	ldr	r3, [pc, #268]	@ (80008e0 <processState+0x1fc>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d120      	bne.n	800081e <processState+0x13a>
		{
			HAL_LPTIM_TimeOut_Start_IT(&hlptim1, 10239, 10239);
 80007dc:	4a48      	ldr	r2, [pc, #288]	@ (8000900 <processState+0x21c>)
 80007de:	4948      	ldr	r1, [pc, #288]	@ (8000900 <processState+0x21c>)
 80007e0:	4b48      	ldr	r3, [pc, #288]	@ (8000904 <processState+0x220>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f002 f934 	bl	8002a50 <HAL_LPTIM_TimeOut_Start_IT>
			strcpy(message, "Closing Valve\r\n");
 80007e8:	4b40      	ldr	r3, [pc, #256]	@ (80008ec <processState+0x208>)
 80007ea:	4a47      	ldr	r2, [pc, #284]	@ (8000908 <processState+0x224>)
 80007ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007ee:	c313      	stmia	r3!, {r0, r1, r4}
 80007f0:	6812      	ldr	r2, [r2, #0]
 80007f2:	601a      	str	r2, [r3, #0]
			console(message);
 80007f4:	4b3d      	ldr	r3, [pc, #244]	@ (80008ec <processState+0x208>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 fb32 	bl	8000e60 <console>
			closeValve();
 80007fc:	f000 f8c6 	bl	800098c <closeValve>
			strcpy(message, "Valve closed\r\n");
 8000800:	4b3a      	ldr	r3, [pc, #232]	@ (80008ec <processState+0x208>)
 8000802:	4a42      	ldr	r2, [pc, #264]	@ (800090c <processState+0x228>)
 8000804:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000806:	c313      	stmia	r3!, {r0, r1, r4}
 8000808:	8811      	ldrh	r1, [r2, #0]
 800080a:	8019      	strh	r1, [r3, #0]
 800080c:	7892      	ldrb	r2, [r2, #2]
 800080e:	709a      	strb	r2, [r3, #2]
			console(message);
 8000810:	4b36      	ldr	r3, [pc, #216]	@ (80008ec <processState+0x208>)
 8000812:	0018      	movs	r0, r3
 8000814:	f000 fb24 	bl	8000e60 <console>
			alert_flag = 1;
 8000818:	4b3d      	ldr	r3, [pc, #244]	@ (8000910 <processState+0x22c>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
		}
		if(alert_flag == 1)
 800081e:	4b3c      	ldr	r3, [pc, #240]	@ (8000910 <processState+0x22c>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b01      	cmp	r3, #1
 8000826:	d10c      	bne.n	8000842 <processState+0x15e>
		{
			strcpy(message, "Flood\r\n");
 8000828:	4b30      	ldr	r3, [pc, #192]	@ (80008ec <processState+0x208>)
 800082a:	4a3a      	ldr	r2, [pc, #232]	@ (8000914 <processState+0x230>)
 800082c:	ca03      	ldmia	r2!, {r0, r1}
 800082e:	c303      	stmia	r3!, {r0, r1}
			console(message);
 8000830:	4b2e      	ldr	r3, [pc, #184]	@ (80008ec <processState+0x208>)
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fb14 	bl	8000e60 <console>
			alert();
 8000838:	f000 faa0 	bl	8000d7c <alert>
			alert_flag = 0;
 800083c:	4b34      	ldr	r3, [pc, #208]	@ (8000910 <processState+0x22c>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
		}
		if(!buttonState)
 8000842:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <processState+0x204>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d103      	bne.n	8000854 <processState+0x170>
		{
			ctx->currentState = STATE_SLEEP;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2203      	movs	r2, #3
 8000850:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			ctx->currentState = STATE_NORMAL;
		}
		break;
 8000852:	e03c      	b.n	80008ce <processState+0x1ea>
			ctx->currentState = STATE_NORMAL;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
		break;
 800085a:	e038      	b.n	80008ce <processState+0x1ea>

	case STATE_SLEEP:
		monitorBattery();
 800085c:	f000 f992 	bl	8000b84 <monitorBattery>
		sprintf(message, "Low battery = %d, Flood Flag = %d\r\n", Low_battery, floodFlag);
 8000860:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <processState+0x1f8>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	001a      	movs	r2, r3
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <processState+0x1f4>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	492a      	ldr	r1, [pc, #168]	@ (8000918 <processState+0x234>)
 8000870:	481e      	ldr	r0, [pc, #120]	@ (80008ec <processState+0x208>)
 8000872:	f005 fc2b 	bl	80060cc <siprintf>
		console(message);
 8000876:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <processState+0x208>)
 8000878:	0018      	movs	r0, r3
 800087a:	f000 faf1 	bl	8000e60 <console>
		wupFlag = 0;
 800087e:	4b1f      	ldr	r3, [pc, #124]	@ (80008fc <processState+0x218>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
		strcpy(message, "Entering Sleep.\r\n");
 8000884:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <processState+0x208>)
 8000886:	4a25      	ldr	r2, [pc, #148]	@ (800091c <processState+0x238>)
 8000888:	ca13      	ldmia	r2!, {r0, r1, r4}
 800088a:	c313      	stmia	r3!, {r0, r1, r4}
 800088c:	6811      	ldr	r1, [r2, #0]
 800088e:	6019      	str	r1, [r3, #0]
 8000890:	8892      	ldrh	r2, [r2, #4]
 8000892:	809a      	strh	r2, [r3, #4]
		console(message);
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <processState+0x208>)
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fae2 	bl	8000e60 <console>
		HAL_SuspendTick();
 800089c:	f001 f93a 	bl	8001b14 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80008a0:	2101      	movs	r1, #1
 80008a2:	2001      	movs	r0, #1
 80008a4:	f002 fb70 	bl	8002f88 <HAL_PWR_EnterSTOPMode>
		strcpy(message, "After Sleep\r\n");
 80008a8:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <processState+0x208>)
 80008aa:	4a1d      	ldr	r2, [pc, #116]	@ (8000920 <processState+0x23c>)
 80008ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008ae:	c313      	stmia	r3!, {r0, r1, r4}
 80008b0:	8812      	ldrh	r2, [r2, #0]
 80008b2:	801a      	strh	r2, [r3, #0]
		console(message);
 80008b4:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <processState+0x208>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fad2 	bl	8000e60 <console>
		ctx->currentState = STATE_NORMAL;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
		break;
 80008c2:	e004      	b.n	80008ce <processState+0x1ea>

	default:
		ctx->currentState = STATE_NORMAL;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]
		break;
 80008ca:	e000      	b.n	80008ce <processState+0x1ea>
		break;
 80008cc:	46c0      	nop			@ (mov r8, r8)
	}
}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b005      	add	sp, #20
 80008d4:	bd90      	pop	{r4, r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	200000b0 	.word	0x200000b0
 80008dc:	200000ae 	.word	0x200000ae
 80008e0:	200000af 	.word	0x200000af
 80008e4:	200000b4 	.word	0x200000b4
 80008e8:	200000b1 	.word	0x200000b1
 80008ec:	20000084 	.word	0x20000084
 80008f0:	08006a38 	.word	0x08006a38
 80008f4:	200000ac 	.word	0x200000ac
 80008f8:	08006a40 	.word	0x08006a40
 80008fc:	20000000 	.word	0x20000000
 8000900:	000027ff 	.word	0x000027ff
 8000904:	2000011c 	.word	0x2000011c
 8000908:	08006a4c 	.word	0x08006a4c
 800090c:	08006a5c 	.word	0x08006a5c
 8000910:	200000ad 	.word	0x200000ad
 8000914:	08006a6c 	.word	0x08006a6c
 8000918:	08006a74 	.word	0x08006a74
 800091c:	08006a98 	.word	0x08006a98
 8000920:	08006aac 	.word	0x08006aac

08000924 <openValve>:
// Function to open the valve
void openValve(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // Activate valve
 8000928:	23a0      	movs	r3, #160	@ 0xa0
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	2201      	movs	r2, #1
 800092e:	2180      	movs	r1, #128	@ 0x80
 8000930:	0018      	movs	r0, r3
 8000932:	f001 ffc8 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Start PWM signal for valve control
 8000936:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <openValve+0x60>)
 8000938:	2100      	movs	r1, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f004 f89e 	bl	8004a7c <HAL_TIM_PWM_Start>
	HAL_Delay(50);
 8000940:	2032      	movs	r0, #50	@ 0x32
 8000942:	f001 f8c3 	bl	8001acc <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, valveOpenuS); // Set PWM duty cycle for valve closing
 8000946:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <openValve+0x60>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	22e1      	movs	r2, #225	@ 0xe1
 800094c:	0092      	lsls	r2, r2, #2
 800094e:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(500);
 8000950:	23fa      	movs	r3, #250	@ 0xfa
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	0018      	movs	r0, r3
 8000956:	f001 f8b9 	bl	8001acc <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); // Stop PWM signal
 800095a:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <openValve+0x60>)
 800095c:	2100      	movs	r1, #0
 800095e:	0018      	movs	r0, r3
 8000960:	f004 f910 	bl	8004b84 <HAL_TIM_PWM_Stop>
	HAL_Delay(50);
 8000964:	2032      	movs	r0, #50	@ 0x32
 8000966:	f001 f8b1 	bl	8001acc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Deactivate valve
 800096a:	23a0      	movs	r3, #160	@ 0xa0
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2200      	movs	r2, #0
 8000970:	2180      	movs	r1, #128	@ 0x80
 8000972:	0018      	movs	r0, r3
 8000974:	f001 ffa7 	bl	80028c6 <HAL_GPIO_WritePin>
	valve_open = 1;
 8000978:	4b03      	ldr	r3, [pc, #12]	@ (8000988 <openValve+0x64>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200001f8 	.word	0x200001f8
 8000988:	200000af 	.word	0x200000af

0800098c <closeValve>:

// Function to close the valve
void closeValve(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // Activate valve
 8000990:	23a0      	movs	r3, #160	@ 0xa0
 8000992:	05db      	lsls	r3, r3, #23
 8000994:	2201      	movs	r2, #1
 8000996:	2180      	movs	r1, #128	@ 0x80
 8000998:	0018      	movs	r0, r3
 800099a:	f001 ff94 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Start PWM signal for valve control
 800099e:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <closeValve+0x60>)
 80009a0:	2100      	movs	r1, #0
 80009a2:	0018      	movs	r0, r3
 80009a4:	f004 f86a 	bl	8004a7c <HAL_TIM_PWM_Start>
	HAL_Delay(50);
 80009a8:	2032      	movs	r0, #50	@ 0x32
 80009aa:	f001 f88f 	bl	8001acc <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, valveCloseuS); // Set PWM duty cycle for valve closing
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <closeValve+0x60>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	22e1      	movs	r2, #225	@ 0xe1
 80009b4:	00d2      	lsls	r2, r2, #3
 80009b6:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(500);
 80009b8:	23fa      	movs	r3, #250	@ 0xfa
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	0018      	movs	r0, r3
 80009be:	f001 f885 	bl	8001acc <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); // Stop PWM signal
 80009c2:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <closeValve+0x60>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	0018      	movs	r0, r3
 80009c8:	f004 f8dc 	bl	8004b84 <HAL_TIM_PWM_Stop>
	HAL_Delay(50);
 80009cc:	2032      	movs	r0, #50	@ 0x32
 80009ce:	f001 f87d 	bl	8001acc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Deactivate valve
 80009d2:	23a0      	movs	r3, #160	@ 0xa0
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	2200      	movs	r2, #0
 80009d8:	2180      	movs	r1, #128	@ 0x80
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 ff73 	bl	80028c6 <HAL_GPIO_WritePin>
	valve_open = 0;
 80009e0:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <closeValve+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200001f8 	.word	0x200001f8
 80009f0:	200000af 	.word	0x200000af

080009f4 <resetFloodEvent>:

// Function to reset flood event
void resetFloodEvent(void)
{
 80009f4:	b5b0      	push	{r4, r5, r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	// Check if the button is pressed and the valve is open
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 80009f8:	2380      	movs	r3, #128	@ 0x80
 80009fa:	009a      	lsls	r2, r3, #2
 80009fc:	23a0      	movs	r3, #160	@ 0xa0
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	0011      	movs	r1, r2
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 ff42 	bl	800288c <HAL_GPIO_ReadPin>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d117      	bne.n	8000a3e <resetFloodEvent+0x4a>
	{
		if(valve_open == 0)
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <resetFloodEvent+0x50>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d101      	bne.n	8000a1c <resetFloodEvent+0x28>
		{
			openValve(); // Open the valve
 8000a18:	f7ff ff84 	bl	8000924 <openValve>
		}
		strcpy(message, "Valve open\r\n");
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <resetFloodEvent+0x54>)
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a4c <resetFloodEvent+0x58>)
 8000a20:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a22:	c313      	stmia	r3!, {r0, r1, r4}
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	701a      	strb	r2, [r3, #0]
		console(message);
 8000a28:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <resetFloodEvent+0x54>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 fa18 	bl	8000e60 <console>
		floodFlag = 0; // Clear the flood flag
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <resetFloodEvent+0x5c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_TimeOut_Stop_IT(&hlptim1);
 8000a36:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <resetFloodEvent+0x60>)
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f002 f87f 	bl	8002b3c <HAL_LPTIM_TimeOut_Stop_IT>
	}
}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bdb0      	pop	{r4, r5, r7, pc}
 8000a44:	200000af 	.word	0x200000af
 8000a48:	20000084 	.word	0x20000084
 8000a4c:	08006abc 	.word	0x08006abc
 8000a50:	200000b0 	.word	0x200000b0
 8000a54:	2000011c 	.word	0x2000011c

08000a58 <measureBattery>:

// Function to measure battery voltage
uint16_t measureBattery(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
    // 1. Enable battery voltage measurement (once)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // Power the sensing circuit
 8000a5e:	2380      	movs	r3, #128	@ 0x80
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	4842      	ldr	r0, [pc, #264]	@ (8000b6c <measureBattery+0x114>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	0019      	movs	r1, r3
 8000a68:	f001 ff2d 	bl	80028c6 <HAL_GPIO_WritePin>

    uint32_t sum = 0;              // Accumulator for multiple ADC readings
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
    const int NUM_SAMPLES = 5;     // Number of ADC samples to average
 8000a70:	2305      	movs	r3, #5
 8000a72:	607b      	str	r3, [r7, #4]

    // 2. Read the ADC multiple times
    for (int i = 0; i < NUM_SAMPLES; i++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	e01c      	b.n	8000ab4 <measureBattery+0x5c>
    {
        // Start ADC conversion
        HAL_ADC_Start(&hadc);
 8000a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b70 <measureBattery+0x118>)
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f001 f9d9 	bl	8001e34 <HAL_ADC_Start>
        // Wait for ADC conversion to complete
        HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000a82:	2301      	movs	r3, #1
 8000a84:	425a      	negs	r2, r3
 8000a86:	4b3a      	ldr	r3, [pc, #232]	@ (8000b70 <measureBattery+0x118>)
 8000a88:	0011      	movs	r1, r2
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 fa66 	bl	8001f5c <HAL_ADC_PollForConversion>
        // Add the reading to sum
        sum += HAL_ADC_GetValue(&hadc);
 8000a90:	4b37      	ldr	r3, [pc, #220]	@ (8000b70 <measureBattery+0x118>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f001 fafe 	bl	8002094 <HAL_ADC_GetValue>
 8000a98:	0002      	movs	r2, r0
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	189b      	adds	r3, r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
        // Stop ADC
        HAL_ADC_Stop(&hadc);
 8000aa0:	4b33      	ldr	r3, [pc, #204]	@ (8000b70 <measureBattery+0x118>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f001 fa1a 	bl	8001edc <HAL_ADC_Stop>

        // Brief delay between samples (adjust if needed)
        HAL_Delay(5);
 8000aa8:	2005      	movs	r0, #5
 8000aaa:	f001 f80f 	bl	8001acc <HAL_Delay>
    for (int i = 0; i < NUM_SAMPLES; i++)
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68ba      	ldr	r2, [r7, #8]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dbde      	blt.n	8000a7a <measureBattery+0x22>
    }

    // 3. Disable battery voltage measurement
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000abc:	2380      	movs	r3, #128	@ 0x80
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	482a      	ldr	r0, [pc, #168]	@ (8000b6c <measureBattery+0x114>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	f001 fefe 	bl	80028c6 <HAL_GPIO_WritePin>

    // 4. Calculate the average reading
    uint16_t analogbatt = (uint16_t)(sum / NUM_SAMPLES);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	0019      	movs	r1, r3
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f7ff fb2c 	bl	800012c <__udivsi3>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	1cbb      	adds	r3, r7, #2
 8000ada:	801a      	strh	r2, [r3, #0]

    // 5. Apply hysteresis logic (thresholds defined in app_main.h)
    switch (Low_battery)
 8000adc:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <measureBattery+0x11c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d02a      	beq.n	8000b3c <measureBattery+0xe4>
 8000ae6:	dc32      	bgt.n	8000b4e <measureBattery+0xf6>
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d002      	beq.n	8000af2 <measureBattery+0x9a>
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d013      	beq.n	8000b18 <measureBattery+0xc0>
 8000af0:	e02d      	b.n	8000b4e <measureBattery+0xf6>
    {
        case 0: // Currently NORMAL
            if (analogbatt < THRESH_NORMAL_DOWN)
 8000af2:	1cbb      	adds	r3, r7, #2
 8000af4:	881a      	ldrh	r2, [r3, #0]
 8000af6:	23d2      	movs	r3, #210	@ 0xd2
 8000af8:	011b      	lsls	r3, r3, #4
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d22b      	bcs.n	8000b56 <measureBattery+0xfe>
            {
                // If below 3360, decide if Low or Critical
                if (analogbatt < THRESH_LOW_DOWN)
 8000afe:	1cbb      	adds	r3, r7, #2
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	4a1d      	ldr	r2, [pc, #116]	@ (8000b78 <measureBattery+0x120>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d803      	bhi.n	8000b10 <measureBattery+0xb8>
                {
                    Low_battery = 2; // Critical
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <measureBattery+0x11c>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	701a      	strb	r2, [r3, #0]
                {
                    Low_battery = 1; // Low
                }
            }
            // else remain Normal
            break;
 8000b0e:	e022      	b.n	8000b56 <measureBattery+0xfe>
                    Low_battery = 1; // Low
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <measureBattery+0x11c>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
            break;
 8000b16:	e01e      	b.n	8000b56 <measureBattery+0xfe>

        case 1: // Currently LOW
            if (analogbatt < THRESH_LOW_DOWN)
 8000b18:	1cbb      	adds	r3, r7, #2
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	4a16      	ldr	r2, [pc, #88]	@ (8000b78 <measureBattery+0x120>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d803      	bhi.n	8000b2a <measureBattery+0xd2>
            {
                Low_battery = 2; // Drop to Critical
 8000b22:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <measureBattery+0x11c>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	701a      	strb	r2, [r3, #0]
            else if (analogbatt > THRESH_NORMAL_UP)
            {
                Low_battery = 0; // Go back to Normal
            }
            // else remain Low
            break;
 8000b28:	e017      	b.n	8000b5a <measureBattery+0x102>
            else if (analogbatt > THRESH_NORMAL_UP)
 8000b2a:	1cbb      	adds	r3, r7, #2
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	4a13      	ldr	r2, [pc, #76]	@ (8000b7c <measureBattery+0x124>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d912      	bls.n	8000b5a <measureBattery+0x102>
                Low_battery = 0; // Go back to Normal
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <measureBattery+0x11c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
            break;
 8000b3a:	e00e      	b.n	8000b5a <measureBattery+0x102>

        case 2: // Currently CRITICAL
            // Must rise above THRESH_LOW_UP to go back to LOW
            if (analogbatt >= THRESH_LOW_UP)
 8000b3c:	1cbb      	adds	r3, r7, #2
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	4a0f      	ldr	r2, [pc, #60]	@ (8000b80 <measureBattery+0x128>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d90b      	bls.n	8000b5e <measureBattery+0x106>
            {
                Low_battery = 1; // From Critical up to Low
 8000b46:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <measureBattery+0x11c>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
            }
            // No direct jump to Normal from Critical
            break;
 8000b4c:	e007      	b.n	8000b5e <measureBattery+0x106>

        default:
            // Fallback in case Low_battery has an invalid value
            Low_battery = 0;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <measureBattery+0x11c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
            break;
 8000b54:	e004      	b.n	8000b60 <measureBattery+0x108>
            break;
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	e002      	b.n	8000b60 <measureBattery+0x108>
            break;
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	e000      	b.n	8000b60 <measureBattery+0x108>
            break;
 8000b5e:	46c0      	nop			@ (mov r8, r8)
    }

    // 6. Return the averaged ADC reading (for logging/debugging)
    return analogbatt;
 8000b60:	1cbb      	adds	r3, r7, #2
 8000b62:	881b      	ldrh	r3, [r3, #0]
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b004      	add	sp, #16
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	50000400 	.word	0x50000400
 8000b70:	200000c0 	.word	0x200000c0
 8000b74:	200000ae 	.word	0x200000ae
 8000b78:	00000c89 	.word	0x00000c89
 8000b7c:	00000d34 	.word	0x00000d34
 8000b80:	00000c98 	.word	0x00000c98

08000b84 <monitorBattery>:
// Function to monitor battery voltage
void monitorBattery(void)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
	uint16_t vBatt = measureBattery(); 						// Measure battery voltage
 8000b8a:	1dbc      	adds	r4, r7, #6
 8000b8c:	f7ff ff64 	bl	8000a58 <measureBattery>
 8000b90:	0003      	movs	r3, r0
 8000b92:	8023      	strh	r3, [r4, #0]
	if(Low_battery == 1)
 8000b94:	4b2c      	ldr	r3, [pc, #176]	@ (8000c48 <monitorBattery+0xc4>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d112      	bne.n	8000bc4 <monitorBattery+0x40>
	{
		batteryAlarm();
 8000b9e:	f000 f865 	bl	8000c6c <batteryAlarm>
		RTC_AlarmConfig(second[0]);
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c4c <monitorBattery+0xc8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 f885 	bl	8000cb8 <RTC_AlarmConfig>
		strcpy(message, "Battery low\r\n");
 8000bae:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <monitorBattery+0xcc>)
 8000bb0:	4a28      	ldr	r2, [pc, #160]	@ (8000c54 <monitorBattery+0xd0>)
 8000bb2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000bb4:	c313      	stmia	r3!, {r0, r1, r4}
 8000bb6:	8812      	ldrh	r2, [r2, #0]
 8000bb8:	801a      	strh	r2, [r3, #0]
		console(message);
 8000bba:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <monitorBattery+0xcc>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 f94f 	bl	8000e60 <console>
 8000bc2:	e032      	b.n	8000c2a <monitorBattery+0xa6>
	}
	else if(Low_battery == 2)
 8000bc4:	4b20      	ldr	r3, [pc, #128]	@ (8000c48 <monitorBattery+0xc4>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d12d      	bne.n	8000c2a <monitorBattery+0xa6>
	{
		batteryAlarm();
 8000bce:	f000 f84d 	bl	8000c6c <batteryAlarm>
		if(item>=6)
 8000bd2:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <monitorBattery+0xd4>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b05      	cmp	r3, #5
 8000bda:	d902      	bls.n	8000be2 <monitorBattery+0x5e>
		{
			item = 0;
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c58 <monitorBattery+0xd4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
		}
		RTC_AlarmConfig(second[item++]);
 8000be2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c58 <monitorBattery+0xd4>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	1c5a      	adds	r2, r3, #1
 8000bea:	b2d1      	uxtb	r1, r2
 8000bec:	4a1a      	ldr	r2, [pc, #104]	@ (8000c58 <monitorBattery+0xd4>)
 8000bee:	7011      	strb	r1, [r2, #0]
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <monitorBattery+0xc8>)
 8000bf4:	5c9b      	ldrb	r3, [r3, r2]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f000 f85d 	bl	8000cb8 <RTC_AlarmConfig>
		if (valve_open == 1)
 8000bfe:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <monitorBattery+0xd8>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d104      	bne.n	8000c12 <monitorBattery+0x8e>
		{
			floodFlag = 1;
 8000c08:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <monitorBattery+0xdc>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
			closeValve();									// Close Valve if Critically low Battery
 8000c0e:	f7ff febd 	bl	800098c <closeValve>
		}
		strcpy(message, "Battery critically low\r\n");
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <monitorBattery+0xcc>)
 8000c14:	4a13      	ldr	r2, [pc, #76]	@ (8000c64 <monitorBattery+0xe0>)
 8000c16:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c18:	c313      	stmia	r3!, {r0, r1, r4}
 8000c1a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c1c:	c313      	stmia	r3!, {r0, r1, r4}
 8000c1e:	7812      	ldrb	r2, [r2, #0]
 8000c20:	701a      	strb	r2, [r3, #0]
		console(message);
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <monitorBattery+0xcc>)
 8000c24:	0018      	movs	r0, r3
 8000c26:	f000 f91b 	bl	8000e60 <console>
	}
	sprintf(message, "Battery Voltage: %d\r\n", vBatt); 	// Format battery voltage message
 8000c2a:	1dbb      	adds	r3, r7, #6
 8000c2c:	881a      	ldrh	r2, [r3, #0]
 8000c2e:	490e      	ldr	r1, [pc, #56]	@ (8000c68 <monitorBattery+0xe4>)
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <monitorBattery+0xcc>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f005 fa4a 	bl	80060cc <siprintf>
	console(message); 										// Send battery voltage message via UART
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <monitorBattery+0xcc>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 f910 	bl	8000e60 <console>
}
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b003      	add	sp, #12
 8000c46:	bd90      	pop	{r4, r7, pc}
 8000c48:	200000ae 	.word	0x200000ae
 8000c4c:	20000004 	.word	0x20000004
 8000c50:	20000084 	.word	0x20000084
 8000c54:	08006acc 	.word	0x08006acc
 8000c58:	200000b8 	.word	0x200000b8
 8000c5c:	200000af 	.word	0x200000af
 8000c60:	200000b0 	.word	0x200000b0
 8000c64:	08006adc 	.word	0x08006adc
 8000c68:	08006af8 	.word	0x08006af8

08000c6c <batteryAlarm>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); 	// Deactivate battery LED
}

// Function to activate battery Alarm
void batteryAlarm(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); 	// Activate battery LED
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <batteryAlarm+0x48>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	2180      	movs	r1, #128	@ 0x80
 8000c76:	0018      	movs	r0, r3
 8000c78:	f001 fe25 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); 	// Activate battery LED
 8000c7c:	2380      	movs	r3, #128	@ 0x80
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <batteryAlarm+0x48>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	0019      	movs	r1, r3
 8000c86:	f001 fe1e 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_Delay(500); 										// Delay for LED indication
 8000c8a:	23fa      	movs	r3, #250	@ 0xfa
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 ff1c 	bl	8001acc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); 	// Deactivate battery LED
 8000c94:	2380      	movs	r3, #128	@ 0x80
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4806      	ldr	r0, [pc, #24]	@ (8000cb4 <batteryAlarm+0x48>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	f001 fe12 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); 	// Deactivate battery LED
 8000ca2:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <batteryAlarm+0x48>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2180      	movs	r1, #128	@ 0x80
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f001 fe0c 	bl	80028c6 <HAL_GPIO_WritePin>
}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	50000400 	.word	0x50000400

08000cb8 <RTC_AlarmConfig>:

void RTC_AlarmConfig(uint8_t seconds)
{
 8000cb8:	b5b0      	push	{r4, r5, r7, lr}
 8000cba:	b092      	sub	sp, #72	@ 0x48
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	0002      	movs	r2, r0
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	701a      	strb	r2, [r3, #0]
	RTC_TimeTypeDef sTime;
	RTC_AlarmTypeDef sAlarm;             					// Declare RTC Alarm structure


	memset(&sAlarm, 0, sizeof(sAlarm));
 8000cc4:	2408      	movs	r4, #8
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2228      	movs	r2, #40	@ 0x28
 8000cca:	2100      	movs	r1, #0
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f005 fa1d 	bl	800610c <memset>
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000cd2:	2380      	movs	r3, #128	@ 0x80
 8000cd4:	005a      	lsls	r2, r3, #1
 8000cd6:	4b27      	ldr	r3, [pc, #156]	@ (8000d74 <RTC_AlarmConfig+0xbc>)
 8000cd8:	0011      	movs	r1, r2
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f003 fc16 	bl	800450c <HAL_RTC_DeactivateAlarm>

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000ce0:	2530      	movs	r5, #48	@ 0x30
 8000ce2:	1979      	adds	r1, r7, r5
 8000ce4:	4b23      	ldr	r3, [pc, #140]	@ (8000d74 <RTC_AlarmConfig+0xbc>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f003 f9bb 	bl	8004064 <HAL_RTC_GetTime>
	uint8_t curr_sec = sTime.Seconds + seconds;
 8000cee:	197b      	adds	r3, r7, r5
 8000cf0:	7899      	ldrb	r1, [r3, #2]
 8000cf2:	2047      	movs	r0, #71	@ 0x47
 8000cf4:	183b      	adds	r3, r7, r0
 8000cf6:	1dfa      	adds	r2, r7, #7
 8000cf8:	7812      	ldrb	r2, [r2, #0]
 8000cfa:	188a      	adds	r2, r1, r2
 8000cfc:	701a      	strb	r2, [r3, #0]

	sAlarm.AlarmTime.Hours = 0x0;
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	2200      	movs	r2, #0
 8000d08:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = curr_sec;
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	183a      	adds	r2, r7, r0
 8000d0e:	7812      	ldrb	r2, [r2, #0]
 8000d10:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d12:	0020      	movs	r0, r4
 8000d14:	183b      	adds	r3, r7, r0
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d1a:	183b      	adds	r3, r7, r0
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d20:	183b      	adds	r3, r7, r0
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000d26:	183b      	adds	r3, r7, r0
 8000d28:	4a13      	ldr	r2, [pc, #76]	@ (8000d78 <RTC_AlarmConfig+0xc0>)
 8000d2a:	615a      	str	r2, [r3, #20]
			|RTC_ALARMMASK_MINUTES;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d2c:	183b      	adds	r3, r7, r0
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d32:	183b      	adds	r3, r7, r0
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 8000d38:	183b      	adds	r3, r7, r0
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	5499      	strb	r1, [r3, r2]
	sAlarm.Alarm = RTC_ALARM_A;
 8000d40:	0001      	movs	r1, r0
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2280      	movs	r2, #128	@ 0x80
 8000d46:	0052      	lsls	r2, r2, #1
 8000d48:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD);
 8000d4a:	000c      	movs	r4, r1
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <RTC_AlarmConfig+0xbc>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	0018      	movs	r0, r3
 8000d54:	f003 fa78 	bl	8004248 <HAL_RTC_SetAlarm_IT>

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d58:	1939      	adds	r1, r7, r4
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <RTC_AlarmConfig+0xbc>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f003 fa72 	bl	8004248 <HAL_RTC_SetAlarm_IT>
 8000d64:	1e03      	subs	r3, r0, #0
 8000d66:	d001      	beq.n	8000d6c <RTC_AlarmConfig+0xb4>
	{
		Error_Handler();
 8000d68:	f000 fc06 	bl	8001578 <Error_Handler>
	}

}
 8000d6c:	46c0      	nop			@ (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b012      	add	sp, #72	@ 0x48
 8000d72:	bdb0      	pop	{r4, r5, r7, pc}
 8000d74:	200001d4 	.word	0x200001d4
 8000d78:	80808000 	.word	0x80808000

08000d7c <alert>:

// Function to activate buzzer and warning LED
void alert(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); 		// Activate buzzer
 8000d80:	2380      	movs	r3, #128	@ 0x80
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4810      	ldr	r0, [pc, #64]	@ (8000dc8 <alert+0x4c>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	0019      	movs	r1, r3
 8000d8a:	f001 fd9c 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); 		// Activate warning LED
 8000d8e:	2380      	movs	r3, #128	@ 0x80
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	480d      	ldr	r0, [pc, #52]	@ (8000dc8 <alert+0x4c>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	0019      	movs	r1, r3
 8000d98:	f001 fd95 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_Delay(1000);	 										// Delay for alert indication
 8000d9c:	23fa      	movs	r3, #250	@ 0xfa
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 fe93 	bl	8001acc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); 		// Deactivate buzzer
 8000da6:	2380      	movs	r3, #128	@ 0x80
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4807      	ldr	r0, [pc, #28]	@ (8000dc8 <alert+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	0019      	movs	r1, r3
 8000db0:	f001 fd89 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); 		// Deactivate warning LED
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4803      	ldr	r0, [pc, #12]	@ (8000dc8 <alert+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	f001 fd82 	bl	80028c6 <HAL_GPIO_WritePin>
}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	50000400 	.word	0x50000400

08000dcc <removeFloodAlert>:
void removeFloodAlert(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); 		// Activate buzzer
 8000dd0:	2380      	movs	r3, #128	@ 0x80
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4821      	ldr	r0, [pc, #132]	@ (8000e5c <removeFloodAlert+0x90>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	0019      	movs	r1, r3
 8000dda:	f001 fd74 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); 		// Activate warning LED
 8000dde:	2380      	movs	r3, #128	@ 0x80
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	481e      	ldr	r0, [pc, #120]	@ (8000e5c <removeFloodAlert+0x90>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	0019      	movs	r1, r3
 8000de8:	f001 fd6d 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_Delay(200);	 											// Delay for alert indication
 8000dec:	20c8      	movs	r0, #200	@ 0xc8
 8000dee:	f000 fe6d 	bl	8001acc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); 		// Deactivate buzzer
 8000df2:	2380      	movs	r3, #128	@ 0x80
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4819      	ldr	r0, [pc, #100]	@ (8000e5c <removeFloodAlert+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	f001 fd63 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); 		// Deactivate warning LED
 8000e00:	2380      	movs	r3, #128	@ 0x80
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4815      	ldr	r0, [pc, #84]	@ (8000e5c <removeFloodAlert+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	0019      	movs	r1, r3
 8000e0a:	f001 fd5c 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_Delay(500);												// Delay for alert indication
 8000e0e:	23fa      	movs	r3, #250	@ 0xfa
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 fe5a 	bl	8001acc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); 		// Activate buzzer
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	480f      	ldr	r0, [pc, #60]	@ (8000e5c <removeFloodAlert+0x90>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	0019      	movs	r1, r3
 8000e22:	f001 fd50 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); 		// Activate warning LED
 8000e26:	2380      	movs	r3, #128	@ 0x80
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <removeFloodAlert+0x90>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	0019      	movs	r1, r3
 8000e30:	f001 fd49 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_Delay(200);	 											// Delay for alert indication
 8000e34:	20c8      	movs	r0, #200	@ 0xc8
 8000e36:	f000 fe49 	bl	8001acc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); 		// Deactivate buzzer
 8000e3a:	2380      	movs	r3, #128	@ 0x80
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4807      	ldr	r0, [pc, #28]	@ (8000e5c <removeFloodAlert+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	0019      	movs	r1, r3
 8000e44:	f001 fd3f 	bl	80028c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); 		// Deactivate warning LED
 8000e48:	2380      	movs	r3, #128	@ 0x80
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4803      	ldr	r0, [pc, #12]	@ (8000e5c <removeFloodAlert+0x90>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	0019      	movs	r1, r3
 8000e52:	f001 fd38 	bl	80028c6 <HAL_GPIO_WritePin>
}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	50000400 	.word	0x50000400

08000e60 <console>:
// Function to transmit messages via UART
void console(char *log)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)log, strlen(log), HAL_MAX_DELAY); // Transmit message via UART
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff f94c 	bl	8000108 <strlen>
 8000e70:	0003      	movs	r3, r0
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	2301      	movs	r3, #1
 8000e76:	425b      	negs	r3, r3
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	480a      	ldr	r0, [pc, #40]	@ (8000ea4 <console+0x44>)
 8000e7c:	f004 fc12 	bl	80056a4 <HAL_UART_Transmit>
	HAL_Delay(10);
 8000e80:	200a      	movs	r0, #10
 8000e82:	f000 fe23 	bl	8001acc <HAL_Delay>
	memset(log, '\0', strlen(log)); 										// Clear message buffer
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff f93d 	bl	8000108 <strlen>
 8000e8e:	0002      	movs	r2, r0
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2100      	movs	r1, #0
 8000e94:	0018      	movs	r0, r3
 8000e96:	f005 f939 	bl	800610c <memset>
}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	2000014c 	.word	0x2000014c

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eac:	f000 fd9e 	bl	80019ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb0:	f000 f812 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb4:	f000 faa0 	bl	80013f8 <MX_GPIO_Init>
  MX_ADC_Init();
 8000eb8:	f000 f88c 	bl	8000fd4 <MX_ADC_Init>
  MX_RTC_Init();
 8000ebc:	f000 f948 	bl	8001150 <MX_RTC_Init>
  MX_TIM2_Init();
 8000ec0:	f000 f9e4 	bl	800128c <MX_TIM2_Init>
  MX_TIM21_Init();
 8000ec4:	f000 fa42 	bl	800134c <MX_TIM21_Init>
  MX_LPUART1_UART_Init();
 8000ec8:	f000 f914 	bl	80010f4 <MX_LPUART1_UART_Init>
  MX_LPTIM1_Init();
 8000ecc:	f000 f8e8 	bl	80010a0 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8000ed0:	f7ff fafc 	bl	80004cc <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	e7fd      	b.n	8000ed4 <main+0x2c>

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b099      	sub	sp, #100	@ 0x64
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	242c      	movs	r4, #44	@ 0x2c
 8000ee0:	193b      	adds	r3, r7, r4
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	2334      	movs	r3, #52	@ 0x34
 8000ee6:	001a      	movs	r2, r3
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f005 f90f 	bl	800610c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eee:	2318      	movs	r3, #24
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	2314      	movs	r3, #20
 8000ef6:	001a      	movs	r2, r3
 8000ef8:	2100      	movs	r1, #0
 8000efa:	f005 f907 	bl	800610c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000efe:	003b      	movs	r3, r7
 8000f00:	0018      	movs	r0, r3
 8000f02:	2318      	movs	r3, #24
 8000f04:	001a      	movs	r2, r3
 8000f06:	2100      	movs	r1, #0
 8000f08:	f005 f900 	bl	800610c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc8 <SystemClock_Config+0xf0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a2e      	ldr	r2, [pc, #184]	@ (8000fcc <SystemClock_Config+0xf4>)
 8000f12:	401a      	ands	r2, r3
 8000f14:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc8 <SystemClock_Config+0xf0>)
 8000f16:	2180      	movs	r1, #128	@ 0x80
 8000f18:	0109      	lsls	r1, r1, #4
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f1e:	f002 f825 	bl	8002f6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f22:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd0 <SystemClock_Config+0xf8>)
 8000f24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000f26:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd0 <SystemClock_Config+0xf8>)
 8000f28:	4928      	ldr	r1, [pc, #160]	@ (8000fcc <SystemClock_Config+0xf4>)
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	2206      	movs	r2, #6
 8000f32:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2280      	movs	r2, #128	@ 0x80
 8000f38:	0052      	lsls	r2, r2, #1
 8000f3a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	2201      	movs	r2, #1
 8000f40:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	2210      	movs	r2, #16
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4e:	193b      	adds	r3, r7, r4
 8000f50:	0018      	movs	r0, r3
 8000f52:	f002 f875 	bl	8003040 <HAL_RCC_OscConfig>
 8000f56:	1e03      	subs	r3, r0, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000f5a:	f000 fb0d 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	2118      	movs	r1, #24
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	220f      	movs	r2, #15
 8000f64:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2201      	movs	r2, #1
 8000f6a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2100      	movs	r1, #0
 8000f82:	0018      	movs	r0, r3
 8000f84:	f002 fbd8 	bl	8003738 <HAL_RCC_ClockConfig>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000f8c:	f000 faf4 	bl	8001578 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_RTC
 8000f90:	003b      	movs	r3, r7
 8000f92:	22a4      	movs	r2, #164	@ 0xa4
 8000f94:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8000f96:	003b      	movs	r3, r7
 8000f98:	22c0      	movs	r2, #192	@ 0xc0
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f9e:	003b      	movs	r3, r7
 8000fa0:	2280      	movs	r2, #128	@ 0x80
 8000fa2:	0252      	lsls	r2, r2, #9
 8000fa4:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8000fa6:	003b      	movs	r3, r7
 8000fa8:	22c0      	movs	r2, #192	@ 0xc0
 8000faa:	0312      	lsls	r2, r2, #12
 8000fac:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fae:	003b      	movs	r3, r7
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f002 fde5 	bl	8003b80 <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	1e03      	subs	r3, r0, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000fba:	f000 fadd 	bl	8001578 <Error_Handler>
  }
}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b019      	add	sp, #100	@ 0x64
 8000fc4:	bd90      	pop	{r4, r7, pc}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	40007000 	.word	0x40007000
 8000fcc:	ffffe7ff 	.word	0xffffe7ff
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	003b      	movs	r3, r7
 8000fdc:	0018      	movs	r0, r3
 8000fde:	2308      	movs	r3, #8
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	f005 f892 	bl	800610c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8001094 <MX_ADC_Init+0xc0>)
 8000fea:	4a2b      	ldr	r2, [pc, #172]	@ (8001098 <MX_ADC_Init+0xc4>)
 8000fec:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000fee:	4b29      	ldr	r3, [pc, #164]	@ (8001094 <MX_ADC_Init+0xc0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000ff4:	4b27      	ldr	r3, [pc, #156]	@ (8001094 <MX_ADC_Init+0xc0>)
 8000ff6:	22c0      	movs	r2, #192	@ 0xc0
 8000ff8:	0612      	lsls	r2, r2, #24
 8000ffa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffc:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <MX_ADC_Init+0xc0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8001002:	4b24      	ldr	r3, [pc, #144]	@ (8001094 <MX_ADC_Init+0xc0>)
 8001004:	2207      	movs	r2, #7
 8001006:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001008:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <MX_ADC_Init+0xc0>)
 800100a:	2201      	movs	r2, #1
 800100c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100e:	4b21      	ldr	r3, [pc, #132]	@ (8001094 <MX_ADC_Init+0xc0>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001014:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <MX_ADC_Init+0xc0>)
 8001016:	2220      	movs	r2, #32
 8001018:	2100      	movs	r1, #0
 800101a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800101c:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <MX_ADC_Init+0xc0>)
 800101e:	2221      	movs	r2, #33	@ 0x21
 8001020:	2100      	movs	r1, #0
 8001022:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <MX_ADC_Init+0xc0>)
 8001026:	2200      	movs	r2, #0
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102a:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <MX_ADC_Init+0xc0>)
 800102c:	22c2      	movs	r2, #194	@ 0xc2
 800102e:	32ff      	adds	r2, #255	@ 0xff
 8001030:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001032:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <MX_ADC_Init+0xc0>)
 8001034:	222c      	movs	r2, #44	@ 0x2c
 8001036:	2100      	movs	r1, #0
 8001038:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103a:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <MX_ADC_Init+0xc0>)
 800103c:	2204      	movs	r2, #4
 800103e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001040:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <MX_ADC_Init+0xc0>)
 8001042:	2200      	movs	r2, #0
 8001044:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001046:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <MX_ADC_Init+0xc0>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <MX_ADC_Init+0xc0>)
 800104e:	2200      	movs	r2, #0
 8001050:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001052:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <MX_ADC_Init+0xc0>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001058:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <MX_ADC_Init+0xc0>)
 800105a:	0018      	movs	r0, r3
 800105c:	f000 fd76 	bl	8001b4c <HAL_ADC_Init>
 8001060:	1e03      	subs	r3, r0, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001064:	f000 fa88 	bl	8001578 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001068:	003b      	movs	r3, r7
 800106a:	4a0c      	ldr	r2, [pc, #48]	@ (800109c <MX_ADC_Init+0xc8>)
 800106c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800106e:	003b      	movs	r3, r7
 8001070:	2280      	movs	r2, #128	@ 0x80
 8001072:	0152      	lsls	r2, r2, #5
 8001074:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001076:	003a      	movs	r2, r7
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <MX_ADC_Init+0xc0>)
 800107a:	0011      	movs	r1, r2
 800107c:	0018      	movs	r0, r3
 800107e:	f001 f815 	bl	80020ac <HAL_ADC_ConfigChannel>
 8001082:	1e03      	subs	r3, r0, #0
 8001084:	d001      	beq.n	800108a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001086:	f000 fa77 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	200000c0 	.word	0x200000c0
 8001098:	40012400 	.word	0x40012400
 800109c:	24000200 	.word	0x24000200

080010a0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80010a4:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <MX_LPTIM1_Init+0x48>)
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <MX_LPTIM1_Init+0x4c>)
 80010a8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_LPTIM1_Init+0x48>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <MX_LPTIM1_Init+0x48>)
 80010b2:	2280      	movs	r2, #128	@ 0x80
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <MX_LPTIM1_Init+0x48>)
 80010ba:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <MX_LPTIM1_Init+0x50>)
 80010bc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <MX_LPTIM1_Init+0x48>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <MX_LPTIM1_Init+0x48>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80010ca:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <MX_LPTIM1_Init+0x48>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <MX_LPTIM1_Init+0x48>)
 80010d2:	0018      	movs	r0, r3
 80010d4:	f001 fc30 	bl	8002938 <HAL_LPTIM_Init>
 80010d8:	1e03      	subs	r3, r0, #0
 80010da:	d001      	beq.n	80010e0 <MX_LPTIM1_Init+0x40>
  {
    Error_Handler();
 80010dc:	f000 fa4c 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	2000011c 	.word	0x2000011c
 80010ec:	40007c00 	.word	0x40007c00
 80010f0:	0000ffff 	.word	0x0000ffff

080010f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <MX_LPUART1_UART_Init+0x54>)
 80010fa:	4a14      	ldr	r2, [pc, #80]	@ (800114c <MX_LPUART1_UART_Init+0x58>)
 80010fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80010fe:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <MX_LPUART1_UART_Init+0x54>)
 8001100:	2296      	movs	r2, #150	@ 0x96
 8001102:	0192      	lsls	r2, r2, #6
 8001104:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <MX_LPUART1_UART_Init+0x54>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_LPUART1_UART_Init+0x54>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <MX_LPUART1_UART_Init+0x54>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <MX_LPUART1_UART_Init+0x54>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <MX_LPUART1_UART_Init+0x54>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <MX_LPUART1_UART_Init+0x54>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <MX_LPUART1_UART_Init+0x54>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <MX_LPUART1_UART_Init+0x54>)
 8001132:	0018      	movs	r0, r3
 8001134:	f004 fa62 	bl	80055fc <HAL_UART_Init>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d001      	beq.n	8001140 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800113c:	f000 fa1c 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	2000014c 	.word	0x2000014c
 800114c:	40004800 	.word	0x40004800

08001150 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b090      	sub	sp, #64	@ 0x40
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001156:	232c      	movs	r3, #44	@ 0x2c
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	0018      	movs	r0, r3
 800115c:	2314      	movs	r3, #20
 800115e:	001a      	movs	r2, r3
 8001160:	2100      	movs	r1, #0
 8001162:	f004 ffd3 	bl	800610c <memset>
  RTC_DateTypeDef sDate = {0};
 8001166:	2328      	movs	r3, #40	@ 0x28
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800116e:	003b      	movs	r3, r7
 8001170:	0018      	movs	r0, r3
 8001172:	2328      	movs	r3, #40	@ 0x28
 8001174:	001a      	movs	r2, r3
 8001176:	2100      	movs	r1, #0
 8001178:	f004 ffc8 	bl	800610c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800117c:	4b40      	ldr	r3, [pc, #256]	@ (8001280 <MX_RTC_Init+0x130>)
 800117e:	4a41      	ldr	r2, [pc, #260]	@ (8001284 <MX_RTC_Init+0x134>)
 8001180:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001182:	4b3f      	ldr	r3, [pc, #252]	@ (8001280 <MX_RTC_Init+0x130>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001188:	4b3d      	ldr	r3, [pc, #244]	@ (8001280 <MX_RTC_Init+0x130>)
 800118a:	227f      	movs	r2, #127	@ 0x7f
 800118c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800118e:	4b3c      	ldr	r3, [pc, #240]	@ (8001280 <MX_RTC_Init+0x130>)
 8001190:	22ff      	movs	r2, #255	@ 0xff
 8001192:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001194:	4b3a      	ldr	r3, [pc, #232]	@ (8001280 <MX_RTC_Init+0x130>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800119a:	4b39      	ldr	r3, [pc, #228]	@ (8001280 <MX_RTC_Init+0x130>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011a0:	4b37      	ldr	r3, [pc, #220]	@ (8001280 <MX_RTC_Init+0x130>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011a6:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <MX_RTC_Init+0x130>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011ac:	4b34      	ldr	r3, [pc, #208]	@ (8001280 <MX_RTC_Init+0x130>)
 80011ae:	0018      	movs	r0, r3
 80011b0:	f002 fe12 	bl	8003dd8 <HAL_RTC_Init>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d001      	beq.n	80011bc <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80011b8:	f000 f9de 	bl	8001578 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x15;
 80011bc:	212c      	movs	r1, #44	@ 0x2c
 80011be:	187b      	adds	r3, r7, r1
 80011c0:	2215      	movs	r2, #21
 80011c2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x49;
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	2249      	movs	r2, #73	@ 0x49
 80011c8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	2200      	movs	r2, #0
 80011ce:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011dc:	1879      	adds	r1, r7, r1
 80011de:	4b28      	ldr	r3, [pc, #160]	@ (8001280 <MX_RTC_Init+0x130>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	0018      	movs	r0, r3
 80011e4:	f002 fe94 	bl	8003f10 <HAL_RTC_SetTime>
 80011e8:	1e03      	subs	r3, r0, #0
 80011ea:	d001      	beq.n	80011f0 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80011ec:	f000 f9c4 	bl	8001578 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80011f0:	2128      	movs	r1, #40	@ 0x28
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2203      	movs	r2, #3
 80011f6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JULY;
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	2207      	movs	r2, #7
 80011fc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x26;
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	2226      	movs	r2, #38	@ 0x26
 8001202:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 8001204:	187b      	adds	r3, r7, r1
 8001206:	2224      	movs	r2, #36	@ 0x24
 8001208:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800120a:	1879      	adds	r1, r7, r1
 800120c:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <MX_RTC_Init+0x130>)
 800120e:	2201      	movs	r2, #1
 8001210:	0018      	movs	r0, r3
 8001212:	f002 ff85 	bl	8004120 <HAL_RTC_SetDate>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d001      	beq.n	800121e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800121a:	f000 f9ad 	bl	8001578 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800121e:	003b      	movs	r3, r7
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001224:	003b      	movs	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800122a:	003b      	movs	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001230:	003b      	movs	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001236:	003b      	movs	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800123c:	003b      	movs	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS;
 8001242:	003b      	movs	r3, r7
 8001244:	4a10      	ldr	r2, [pc, #64]	@ (8001288 <MX_RTC_Init+0x138>)
 8001246:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001248:	003b      	movs	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800124e:	003b      	movs	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001254:	003b      	movs	r3, r7
 8001256:	2220      	movs	r2, #32
 8001258:	2101      	movs	r1, #1
 800125a:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800125c:	003b      	movs	r3, r7
 800125e:	2280      	movs	r2, #128	@ 0x80
 8001260:	0052      	lsls	r2, r2, #1
 8001262:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001264:	0039      	movs	r1, r7
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_RTC_Init+0x130>)
 8001268:	2201      	movs	r2, #1
 800126a:	0018      	movs	r0, r3
 800126c:	f002 ffec 	bl	8004248 <HAL_RTC_SetAlarm_IT>
 8001270:	1e03      	subs	r3, r0, #0
 8001272:	d001      	beq.n	8001278 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8001274:	f000 f980 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001278:	46c0      	nop			@ (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	b010      	add	sp, #64	@ 0x40
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001d4 	.word	0x200001d4
 8001284:	40002800 	.word	0x40002800
 8001288:	80800000 	.word	0x80800000

0800128c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001292:	2310      	movs	r3, #16
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	0018      	movs	r0, r3
 8001298:	2308      	movs	r3, #8
 800129a:	001a      	movs	r2, r3
 800129c:	2100      	movs	r1, #0
 800129e:	f004 ff35 	bl	800610c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a2:	003b      	movs	r3, r7
 80012a4:	0018      	movs	r0, r3
 80012a6:	2310      	movs	r3, #16
 80012a8:	001a      	movs	r2, r3
 80012aa:	2100      	movs	r1, #0
 80012ac:	f004 ff2e 	bl	800610c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b0:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <MX_TIM2_Init+0xb8>)
 80012b2:	2280      	movs	r2, #128	@ 0x80
 80012b4:	05d2      	lsls	r2, r2, #23
 80012b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 80012b8:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <MX_TIM2_Init+0xb8>)
 80012ba:	2210      	movs	r2, #16
 80012bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <MX_TIM2_Init+0xb8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2100;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <MX_TIM2_Init+0xb8>)
 80012c6:	4a20      	ldr	r2, [pc, #128]	@ (8001348 <MX_TIM2_Init+0xbc>)
 80012c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <MX_TIM2_Init+0xb8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <MX_TIM2_Init+0xb8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <MX_TIM2_Init+0xb8>)
 80012d8:	0018      	movs	r0, r3
 80012da:	f003 fb8f 	bl	80049fc <HAL_TIM_PWM_Init>
 80012de:	1e03      	subs	r3, r0, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012e2:	f000 f949 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2110      	movs	r1, #16
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f4:	187a      	adds	r2, r7, r1
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <MX_TIM2_Init+0xb8>)
 80012f8:	0011      	movs	r1, r2
 80012fa:	0018      	movs	r0, r3
 80012fc:	f004 f92e 	bl	800555c <HAL_TIMEx_MasterConfigSynchronization>
 8001300:	1e03      	subs	r3, r0, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001304:	f000 f938 	bl	8001578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	003b      	movs	r3, r7
 800130a:	2260      	movs	r2, #96	@ 0x60
 800130c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800130e:	003b      	movs	r3, r7
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001314:	003b      	movs	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131a:	003b      	movs	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001320:	0039      	movs	r1, r7
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MX_TIM2_Init+0xb8>)
 8001324:	2200      	movs	r2, #0
 8001326:	0018      	movs	r0, r3
 8001328:	f003 fd52 	bl	8004dd0 <HAL_TIM_PWM_ConfigChannel>
 800132c:	1e03      	subs	r3, r0, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001330:	f000 f922 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <MX_TIM2_Init+0xb8>)
 8001336:	0018      	movs	r0, r3
 8001338:	f000 fa40 	bl	80017bc <HAL_TIM_MspPostInit>

}
 800133c:	46c0      	nop			@ (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b006      	add	sp, #24
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200001f8 	.word	0x200001f8
 8001348:	00000834 	.word	0x00000834

0800134c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	2308      	movs	r3, #8
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	0018      	movs	r0, r3
 8001358:	2310      	movs	r3, #16
 800135a:	001a      	movs	r2, r3
 800135c:	2100      	movs	r1, #0
 800135e:	f004 fed5 	bl	800610c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001362:	003b      	movs	r3, r7
 8001364:	0018      	movs	r0, r3
 8001366:	2308      	movs	r3, #8
 8001368:	001a      	movs	r2, r3
 800136a:	2100      	movs	r1, #0
 800136c:	f004 fece 	bl	800610c <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001370:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <MX_TIM21_Init+0xa0>)
 8001372:	4a1f      	ldr	r2, [pc, #124]	@ (80013f0 <MX_TIM21_Init+0xa4>)
 8001374:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 31;
 8001376:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_TIM21_Init+0xa0>)
 8001378:	221f      	movs	r2, #31
 800137a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <MX_TIM21_Init+0xa0>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 49999;
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_TIM21_Init+0xa0>)
 8001384:	4a1b      	ldr	r2, [pc, #108]	@ (80013f4 <MX_TIM21_Init+0xa8>)
 8001386:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <MX_TIM21_Init+0xa0>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138e:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <MX_TIM21_Init+0xa0>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001394:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <MX_TIM21_Init+0xa0>)
 8001396:	0018      	movs	r0, r3
 8001398:	f003 fa86 	bl	80048a8 <HAL_TIM_Base_Init>
 800139c:	1e03      	subs	r3, r0, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 80013a0:	f000 f8ea 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a4:	2108      	movs	r1, #8
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2280      	movs	r2, #128	@ 0x80
 80013aa:	0152      	lsls	r2, r2, #5
 80013ac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80013ae:	187a      	adds	r2, r7, r1
 80013b0:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_TIM21_Init+0xa0>)
 80013b2:	0011      	movs	r1, r2
 80013b4:	0018      	movs	r0, r3
 80013b6:	f003 fdd1 	bl	8004f5c <HAL_TIM_ConfigClockSource>
 80013ba:	1e03      	subs	r3, r0, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 80013be:	f000 f8db 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	003b      	movs	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c8:	003b      	movs	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80013ce:	003a      	movs	r2, r7
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_TIM21_Init+0xa0>)
 80013d2:	0011      	movs	r1, r2
 80013d4:	0018      	movs	r0, r3
 80013d6:	f004 f8c1 	bl	800555c <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80013de:	f000 f8cb 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b006      	add	sp, #24
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	20000238 	.word	0x20000238
 80013f0:	40010800 	.word	0x40010800
 80013f4:	0000c34f 	.word	0x0000c34f

080013f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b089      	sub	sp, #36	@ 0x24
 80013fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	240c      	movs	r4, #12
 8001400:	193b      	adds	r3, r7, r4
 8001402:	0018      	movs	r0, r3
 8001404:	2314      	movs	r3, #20
 8001406:	001a      	movs	r2, r3
 8001408:	2100      	movs	r1, #0
 800140a:	f004 fe7f 	bl	800610c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	4b56      	ldr	r3, [pc, #344]	@ (8001568 <MX_GPIO_Init+0x170>)
 8001410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001412:	4b55      	ldr	r3, [pc, #340]	@ (8001568 <MX_GPIO_Init+0x170>)
 8001414:	2104      	movs	r1, #4
 8001416:	430a      	orrs	r2, r1
 8001418:	62da      	str	r2, [r3, #44]	@ 0x2c
 800141a:	4b53      	ldr	r3, [pc, #332]	@ (8001568 <MX_GPIO_Init+0x170>)
 800141c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141e:	2204      	movs	r2, #4
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	4b50      	ldr	r3, [pc, #320]	@ (8001568 <MX_GPIO_Init+0x170>)
 8001428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800142a:	4b4f      	ldr	r3, [pc, #316]	@ (8001568 <MX_GPIO_Init+0x170>)
 800142c:	2101      	movs	r1, #1
 800142e:	430a      	orrs	r2, r1
 8001430:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001432:	4b4d      	ldr	r3, [pc, #308]	@ (8001568 <MX_GPIO_Init+0x170>)
 8001434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001436:	2201      	movs	r2, #1
 8001438:	4013      	ands	r3, r2
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b4a      	ldr	r3, [pc, #296]	@ (8001568 <MX_GPIO_Init+0x170>)
 8001440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001442:	4b49      	ldr	r3, [pc, #292]	@ (8001568 <MX_GPIO_Init+0x170>)
 8001444:	2102      	movs	r1, #2
 8001446:	430a      	orrs	r2, r1
 8001448:	62da      	str	r2, [r3, #44]	@ 0x2c
 800144a:	4b47      	ldr	r3, [pc, #284]	@ (8001568 <MX_GPIO_Init+0x170>)
 800144c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144e:	2202      	movs	r2, #2
 8001450:	4013      	ands	r3, r2
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001456:	23a0      	movs	r3, #160	@ 0xa0
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	2200      	movs	r2, #0
 800145c:	21a0      	movs	r1, #160	@ 0xa0
 800145e:	0018      	movs	r0, r3
 8001460:	f001 fa31 	bl	80028c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001464:	4941      	ldr	r1, [pc, #260]	@ (800156c <MX_GPIO_Init+0x174>)
 8001466:	4b42      	ldr	r3, [pc, #264]	@ (8001570 <MX_GPIO_Init+0x178>)
 8001468:	2200      	movs	r2, #0
 800146a:	0018      	movs	r0, r3
 800146c:	f001 fa2b 	bl	80028c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001470:	193b      	adds	r3, r7, r4
 8001472:	2220      	movs	r2, #32
 8001474:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	193b      	adds	r3, r7, r4
 8001478:	2201      	movs	r2, #1
 800147a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	193b      	adds	r3, r7, r4
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	193b      	adds	r3, r7, r4
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	193a      	adds	r2, r7, r4
 800148a:	23a0      	movs	r3, #160	@ 0xa0
 800148c:	05db      	lsls	r3, r3, #23
 800148e:	0011      	movs	r1, r2
 8001490:	0018      	movs	r0, r3
 8001492:	f001 f88d 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001496:	193b      	adds	r3, r7, r4
 8001498:	2280      	movs	r2, #128	@ 0x80
 800149a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	193b      	adds	r3, r7, r4
 800149e:	2201      	movs	r2, #1
 80014a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014a2:	193b      	adds	r3, r7, r4
 80014a4:	2202      	movs	r2, #2
 80014a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	193b      	adds	r3, r7, r4
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	193a      	adds	r2, r7, r4
 80014b0:	23a0      	movs	r3, #160	@ 0xa0
 80014b2:	05db      	lsls	r3, r3, #23
 80014b4:	0011      	movs	r1, r2
 80014b6:	0018      	movs	r0, r3
 80014b8:	f001 f87a 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8;
 80014bc:	193b      	adds	r3, r7, r4
 80014be:	4a2d      	ldr	r2, [pc, #180]	@ (8001574 <MX_GPIO_Init+0x17c>)
 80014c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	2201      	movs	r2, #1
 80014c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	193b      	adds	r3, r7, r4
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	193b      	adds	r3, r7, r4
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	193b      	adds	r3, r7, r4
 80014d6:	4a26      	ldr	r2, [pc, #152]	@ (8001570 <MX_GPIO_Init+0x178>)
 80014d8:	0019      	movs	r1, r3
 80014da:	0010      	movs	r0, r2
 80014dc:	f001 f868 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014e0:	193b      	adds	r3, r7, r4
 80014e2:	2280      	movs	r2, #128	@ 0x80
 80014e4:	0092      	lsls	r2, r2, #2
 80014e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e8:	193b      	adds	r3, r7, r4
 80014ea:	2284      	movs	r2, #132	@ 0x84
 80014ec:	0392      	lsls	r2, r2, #14
 80014ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	193a      	adds	r2, r7, r4
 80014f8:	23a0      	movs	r3, #160	@ 0xa0
 80014fa:	05db      	lsls	r3, r3, #23
 80014fc:	0011      	movs	r1, r2
 80014fe:	0018      	movs	r0, r3
 8001500:	f001 f856 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001504:	193b      	adds	r3, r7, r4
 8001506:	2280      	movs	r2, #128	@ 0x80
 8001508:	0212      	lsls	r2, r2, #8
 800150a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800150c:	193b      	adds	r3, r7, r4
 800150e:	22c4      	movs	r2, #196	@ 0xc4
 8001510:	0392      	lsls	r2, r2, #14
 8001512:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	193b      	adds	r3, r7, r4
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	193a      	adds	r2, r7, r4
 800151c:	23a0      	movs	r3, #160	@ 0xa0
 800151e:	05db      	lsls	r3, r3, #23
 8001520:	0011      	movs	r1, r2
 8001522:	0018      	movs	r0, r3
 8001524:	f001 f844 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001528:	0021      	movs	r1, r4
 800152a:	187b      	adds	r3, r7, r1
 800152c:	2280      	movs	r2, #128	@ 0x80
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	187b      	adds	r3, r7, r1
 8001534:	2201      	movs	r2, #1
 8001536:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2202      	movs	r2, #2
 800153c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	187b      	adds	r3, r7, r1
 8001546:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <MX_GPIO_Init+0x178>)
 8001548:	0019      	movs	r1, r3
 800154a:	0010      	movs	r0, r2
 800154c:	f001 f830 	bl	80025b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	2007      	movs	r0, #7
 8001556:	f000 fff9 	bl	800254c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800155a:	2007      	movs	r0, #7
 800155c:	f001 f80b 	bl	8002576 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001560:	46c0      	nop			@ (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	b009      	add	sp, #36	@ 0x24
 8001566:	bd90      	pop	{r4, r7, pc}
 8001568:	40021000 	.word	0x40021000
 800156c:	00008380 	.word	0x00008380
 8001570:	50000400 	.word	0x50000400
 8001574:	00008180 	.word	0x00008180

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	46c0      	nop			@ (mov r8, r8)
 8001582:	e7fd      	b.n	8001580 <Error_Handler+0x8>

08001584 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001588:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <HAL_MspInit+0x34>)
 800158a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_MspInit+0x34>)
 800158e:	2101      	movs	r1, #1
 8001590:	430a      	orrs	r2, r1
 8001592:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001594:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <HAL_MspInit+0x34>)
 8001596:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001598:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <HAL_MspInit+0x34>)
 800159a:	2180      	movs	r1, #128	@ 0x80
 800159c:	0549      	lsls	r1, r1, #21
 800159e:	430a      	orrs	r2, r1
 80015a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	2004      	movs	r0, #4
 80015a8:	f000 ffd0 	bl	800254c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80015ac:	2004      	movs	r0, #4
 80015ae:	f000 ffe2 	bl	8002576 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000

080015bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b089      	sub	sp, #36	@ 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	240c      	movs	r4, #12
 80015c6:	193b      	adds	r3, r7, r4
 80015c8:	0018      	movs	r0, r3
 80015ca:	2314      	movs	r3, #20
 80015cc:	001a      	movs	r2, r3
 80015ce:	2100      	movs	r1, #0
 80015d0:	f004 fd9c 	bl	800610c <memset>
  if(hadc->Instance==ADC1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a14      	ldr	r2, [pc, #80]	@ (800162c <HAL_ADC_MspInit+0x70>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d121      	bne.n	8001622 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015de:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <HAL_ADC_MspInit+0x74>)
 80015e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015e2:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <HAL_ADC_MspInit+0x74>)
 80015e4:	2180      	movs	r1, #128	@ 0x80
 80015e6:	0089      	lsls	r1, r1, #2
 80015e8:	430a      	orrs	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ec:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <HAL_ADC_MspInit+0x74>)
 80015ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <HAL_ADC_MspInit+0x74>)
 80015f2:	2102      	movs	r1, #2
 80015f4:	430a      	orrs	r2, r1
 80015f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <HAL_ADC_MspInit+0x74>)
 80015fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fc:	2202      	movs	r2, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001604:	193b      	adds	r3, r7, r4
 8001606:	2202      	movs	r2, #2
 8001608:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160a:	193b      	adds	r3, r7, r4
 800160c:	2203      	movs	r2, #3
 800160e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	193b      	adds	r3, r7, r4
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001616:	193b      	adds	r3, r7, r4
 8001618:	4a06      	ldr	r2, [pc, #24]	@ (8001634 <HAL_ADC_MspInit+0x78>)
 800161a:	0019      	movs	r1, r3
 800161c:	0010      	movs	r0, r2
 800161e:	f000 ffc7 	bl	80025b0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	b009      	add	sp, #36	@ 0x24
 8001628:	bd90      	pop	{r4, r7, pc}
 800162a:	46c0      	nop			@ (mov r8, r8)
 800162c:	40012400 	.word	0x40012400
 8001630:	40021000 	.word	0x40021000
 8001634:	50000400 	.word	0x50000400

08001638 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <HAL_LPTIM_MspInit+0x38>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10e      	bne.n	8001668 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_LPTIM_MspInit+0x3c>)
 800164c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <HAL_LPTIM_MspInit+0x3c>)
 8001650:	2180      	movs	r1, #128	@ 0x80
 8001652:	0609      	lsls	r1, r1, #24
 8001654:	430a      	orrs	r2, r1
 8001656:	639a      	str	r2, [r3, #56]	@ 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	200d      	movs	r0, #13
 800165e:	f000 ff75 	bl	800254c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001662:	200d      	movs	r0, #13
 8001664:	f000 ff87 	bl	8002576 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 8001668:	46c0      	nop			@ (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40007c00 	.word	0x40007c00
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b089      	sub	sp, #36	@ 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	240c      	movs	r4, #12
 8001682:	193b      	adds	r3, r7, r4
 8001684:	0018      	movs	r0, r3
 8001686:	2314      	movs	r3, #20
 8001688:	001a      	movs	r2, r3
 800168a:	2100      	movs	r1, #0
 800168c:	f004 fd3e 	bl	800610c <memset>
  if(huart->Instance==LPUART1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a18      	ldr	r2, [pc, #96]	@ (80016f8 <HAL_UART_MspInit+0x80>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d129      	bne.n	80016ee <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800169a:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <HAL_UART_MspInit+0x84>)
 800169c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800169e:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <HAL_UART_MspInit+0x84>)
 80016a0:	2180      	movs	r1, #128	@ 0x80
 80016a2:	02c9      	lsls	r1, r1, #11
 80016a4:	430a      	orrs	r2, r1
 80016a6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <HAL_UART_MspInit+0x84>)
 80016aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <HAL_UART_MspInit+0x84>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	430a      	orrs	r2, r1
 80016b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <HAL_UART_MspInit+0x84>)
 80016b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b8:	2201      	movs	r2, #1
 80016ba:	4013      	ands	r3, r2
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016c0:	0021      	movs	r1, r4
 80016c2:	187b      	adds	r3, r7, r1
 80016c4:	220c      	movs	r2, #12
 80016c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	2202      	movs	r2, #2
 80016cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2203      	movs	r2, #3
 80016d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2206      	movs	r2, #6
 80016de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	187a      	adds	r2, r7, r1
 80016e2:	23a0      	movs	r3, #160	@ 0xa0
 80016e4:	05db      	lsls	r3, r3, #23
 80016e6:	0011      	movs	r1, r2
 80016e8:	0018      	movs	r0, r3
 80016ea:	f000 ff61 	bl	80025b0 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b009      	add	sp, #36	@ 0x24
 80016f4:	bd90      	pop	{r4, r7, pc}
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	40004800 	.word	0x40004800
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <HAL_RTC_MspInit+0x38>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d10e      	bne.n	8001730 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001712:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <HAL_RTC_MspInit+0x3c>)
 8001714:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001716:	4b09      	ldr	r3, [pc, #36]	@ (800173c <HAL_RTC_MspInit+0x3c>)
 8001718:	2180      	movs	r1, #128	@ 0x80
 800171a:	02c9      	lsls	r1, r1, #11
 800171c:	430a      	orrs	r2, r1
 800171e:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2002      	movs	r0, #2
 8001726:	f000 ff11 	bl	800254c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800172a:	2002      	movs	r0, #2
 800172c:	f000 ff23 	bl	8002576 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001730:	46c0      	nop			@ (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b002      	add	sp, #8
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40002800 	.word	0x40002800
 800173c:	40021000 	.word	0x40021000

08001740 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2380      	movs	r3, #128	@ 0x80
 800174e:	05db      	lsls	r3, r3, #23
 8001750:	429a      	cmp	r2, r3
 8001752:	d10d      	bne.n	8001770 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <HAL_TIM_PWM_MspInit+0x38>)
 8001756:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001758:	4b07      	ldr	r3, [pc, #28]	@ (8001778 <HAL_TIM_PWM_MspInit+0x38>)
 800175a:	2101      	movs	r1, #1
 800175c:	430a      	orrs	r2, r1
 800175e:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	200f      	movs	r0, #15
 8001766:	f000 fef1 	bl	800254c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800176a:	200f      	movs	r0, #15
 800176c:	f000 ff03 	bl	8002576 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001770:	46c0      	nop			@ (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b002      	add	sp, #8
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000

0800177c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <HAL_TIM_Base_MspInit+0x38>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10d      	bne.n	80017aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800178e:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <HAL_TIM_Base_MspInit+0x3c>)
 8001790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_TIM_Base_MspInit+0x3c>)
 8001794:	2104      	movs	r1, #4
 8001796:	430a      	orrs	r2, r1
 8001798:	635a      	str	r2, [r3, #52]	@ 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	2014      	movs	r0, #20
 80017a0:	f000 fed4 	bl	800254c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80017a4:	2014      	movs	r0, #20
 80017a6:	f000 fee6 	bl	8002576 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM21_MspInit 1 */

  }

}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b002      	add	sp, #8
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	40010800 	.word	0x40010800
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b089      	sub	sp, #36	@ 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	240c      	movs	r4, #12
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	0018      	movs	r0, r3
 80017ca:	2314      	movs	r3, #20
 80017cc:	001a      	movs	r2, r3
 80017ce:	2100      	movs	r1, #0
 80017d0:	f004 fc9c 	bl	800610c <memset>
  if(htim->Instance==TIM2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2380      	movs	r3, #128	@ 0x80
 80017da:	05db      	lsls	r3, r3, #23
 80017dc:	429a      	cmp	r2, r3
 80017de:	d123      	bne.n	8001828 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <HAL_TIM_MspPostInit+0x74>)
 80017e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017e4:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <HAL_TIM_MspPostInit+0x74>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	430a      	orrs	r2, r1
 80017ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017ec:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <HAL_TIM_MspPostInit+0x74>)
 80017ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f0:	2201      	movs	r2, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA8     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017f8:	193b      	adds	r3, r7, r4
 80017fa:	2280      	movs	r2, #128	@ 0x80
 80017fc:	0052      	lsls	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	0021      	movs	r1, r4
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2202      	movs	r2, #2
 8001806:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	187b      	adds	r3, r7, r1
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	187b      	adds	r3, r7, r1
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8001814:	187b      	adds	r3, r7, r1
 8001816:	2205      	movs	r2, #5
 8001818:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	187a      	adds	r2, r7, r1
 800181c:	23a0      	movs	r3, #160	@ 0xa0
 800181e:	05db      	lsls	r3, r3, #23
 8001820:	0011      	movs	r1, r2
 8001822:	0018      	movs	r0, r3
 8001824:	f000 fec4 	bl	80025b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001828:	46c0      	nop			@ (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	b009      	add	sp, #36	@ 0x24
 800182e:	bd90      	pop	{r4, r7, pc}
 8001830:	40021000 	.word	0x40021000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001838:	46c0      	nop			@ (mov r8, r8)
 800183a:	e7fd      	b.n	8001838 <NMI_Handler+0x4>

0800183c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001840:	46c0      	nop			@ (mov r8, r8)
 8001842:	e7fd      	b.n	8001840 <HardFault_Handler+0x4>

08001844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001848:	46c0      	nop			@ (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001852:	46c0      	nop			@ (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185c:	f000 f91a 	bl	8001a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001860:	46c0      	nop			@ (mov r8, r8)
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800186c:	4b03      	ldr	r3, [pc, #12]	@ (800187c <RTC_IRQHandler+0x14>)
 800186e:	0018      	movs	r0, r3
 8001870:	f002 feee 	bl	8004650 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001874:	46c0      	nop			@ (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	200001d4 	.word	0x200001d4

08001880 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001884:	46c0      	nop			@ (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800188e:	2380      	movs	r3, #128	@ 0x80
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	0018      	movs	r0, r3
 8001894:	f001 f834 	bl	8002900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001898:	2380      	movs	r3, #128	@ 0x80
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	0018      	movs	r0, r3
 800189e:	f001 f82f 	bl	8002900 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <LPTIM1_IRQHandler+0x14>)
 80018ae:	0018      	movs	r0, r3
 80018b0:	f001 f97e 	bl	8002bb0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80018b4:	46c0      	nop			@ (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	2000011c 	.word	0x2000011c

080018c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <TIM2_IRQHandler+0x14>)
 80018c6:	0018      	movs	r0, r3
 80018c8:	f003 f99a 	bl	8004c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018cc:	46c0      	nop			@ (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	200001f8 	.word	0x200001f8

080018d8 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <TIM21_IRQHandler+0x14>)
 80018de:	0018      	movs	r0, r3
 80018e0:	f003 f98e 	bl	8004c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80018e4:	46c0      	nop			@ (mov r8, r8)
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	20000238 	.word	0x20000238

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	@ (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	@ (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	18d3      	adds	r3, r2, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d207      	bcs.n	8001930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001920:	f004 fbfc 	bl	800611c <__errno>
 8001924:	0003      	movs	r3, r0
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192a:	2301      	movs	r3, #1
 800192c:	425b      	negs	r3, r3
 800192e:	e009      	b.n	8001944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001936:	4b07      	ldr	r3, [pc, #28]	@ (8001954 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	18d2      	adds	r2, r2, r3
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <_sbrk+0x64>)
 8001940:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b006      	add	sp, #24
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20002000 	.word	0x20002000
 8001950:	00000400 	.word	0x00000400
 8001954:	20000278 	.word	0x20000278
 8001958:	200003c8 	.word	0x200003c8

0800195c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	46c0      	nop			@ (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001968:	4813      	ldr	r0, [pc, #76]	@ (80019b8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800196a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800196c:	f7ff fff6 	bl	800195c <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001970:	4812      	ldr	r0, [pc, #72]	@ (80019bc <LoopForever+0x6>)
    LDR R1, [R0]
 8001972:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001974:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001976:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <LoopForever+0xa>)
    CMP R1, R2
 8001978:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800197a:	d105      	bne.n	8001988 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800197c:	4811      	ldr	r0, [pc, #68]	@ (80019c4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800197e:	4912      	ldr	r1, [pc, #72]	@ (80019c8 <LoopForever+0x12>)
    STR R1, [R0]
 8001980:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001982:	4812      	ldr	r0, [pc, #72]	@ (80019cc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001984:	4912      	ldr	r1, [pc, #72]	@ (80019d0 <LoopForever+0x1a>)
    STR R1, [R0]
 8001986:	6001      	str	r1, [r0, #0]

08001988 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001988:	4812      	ldr	r0, [pc, #72]	@ (80019d4 <LoopForever+0x1e>)
  ldr r1, =_edata
 800198a:	4913      	ldr	r1, [pc, #76]	@ (80019d8 <LoopForever+0x22>)
  ldr r2, =_sidata
 800198c:	4a13      	ldr	r2, [pc, #76]	@ (80019dc <LoopForever+0x26>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a10      	ldr	r2, [pc, #64]	@ (80019e0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80019a0:	4c10      	ldr	r4, [pc, #64]	@ (80019e4 <LoopForever+0x2e>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ae:	f004 fbbb 	bl	8006128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7ff fa79 	bl	8000ea8 <main>

080019b6 <LoopForever>:

LoopForever:
    b LoopForever
 80019b6:	e7fe      	b.n	80019b6 <LoopForever>
   ldr   r0, =_estack
 80019b8:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80019bc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80019c0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80019c4:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80019c8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80019cc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80019d0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019dc:	08006bc0 	.word	0x08006bc0
  ldr r2, =_sbss
 80019e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019e4:	200003c8 	.word	0x200003c8

080019e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC1_IRQHandler>
	...

080019ec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_Init+0x3c>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_Init+0x3c>)
 80019fe:	2140      	movs	r1, #64	@ 0x40
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f811 	bl	8001a2c <HAL_InitTick>
 8001a0a:	1e03      	subs	r3, r0, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e001      	b.n	8001a1a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a16:	f7ff fdb5 	bl	8001584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a1a:	1dfb      	adds	r3, r7, #7
 8001a1c:	781b      	ldrb	r3, [r3, #0]
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b002      	add	sp, #8
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	40022000 	.word	0x40022000

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a34:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <HAL_InitTick+0x5c>)
 8001a36:	681c      	ldr	r4, [r3, #0]
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <HAL_InitTick+0x60>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	23fa      	movs	r3, #250	@ 0xfa
 8001a40:	0098      	lsls	r0, r3, #2
 8001a42:	f7fe fb73 	bl	800012c <__udivsi3>
 8001a46:	0003      	movs	r3, r0
 8001a48:	0019      	movs	r1, r3
 8001a4a:	0020      	movs	r0, r4
 8001a4c:	f7fe fb6e 	bl	800012c <__udivsi3>
 8001a50:	0003      	movs	r3, r0
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 fd9f 	bl	8002596 <HAL_SYSTICK_Config>
 8001a58:	1e03      	subs	r3, r0, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e00f      	b.n	8001a80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d80b      	bhi.n	8001a7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	425b      	negs	r3, r3
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 fd6c 	bl	800254c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_InitTick+0x64>)
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b003      	add	sp, #12
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	2000000c 	.word	0x2000000c
 8001a8c:	20000014 	.word	0x20000014
 8001a90:	20000010 	.word	0x20000010

08001a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_IncTick+0x1c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <HAL_IncTick+0x20>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	18d2      	adds	r2, r2, r3
 8001aa4:	4b03      	ldr	r3, [pc, #12]	@ (8001ab4 <HAL_IncTick+0x20>)
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	46c0      	nop			@ (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	20000014 	.word	0x20000014
 8001ab4:	2000027c 	.word	0x2000027c

08001ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b02      	ldr	r3, [pc, #8]	@ (8001ac8 <HAL_GetTick+0x10>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	46c0      	nop			@ (mov r8, r8)
 8001ac8:	2000027c 	.word	0x2000027c

08001acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff fff0 	bl	8001ab8 <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	d005      	beq.n	8001af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <HAL_Delay+0x44>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	001a      	movs	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	189b      	adds	r3, r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	f7ff ffe0 	bl	8001ab8 <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d8f7      	bhi.n	8001af4 <HAL_Delay+0x28>
  {
  }
}
 8001b04:	46c0      	nop			@ (mov r8, r8)
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b004      	add	sp, #16
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	46c0      	nop			@ (mov r8, r8)
 8001b10:	20000014 	.word	0x20000014

08001b14 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001b18:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <HAL_SuspendTick+0x18>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <HAL_SuspendTick+0x18>)
 8001b1e:	2102      	movs	r1, #2
 8001b20:	438a      	bics	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
}
 8001b24:	46c0      	nop			@ (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			@ (mov r8, r8)
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <HAL_ResumeTick+0x18>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <HAL_ResumeTick+0x18>)
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]
}
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	e000e010 	.word	0xe000e010

08001b4c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e159      	b.n	8001e12 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10a      	bne.n	8001b7c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2250      	movs	r2, #80	@ 0x50
 8001b70:	2100      	movs	r1, #0
 8001b72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7ff fd20 	bl	80015bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b80:	2210      	movs	r2, #16
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d005      	beq.n	8001b94 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b92:	d00b      	beq.n	8001bac <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b98:	2210      	movs	r2, #16
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2250      	movs	r2, #80	@ 0x50
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e132      	b.n	8001e12 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb0:	4a9a      	ldr	r2, [pc, #616]	@ (8001e1c <HAL_ADC_Init+0x2d0>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d108      	bne.n	8001bdc <HAL_ADC_Init+0x90>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_ADC_Init+0x90>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_ADC_Init+0x92>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d149      	bne.n	8001c76 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	23c0      	movs	r3, #192	@ 0xc0
 8001be8:	061b      	lsls	r3, r3, #24
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d00b      	beq.n	8001c06 <HAL_ADC_Init+0xba>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	2380      	movs	r3, #128	@ 0x80
 8001bf4:	05db      	lsls	r3, r3, #23
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d005      	beq.n	8001c06 <HAL_ADC_Init+0xba>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	061b      	lsls	r3, r3, #24
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d111      	bne.n	8001c2a <HAL_ADC_Init+0xde>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0092      	lsls	r2, r2, #2
 8001c12:	0892      	lsrs	r2, r2, #2
 8001c14:	611a      	str	r2, [r3, #16]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6919      	ldr	r1, [r3, #16]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	611a      	str	r2, [r3, #16]
 8001c28:	e014      	b.n	8001c54 <HAL_ADC_Init+0x108>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0092      	lsls	r2, r2, #2
 8001c36:	0892      	lsrs	r2, r2, #2
 8001c38:	611a      	str	r2, [r3, #16]
 8001c3a:	4b79      	ldr	r3, [pc, #484]	@ (8001e20 <HAL_ADC_Init+0x2d4>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b78      	ldr	r3, [pc, #480]	@ (8001e20 <HAL_ADC_Init+0x2d4>)
 8001c40:	4978      	ldr	r1, [pc, #480]	@ (8001e24 <HAL_ADC_Init+0x2d8>)
 8001c42:	400a      	ands	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	4b76      	ldr	r3, [pc, #472]	@ (8001e20 <HAL_ADC_Init+0x2d4>)
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	4b74      	ldr	r3, [pc, #464]	@ (8001e20 <HAL_ADC_Init+0x2d4>)
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2118      	movs	r1, #24
 8001c60:	438a      	bics	r2, r1
 8001c62:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68d9      	ldr	r1, [r3, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001c76:	4b6a      	ldr	r3, [pc, #424]	@ (8001e20 <HAL_ADC_Init+0x2d4>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4b69      	ldr	r3, [pc, #420]	@ (8001e20 <HAL_ADC_Init+0x2d4>)
 8001c7c:	496a      	ldr	r1, [pc, #424]	@ (8001e28 <HAL_ADC_Init+0x2dc>)
 8001c7e:	400a      	ands	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001c82:	4b67      	ldr	r3, [pc, #412]	@ (8001e20 <HAL_ADC_Init+0x2d4>)
 8001c84:	6819      	ldr	r1, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8a:	065a      	lsls	r2, r3, #25
 8001c8c:	4b64      	ldr	r3, [pc, #400]	@ (8001e20 <HAL_ADC_Init+0x2d4>)
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	2380      	movs	r3, #128	@ 0x80
 8001c9a:	055b      	lsls	r3, r3, #21
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d108      	bne.n	8001cb2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2180      	movs	r1, #128	@ 0x80
 8001cac:	0549      	lsls	r1, r1, #21
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	495b      	ldr	r1, [pc, #364]	@ (8001e2c <HAL_ADC_Init+0x2e0>)
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68d9      	ldr	r1, [r3, #12]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_Init+0x18c>
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	e000      	b.n	8001cda <HAL_ADC_Init+0x18e>
 8001cd8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001cda:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2020      	movs	r0, #32
 8001ce0:	5c1b      	ldrb	r3, [r3, r0]
 8001ce2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001ce4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	202c      	movs	r0, #44	@ 0x2c
 8001cea:	5c1b      	ldrb	r3, [r3, r0]
 8001cec:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001cee:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001cf4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001cfc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001d04:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d12:	23c2      	movs	r3, #194	@ 0xc2
 8001d14:	33ff      	adds	r3, #255	@ 0xff
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d00b      	beq.n	8001d32 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68d9      	ldr	r1, [r3, #12]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2221      	movs	r2, #33	@ 0x21
 8001d36:	5c9b      	ldrb	r3, [r3, r2]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d11a      	bne.n	8001d72 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	5c9b      	ldrb	r3, [r3, r2]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2180      	movs	r1, #128	@ 0x80
 8001d52:	0249      	lsls	r1, r1, #9
 8001d54:	430a      	orrs	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	e00b      	b.n	8001d72 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5e:	2220      	movs	r2, #32
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d11f      	bne.n	8001dba <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	492a      	ldr	r1, [pc, #168]	@ (8001e30 <HAL_ADC_Init+0x2e4>)
 8001d86:	400a      	ands	r2, r1
 8001d88:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6919      	ldr	r1, [r3, #16]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001d98:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001d9e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2101      	movs	r1, #1
 8001db4:	430a      	orrs	r2, r1
 8001db6:	611a      	str	r2, [r3, #16]
 8001db8:	e00e      	b.n	8001dd8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d107      	bne.n	8001dd8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2107      	movs	r1, #7
 8001de4:	438a      	bics	r2, r1
 8001de6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6959      	ldr	r1, [r3, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e04:	2203      	movs	r2, #3
 8001e06:	4393      	bics	r3, r2
 8001e08:	2201      	movs	r2, #1
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b002      	add	sp, #8
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			@ (mov r8, r8)
 8001e1c:	fffffefd 	.word	0xfffffefd
 8001e20:	40012708 	.word	0x40012708
 8001e24:	ffc3ffff 	.word	0xffc3ffff
 8001e28:	fdffffff 	.word	0xfdffffff
 8001e2c:	fffe0219 	.word	0xfffe0219
 8001e30:	fffffc03 	.word	0xfffffc03

08001e34 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d138      	bne.n	8001ec2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2250      	movs	r2, #80	@ 0x50
 8001e54:	5c9b      	ldrb	r3, [r3, r2]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_Start+0x2a>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e038      	b.n	8001ed0 <HAL_ADC_Start+0x9c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2250      	movs	r2, #80	@ 0x50
 8001e62:	2101      	movs	r1, #1
 8001e64:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d007      	beq.n	8001e7e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001e6e:	230f      	movs	r3, #15
 8001e70:	18fc      	adds	r4, r7, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f000 f981 	bl	800217c <ADC_Enable>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e7e:	230f      	movs	r3, #15
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d120      	bne.n	8001eca <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8c:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <HAL_ADC_Start+0xa4>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2280      	movs	r2, #128	@ 0x80
 8001e92:	0052      	lsls	r2, r2, #1
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2250      	movs	r2, #80	@ 0x50
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	221c      	movs	r2, #28
 8001eae:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2104      	movs	r1, #4
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	e003      	b.n	8001eca <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eca:	230f      	movs	r3, #15
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	781b      	ldrb	r3, [r3, #0]
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b005      	add	sp, #20
 8001ed6:	bd90      	pop	{r4, r7, pc}
 8001ed8:	fffff0fe 	.word	0xfffff0fe

08001edc <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee4:	230f      	movs	r3, #15
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2250      	movs	r2, #80	@ 0x50
 8001ef0:	5c9b      	ldrb	r3, [r3, r2]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_Stop+0x1e>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e029      	b.n	8001f4e <HAL_ADC_Stop+0x72>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2250      	movs	r2, #80	@ 0x50
 8001efe:	2101      	movs	r1, #1
 8001f00:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001f02:	250f      	movs	r5, #15
 8001f04:	197c      	adds	r4, r7, r5
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 fa06 	bl	800231a <ADC_ConversionStop>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f12:	197b      	adds	r3, r7, r5
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d112      	bne.n	8001f40 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001f1a:	197c      	adds	r4, r7, r5
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f000 f994 	bl	800224c <ADC_Disable>
 8001f24:	0003      	movs	r3, r0
 8001f26:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001f28:	197b      	adds	r3, r7, r5
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f34:	4a08      	ldr	r2, [pc, #32]	@ (8001f58 <HAL_ADC_Stop+0x7c>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	2201      	movs	r2, #1
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2250      	movs	r2, #80	@ 0x50
 8001f44:	2100      	movs	r1, #0
 8001f46:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001f48:	230f      	movs	r3, #15
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b004      	add	sp, #16
 8001f54:	bdb0      	pop	{r4, r5, r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	fffffefe 	.word	0xfffffefe

08001f5c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d102      	bne.n	8001f7c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001f76:	2308      	movs	r3, #8
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	e014      	b.n	8001fa6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d10b      	bne.n	8001fa2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8e:	2220      	movs	r2, #32
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2250      	movs	r2, #80	@ 0x50
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e072      	b.n	8002088 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001fa6:	f7ff fd87 	bl	8001ab8 <HAL_GetTick>
 8001faa:	0003      	movs	r3, r0
 8001fac:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fae:	e01f      	b.n	8001ff0 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	d01c      	beq.n	8001ff0 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_ADC_PollForConversion+0x70>
 8001fbc:	f7ff fd7c 	bl	8001ab8 <HAL_GetTick>
 8001fc0:	0002      	movs	r2, r0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d211      	bcs.n	8001ff0 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fdc:	2204      	movs	r2, #4
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2250      	movs	r2, #80	@ 0x50
 8001fe8:	2100      	movs	r1, #0
 8001fea:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e04b      	b.n	8002088 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d0d9      	beq.n	8001fb0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002000:	2280      	movs	r2, #128	@ 0x80
 8002002:	0092      	lsls	r2, r2, #2
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	23c0      	movs	r3, #192	@ 0xc0
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	4013      	ands	r3, r2
 8002016:	d12e      	bne.n	8002076 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800201e:	2b00      	cmp	r3, #0
 8002020:	d129      	bne.n	8002076 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2208      	movs	r2, #8
 800202a:	4013      	ands	r3, r2
 800202c:	2b08      	cmp	r3, #8
 800202e:	d122      	bne.n	8002076 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2204      	movs	r2, #4
 8002038:	4013      	ands	r3, r2
 800203a:	d110      	bne.n	800205e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	210c      	movs	r1, #12
 8002048:	438a      	bics	r2, r1
 800204a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002050:	4a0f      	ldr	r2, [pc, #60]	@ (8002090 <HAL_ADC_PollForConversion+0x134>)
 8002052:	4013      	ands	r3, r2
 8002054:	2201      	movs	r2, #1
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54
 800205c:	e00b      	b.n	8002076 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002062:	2220      	movs	r2, #32
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	2201      	movs	r2, #1
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d103      	bne.n	8002086 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	220c      	movs	r2, #12
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b004      	add	sp, #16
 800208e:	bd80      	pop	{r7, pc}
 8002090:	fffffefe 	.word	0xfffffefe

08002094 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80020a2:	0018      	movs	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b002      	add	sp, #8
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2250      	movs	r2, #80	@ 0x50
 80020ba:	5c9b      	ldrb	r3, [r3, r2]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x18>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e050      	b.n	8002166 <HAL_ADC_ConfigChannel+0xba>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2250      	movs	r2, #80	@ 0x50
 80020c8:	2101      	movs	r1, #1
 80020ca:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2204      	movs	r2, #4
 80020d4:	4013      	ands	r3, r2
 80020d6:	d00b      	beq.n	80020f0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020dc:	2220      	movs	r2, #32
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2250      	movs	r2, #80	@ 0x50
 80020e8:	2100      	movs	r1, #0
 80020ea:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e03a      	b.n	8002166 <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002170 <HAL_ADC_ConfigChannel+0xc4>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d018      	beq.n	800212c <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	035b      	lsls	r3, r3, #13
 8002106:	0b5a      	lsrs	r2, r3, #13
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	@ 0x80
 8002116:	029b      	lsls	r3, r3, #10
 8002118:	4013      	ands	r3, r2
 800211a:	d01f      	beq.n	800215c <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800211c:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <HAL_ADC_ConfigChannel+0xc8>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <HAL_ADC_ConfigChannel+0xc8>)
 8002122:	2180      	movs	r1, #128	@ 0x80
 8002124:	03c9      	lsls	r1, r1, #15
 8002126:	430a      	orrs	r2, r1
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e017      	b.n	800215c <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	035b      	lsls	r3, r3, #13
 8002138:	0b5b      	lsrs	r3, r3, #13
 800213a:	43d9      	mvns	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	400a      	ands	r2, r1
 8002142:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2380      	movs	r3, #128	@ 0x80
 800214a:	029b      	lsls	r3, r3, #10
 800214c:	4013      	ands	r3, r2
 800214e:	d005      	beq.n	800215c <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <HAL_ADC_ConfigChannel+0xc8>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <HAL_ADC_ConfigChannel+0xc8>)
 8002156:	4908      	ldr	r1, [pc, #32]	@ (8002178 <HAL_ADC_ConfigChannel+0xcc>)
 8002158:	400a      	ands	r2, r1
 800215a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2250      	movs	r2, #80	@ 0x50
 8002160:	2100      	movs	r1, #0
 8002162:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	00001001 	.word	0x00001001
 8002174:	40012708 	.word	0x40012708
 8002178:	ffbfffff 	.word	0xffbfffff

0800217c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2203      	movs	r2, #3
 8002190:	4013      	ands	r3, r2
 8002192:	2b01      	cmp	r3, #1
 8002194:	d108      	bne.n	80021a8 <ADC_Enable+0x2c>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <ADC_Enable+0x2c>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <ADC_Enable+0x2e>
 80021a8:	2300      	movs	r3, #0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d146      	bne.n	800223c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a24      	ldr	r2, [pc, #144]	@ (8002248 <ADC_Enable+0xcc>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	d00d      	beq.n	80021d6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021be:	2210      	movs	r2, #16
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ca:	2201      	movs	r2, #1
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e033      	b.n	800223e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80021e6:	2001      	movs	r0, #1
 80021e8:	f000 f8e4 	bl	80023b4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80021ec:	f7ff fc64 	bl	8001ab8 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021f4:	e01b      	b.n	800222e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021f6:	f7ff fc5f 	bl	8001ab8 <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b0a      	cmp	r3, #10
 8002202:	d914      	bls.n	800222e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2201      	movs	r2, #1
 800220c:	4013      	ands	r3, r2
 800220e:	2b01      	cmp	r3, #1
 8002210:	d00d      	beq.n	800222e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002216:	2210      	movs	r2, #16
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	2201      	movs	r2, #1
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e007      	b.n	800223e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2201      	movs	r2, #1
 8002236:	4013      	ands	r3, r2
 8002238:	2b01      	cmp	r3, #1
 800223a:	d1dc      	bne.n	80021f6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	0018      	movs	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	b004      	add	sp, #16
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	80000017 	.word	0x80000017

0800224c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2203      	movs	r2, #3
 8002260:	4013      	ands	r3, r2
 8002262:	2b01      	cmp	r3, #1
 8002264:	d108      	bne.n	8002278 <ADC_Disable+0x2c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2201      	movs	r2, #1
 800226e:	4013      	ands	r3, r2
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <ADC_Disable+0x2c>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <ADC_Disable+0x2e>
 8002278:	2300      	movs	r3, #0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d048      	beq.n	8002310 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2205      	movs	r2, #5
 8002286:	4013      	ands	r3, r2
 8002288:	2b01      	cmp	r3, #1
 800228a:	d110      	bne.n	80022ae <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2102      	movs	r1, #2
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2203      	movs	r2, #3
 80022a2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022a4:	f7ff fc08 	bl	8001ab8 <HAL_GetTick>
 80022a8:	0003      	movs	r3, r0
 80022aa:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022ac:	e029      	b.n	8002302 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b2:	2210      	movs	r2, #16
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022be:	2201      	movs	r2, #1
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e023      	b.n	8002312 <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022ca:	f7ff fbf5 	bl	8001ab8 <HAL_GetTick>
 80022ce:	0002      	movs	r2, r0
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b0a      	cmp	r3, #10
 80022d6:	d914      	bls.n	8002302 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2201      	movs	r2, #1
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d10d      	bne.n	8002302 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ea:	2210      	movs	r2, #16
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	2201      	movs	r2, #1
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e007      	b.n	8002312 <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2201      	movs	r2, #1
 800230a:	4013      	ands	r3, r2
 800230c:	2b01      	cmp	r3, #1
 800230e:	d0dc      	beq.n	80022ca <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b004      	add	sp, #16
 8002318:	bd80      	pop	{r7, pc}

0800231a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2204      	movs	r2, #4
 800232e:	4013      	ands	r3, r2
 8002330:	d03a      	beq.n	80023a8 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2204      	movs	r2, #4
 800233a:	4013      	ands	r3, r2
 800233c:	2b04      	cmp	r3, #4
 800233e:	d10d      	bne.n	800235c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2202      	movs	r2, #2
 8002348:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800234a:	d107      	bne.n	800235c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2110      	movs	r1, #16
 8002358:	430a      	orrs	r2, r1
 800235a:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800235c:	f7ff fbac 	bl	8001ab8 <HAL_GetTick>
 8002360:	0003      	movs	r3, r0
 8002362:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002364:	e01a      	b.n	800239c <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002366:	f7ff fba7 	bl	8001ab8 <HAL_GetTick>
 800236a:	0002      	movs	r2, r0
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b0a      	cmp	r3, #10
 8002372:	d913      	bls.n	800239c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2204      	movs	r2, #4
 800237c:	4013      	ands	r3, r2
 800237e:	d00d      	beq.n	800239c <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002384:	2210      	movs	r2, #16
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002390:	2201      	movs	r2, #1
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e006      	b.n	80023aa <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2204      	movs	r2, #4
 80023a4:	4013      	ands	r3, r2
 80023a6:	d1de      	bne.n	8002366 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b004      	add	sp, #16
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <ADC_DelayMicroSecond+0x38>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	490b      	ldr	r1, [pc, #44]	@ (80023f0 <ADC_DelayMicroSecond+0x3c>)
 80023c2:	0018      	movs	r0, r3
 80023c4:	f7fd feb2 	bl	800012c <__udivsi3>
 80023c8:	0003      	movs	r3, r0
 80023ca:	001a      	movs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4353      	muls	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80023d2:	e002      	b.n	80023da <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f9      	bne.n	80023d4 <ADC_DelayMicroSecond+0x20>
  }
}
 80023e0:	46c0      	nop			@ (mov r8, r8)
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b004      	add	sp, #16
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	2000000c 	.word	0x2000000c
 80023f0:	000f4240 	.word	0x000f4240

080023f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	0002      	movs	r2, r0
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002400:	1dfb      	adds	r3, r7, #7
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b7f      	cmp	r3, #127	@ 0x7f
 8002406:	d809      	bhi.n	800241c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	001a      	movs	r2, r3
 800240e:	231f      	movs	r3, #31
 8002410:	401a      	ands	r2, r3
 8002412:	4b04      	ldr	r3, [pc, #16]	@ (8002424 <__NVIC_EnableIRQ+0x30>)
 8002414:	2101      	movs	r1, #1
 8002416:	4091      	lsls	r1, r2
 8002418:	000a      	movs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
  }
}
 800241c:	46c0      	nop			@ (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b002      	add	sp, #8
 8002422:	bd80      	pop	{r7, pc}
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	0002      	movs	r2, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b7f      	cmp	r3, #127	@ 0x7f
 800243c:	d828      	bhi.n	8002490 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800243e:	4a2f      	ldr	r2, [pc, #188]	@ (80024fc <__NVIC_SetPriority+0xd4>)
 8002440:	1dfb      	adds	r3, r7, #7
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b25b      	sxtb	r3, r3
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	33c0      	adds	r3, #192	@ 0xc0
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	589b      	ldr	r3, [r3, r2]
 800244e:	1dfa      	adds	r2, r7, #7
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	0011      	movs	r1, r2
 8002454:	2203      	movs	r2, #3
 8002456:	400a      	ands	r2, r1
 8002458:	00d2      	lsls	r2, r2, #3
 800245a:	21ff      	movs	r1, #255	@ 0xff
 800245c:	4091      	lsls	r1, r2
 800245e:	000a      	movs	r2, r1
 8002460:	43d2      	mvns	r2, r2
 8002462:	401a      	ands	r2, r3
 8002464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	019b      	lsls	r3, r3, #6
 800246a:	22ff      	movs	r2, #255	@ 0xff
 800246c:	401a      	ands	r2, r3
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	0018      	movs	r0, r3
 8002474:	2303      	movs	r3, #3
 8002476:	4003      	ands	r3, r0
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800247c:	481f      	ldr	r0, [pc, #124]	@ (80024fc <__NVIC_SetPriority+0xd4>)
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b25b      	sxtb	r3, r3
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	430a      	orrs	r2, r1
 8002488:	33c0      	adds	r3, #192	@ 0xc0
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800248e:	e031      	b.n	80024f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002490:	4a1b      	ldr	r2, [pc, #108]	@ (8002500 <__NVIC_SetPriority+0xd8>)
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	0019      	movs	r1, r3
 8002498:	230f      	movs	r3, #15
 800249a:	400b      	ands	r3, r1
 800249c:	3b08      	subs	r3, #8
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3306      	adds	r3, #6
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	18d3      	adds	r3, r2, r3
 80024a6:	3304      	adds	r3, #4
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	1dfa      	adds	r2, r7, #7
 80024ac:	7812      	ldrb	r2, [r2, #0]
 80024ae:	0011      	movs	r1, r2
 80024b0:	2203      	movs	r2, #3
 80024b2:	400a      	ands	r2, r1
 80024b4:	00d2      	lsls	r2, r2, #3
 80024b6:	21ff      	movs	r1, #255	@ 0xff
 80024b8:	4091      	lsls	r1, r2
 80024ba:	000a      	movs	r2, r1
 80024bc:	43d2      	mvns	r2, r2
 80024be:	401a      	ands	r2, r3
 80024c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	019b      	lsls	r3, r3, #6
 80024c6:	22ff      	movs	r2, #255	@ 0xff
 80024c8:	401a      	ands	r2, r3
 80024ca:	1dfb      	adds	r3, r7, #7
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	0018      	movs	r0, r3
 80024d0:	2303      	movs	r3, #3
 80024d2:	4003      	ands	r3, r0
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024d8:	4809      	ldr	r0, [pc, #36]	@ (8002500 <__NVIC_SetPriority+0xd8>)
 80024da:	1dfb      	adds	r3, r7, #7
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	001c      	movs	r4, r3
 80024e0:	230f      	movs	r3, #15
 80024e2:	4023      	ands	r3, r4
 80024e4:	3b08      	subs	r3, #8
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	430a      	orrs	r2, r1
 80024ea:	3306      	adds	r3, #6
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	18c3      	adds	r3, r0, r3
 80024f0:	3304      	adds	r3, #4
 80024f2:	601a      	str	r2, [r3, #0]
}
 80024f4:	46c0      	nop			@ (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b003      	add	sp, #12
 80024fa:	bd90      	pop	{r4, r7, pc}
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	1e5a      	subs	r2, r3, #1
 8002510:	2380      	movs	r3, #128	@ 0x80
 8002512:	045b      	lsls	r3, r3, #17
 8002514:	429a      	cmp	r2, r3
 8002516:	d301      	bcc.n	800251c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002518:	2301      	movs	r3, #1
 800251a:	e010      	b.n	800253e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251c:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <SysTick_Config+0x44>)
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	3a01      	subs	r2, #1
 8002522:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002524:	2301      	movs	r3, #1
 8002526:	425b      	negs	r3, r3
 8002528:	2103      	movs	r1, #3
 800252a:	0018      	movs	r0, r3
 800252c:	f7ff ff7c 	bl	8002428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002530:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <SysTick_Config+0x44>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002536:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <SysTick_Config+0x44>)
 8002538:	2207      	movs	r2, #7
 800253a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800253c:	2300      	movs	r3, #0
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b002      	add	sp, #8
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	e000e010 	.word	0xe000e010

0800254c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	210f      	movs	r1, #15
 8002558:	187b      	adds	r3, r7, r1
 800255a:	1c02      	adds	r2, r0, #0
 800255c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	187b      	adds	r3, r7, r1
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b25b      	sxtb	r3, r3
 8002566:	0011      	movs	r1, r2
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff ff5d 	bl	8002428 <__NVIC_SetPriority>
}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b004      	add	sp, #16
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	0002      	movs	r2, r0
 800257e:	1dfb      	adds	r3, r7, #7
 8002580:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002582:	1dfb      	adds	r3, r7, #7
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	b25b      	sxtb	r3, r3
 8002588:	0018      	movs	r0, r3
 800258a:	f7ff ff33 	bl	80023f4 <__NVIC_EnableIRQ>
}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	46bd      	mov	sp, r7
 8002592:	b002      	add	sp, #8
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7ff ffaf 	bl	8002504 <SysTick_Config>
 80025a6:	0003      	movs	r3, r0
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b002      	add	sp, #8
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80025c6:	e149      	b.n	800285c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2101      	movs	r1, #1
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4091      	lsls	r1, r2
 80025d2:	000a      	movs	r2, r1
 80025d4:	4013      	ands	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d100      	bne.n	80025e0 <HAL_GPIO_Init+0x30>
 80025de:	e13a      	b.n	8002856 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2203      	movs	r2, #3
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d005      	beq.n	80025f8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2203      	movs	r2, #3
 80025f2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d130      	bne.n	800265a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	409a      	lsls	r2, r3
 8002606:	0013      	movs	r3, r2
 8002608:	43da      	mvns	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	409a      	lsls	r2, r3
 800261a:	0013      	movs	r3, r2
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800262e:	2201      	movs	r2, #1
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	409a      	lsls	r2, r3
 8002634:	0013      	movs	r3, r2
 8002636:	43da      	mvns	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	2201      	movs	r2, #1
 8002646:	401a      	ands	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	409a      	lsls	r2, r3
 800264c:	0013      	movs	r3, r2
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2203      	movs	r2, #3
 8002660:	4013      	ands	r3, r2
 8002662:	2b03      	cmp	r3, #3
 8002664:	d017      	beq.n	8002696 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	2203      	movs	r2, #3
 8002672:	409a      	lsls	r2, r3
 8002674:	0013      	movs	r3, r2
 8002676:	43da      	mvns	r2, r3
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	409a      	lsls	r2, r3
 8002688:	0013      	movs	r3, r2
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2203      	movs	r2, #3
 800269c:	4013      	ands	r3, r2
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d123      	bne.n	80026ea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	08da      	lsrs	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3208      	adds	r2, #8
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	58d3      	ldr	r3, [r2, r3]
 80026ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2207      	movs	r2, #7
 80026b4:	4013      	ands	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	220f      	movs	r2, #15
 80026ba:	409a      	lsls	r2, r3
 80026bc:	0013      	movs	r3, r2
 80026be:	43da      	mvns	r2, r3
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2107      	movs	r1, #7
 80026ce:	400b      	ands	r3, r1
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	409a      	lsls	r2, r3
 80026d4:	0013      	movs	r3, r2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	08da      	lsrs	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3208      	adds	r2, #8
 80026e4:	0092      	lsls	r2, r2, #2
 80026e6:	6939      	ldr	r1, [r7, #16]
 80026e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	2203      	movs	r2, #3
 80026f6:	409a      	lsls	r2, r3
 80026f8:	0013      	movs	r3, r2
 80026fa:	43da      	mvns	r2, r3
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2203      	movs	r2, #3
 8002708:	401a      	ands	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	409a      	lsls	r2, r3
 8002710:	0013      	movs	r3, r2
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	23c0      	movs	r3, #192	@ 0xc0
 8002724:	029b      	lsls	r3, r3, #10
 8002726:	4013      	ands	r3, r2
 8002728:	d100      	bne.n	800272c <HAL_GPIO_Init+0x17c>
 800272a:	e094      	b.n	8002856 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272c:	4b51      	ldr	r3, [pc, #324]	@ (8002874 <HAL_GPIO_Init+0x2c4>)
 800272e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002730:	4b50      	ldr	r3, [pc, #320]	@ (8002874 <HAL_GPIO_Init+0x2c4>)
 8002732:	2101      	movs	r1, #1
 8002734:	430a      	orrs	r2, r1
 8002736:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002738:	4a4f      	ldr	r2, [pc, #316]	@ (8002878 <HAL_GPIO_Init+0x2c8>)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	3302      	adds	r3, #2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	589b      	ldr	r3, [r3, r2]
 8002744:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2203      	movs	r2, #3
 800274a:	4013      	ands	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	220f      	movs	r2, #15
 8002750:	409a      	lsls	r2, r3
 8002752:	0013      	movs	r3, r2
 8002754:	43da      	mvns	r2, r3
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	23a0      	movs	r3, #160	@ 0xa0
 8002760:	05db      	lsls	r3, r3, #23
 8002762:	429a      	cmp	r2, r3
 8002764:	d013      	beq.n	800278e <HAL_GPIO_Init+0x1de>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a44      	ldr	r2, [pc, #272]	@ (800287c <HAL_GPIO_Init+0x2cc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00d      	beq.n	800278a <HAL_GPIO_Init+0x1da>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a43      	ldr	r2, [pc, #268]	@ (8002880 <HAL_GPIO_Init+0x2d0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d007      	beq.n	8002786 <HAL_GPIO_Init+0x1d6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a42      	ldr	r2, [pc, #264]	@ (8002884 <HAL_GPIO_Init+0x2d4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_GPIO_Init+0x1d2>
 800277e:	2305      	movs	r3, #5
 8002780:	e006      	b.n	8002790 <HAL_GPIO_Init+0x1e0>
 8002782:	2306      	movs	r3, #6
 8002784:	e004      	b.n	8002790 <HAL_GPIO_Init+0x1e0>
 8002786:	2302      	movs	r3, #2
 8002788:	e002      	b.n	8002790 <HAL_GPIO_Init+0x1e0>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_GPIO_Init+0x1e0>
 800278e:	2300      	movs	r3, #0
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	2103      	movs	r1, #3
 8002794:	400a      	ands	r2, r1
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	4093      	lsls	r3, r2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a0:	4935      	ldr	r1, [pc, #212]	@ (8002878 <HAL_GPIO_Init+0x2c8>)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	3302      	adds	r3, #2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ae:	4b36      	ldr	r3, [pc, #216]	@ (8002888 <HAL_GPIO_Init+0x2d8>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43da      	mvns	r2, r3
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	2380      	movs	r3, #128	@ 0x80
 80027c4:	035b      	lsls	r3, r3, #13
 80027c6:	4013      	ands	r3, r2
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002888 <HAL_GPIO_Init+0x2d8>)
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80027d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002888 <HAL_GPIO_Init+0x2d8>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	43da      	mvns	r2, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	2380      	movs	r3, #128	@ 0x80
 80027ee:	039b      	lsls	r3, r3, #14
 80027f0:	4013      	ands	r3, r2
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027fc:	4b22      	ldr	r3, [pc, #136]	@ (8002888 <HAL_GPIO_Init+0x2d8>)
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002802:	4b21      	ldr	r3, [pc, #132]	@ (8002888 <HAL_GPIO_Init+0x2d8>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	43da      	mvns	r2, r3
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	2380      	movs	r3, #128	@ 0x80
 8002818:	029b      	lsls	r3, r3, #10
 800281a:	4013      	ands	r3, r2
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002826:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <HAL_GPIO_Init+0x2d8>)
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800282c:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <HAL_GPIO_Init+0x2d8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	43da      	mvns	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	2380      	movs	r3, #128	@ 0x80
 8002842:	025b      	lsls	r3, r3, #9
 8002844:	4013      	ands	r3, r2
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002850:	4b0d      	ldr	r3, [pc, #52]	@ (8002888 <HAL_GPIO_Init+0x2d8>)
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3301      	adds	r3, #1
 800285a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	40da      	lsrs	r2, r3
 8002864:	1e13      	subs	r3, r2, #0
 8002866:	d000      	beq.n	800286a <HAL_GPIO_Init+0x2ba>
 8002868:	e6ae      	b.n	80025c8 <HAL_GPIO_Init+0x18>
  }
}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	46c0      	nop			@ (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	b006      	add	sp, #24
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	40010000 	.word	0x40010000
 800287c:	50000400 	.word	0x50000400
 8002880:	50000800 	.word	0x50000800
 8002884:	50001c00 	.word	0x50001c00
 8002888:	40010400 	.word	0x40010400

0800288c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	000a      	movs	r2, r1
 8002896:	1cbb      	adds	r3, r7, #2
 8002898:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	1cba      	adds	r2, r7, #2
 80028a0:	8812      	ldrh	r2, [r2, #0]
 80028a2:	4013      	ands	r3, r2
 80028a4:	d004      	beq.n	80028b0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80028a6:	230f      	movs	r3, #15
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	e003      	b.n	80028b8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028b0:	230f      	movs	r3, #15
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80028b8:	230f      	movs	r3, #15
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	781b      	ldrb	r3, [r3, #0]
}
 80028be:	0018      	movs	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b004      	add	sp, #16
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	0008      	movs	r0, r1
 80028d0:	0011      	movs	r1, r2
 80028d2:	1cbb      	adds	r3, r7, #2
 80028d4:	1c02      	adds	r2, r0, #0
 80028d6:	801a      	strh	r2, [r3, #0]
 80028d8:	1c7b      	adds	r3, r7, #1
 80028da:	1c0a      	adds	r2, r1, #0
 80028dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028de:	1c7b      	adds	r3, r7, #1
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d004      	beq.n	80028f0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e6:	1cbb      	adds	r3, r7, #2
 80028e8:	881a      	ldrh	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80028ee:	e003      	b.n	80028f8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80028f0:	1cbb      	adds	r3, r7, #2
 80028f2:	881a      	ldrh	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028f8:	46c0      	nop			@ (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	0002      	movs	r2, r0
 8002908:	1dbb      	adds	r3, r7, #6
 800290a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800290c:	4b09      	ldr	r3, [pc, #36]	@ (8002934 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	1dba      	adds	r2, r7, #6
 8002912:	8812      	ldrh	r2, [r2, #0]
 8002914:	4013      	ands	r3, r2
 8002916:	d008      	beq.n	800292a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002918:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800291a:	1dba      	adds	r2, r7, #6
 800291c:	8812      	ldrh	r2, [r2, #0]
 800291e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002920:	1dbb      	adds	r3, r7, #6
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	0018      	movs	r0, r3
 8002926:	f7fd fddf 	bl	80004e8 <HAL_GPIO_EXTI_Callback>
  }
}
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	46bd      	mov	sp, r7
 800292e:	b002      	add	sp, #8
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	40010400 	.word	0x40010400

08002938 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e078      	b.n	8002a3c <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	222e      	movs	r2, #46	@ 0x2e
 800294e:	5c9b      	ldrb	r3, [r3, r2]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d107      	bne.n	8002966 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	222d      	movs	r2, #45	@ 0x2d
 800295a:	2100      	movs	r1, #0
 800295c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	0018      	movs	r0, r3
 8002962:	f7fe fe69 	bl	8001638 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	222e      	movs	r2, #46	@ 0x2e
 800296a:	2102      	movs	r1, #2
 800296c:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d005      	beq.n	800298a <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	041b      	lsls	r3, r3, #16
 8002986:	429a      	cmp	r2, r3
 8002988:	d103      	bne.n	8002992 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	221e      	movs	r2, #30
 800298e:	4393      	bics	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	4a2b      	ldr	r2, [pc, #172]	@ (8002a44 <HAL_LPTIM_Init+0x10c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4a2a      	ldr	r2, [pc, #168]	@ (8002a48 <HAL_LPTIM_Init+0x110>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a29      	ldr	r2, [pc, #164]	@ (8002a4c <HAL_LPTIM_Init+0x114>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80029b4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80029ba:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80029c0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80029c6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d107      	bne.n	80029e6 <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80029de:	4313      	orrs	r3, r2
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d005      	beq.n	80029fa <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029f2:	2380      	movs	r3, #128	@ 0x80
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d107      	bne.n	8002a0a <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002a02:	4313      	orrs	r3, r2
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a44 <HAL_LPTIM_Init+0x10c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00a      	beq.n	8002a2a <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002a1c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002a22:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	222e      	movs	r2, #46	@ 0x2e
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b004      	add	sp, #16
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	0000ffff 	.word	0x0000ffff
 8002a48:	ffff1f3f 	.word	0xffff1f3f
 8002a4c:	ff19f1fe 	.word	0xff19f1fe

08002a50 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	222e      	movs	r2, #46	@ 0x2e
 8002a60:	2102      	movs	r1, #2
 8002a62:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002a64:	4b34      	ldr	r3, [pc, #208]	@ (8002b38 <HAL_LPTIM_TimeOut_Start_IT+0xe8>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b33      	ldr	r3, [pc, #204]	@ (8002b38 <HAL_LPTIM_TimeOut_Start_IT+0xe8>)
 8002a6a:	2180      	movs	r1, #128	@ 0x80
 8002a6c:	0589      	lsls	r1, r1, #22
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2180      	movs	r1, #128	@ 0x80
 8002a7e:	0309      	lsls	r1, r1, #12
 8002a80:	430a      	orrs	r2, r1
 8002a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691a      	ldr	r2, [r3, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	430a      	orrs	r2, r1
 8002a92:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2210      	movs	r2, #16
 8002a9a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2110      	movs	r1, #16
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f000 f95f 	bl	8002d6c <LPTIM_WaitForFlag>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d101      	bne.n	8002ab8 <HAL_LPTIM_TimeOut_Start_IT+0x68>
  {
    return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e03b      	b.n	8002b30 <HAL_LPTIM_TimeOut_Start_IT+0xe0>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2208      	movs	r2, #8
 8002abe:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2108      	movs	r1, #8
 8002acc:	0018      	movs	r0, r3
 8002ace:	f000 f94d 	bl	8002d6c <LPTIM_WaitForFlag>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d101      	bne.n	8002adc <HAL_LPTIM_TimeOut_Start_IT+0x8c>
  {
    return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e029      	b.n	8002b30 <HAL_LPTIM_TimeOut_Start_IT+0xe0>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f000 f97c 	bl	8002ddc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 f934 	bl	8002d54 <HAL_LPTIM_GetState>
 8002aec:	0003      	movs	r3, r0
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d101      	bne.n	8002af6 <HAL_LPTIM_TimeOut_Start_IT+0xa6>
  {
    return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e01c      	b.n	8002b30 <HAL_LPTIM_TimeOut_Start_IT+0xe0>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2101      	movs	r1, #1
 8002b02:	430a      	orrs	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	430a      	orrs	r2, r1
 8002b14:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2104      	movs	r1, #4
 8002b22:	430a      	orrs	r2, r1
 8002b24:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	222e      	movs	r2, #46	@ 0x2e
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b004      	add	sp, #16
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40010400 	.word	0x40010400

08002b3c <HAL_LPTIM_TimeOut_Stop_IT>:
  * @brief  Stop the Timeout function in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 8002b44:	4b17      	ldr	r3, [pc, #92]	@ (8002ba4 <HAL_LPTIM_TimeOut_Stop_IT+0x68>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b16      	ldr	r3, [pc, #88]	@ (8002ba4 <HAL_LPTIM_TimeOut_Stop_IT+0x68>)
 8002b4a:	4917      	ldr	r1, [pc, #92]	@ (8002ba8 <HAL_LPTIM_TimeOut_Stop_IT+0x6c>)
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	222e      	movs	r2, #46	@ 0x2e
 8002b54:	2102      	movs	r1, #2
 8002b56:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 f93e 	bl	8002ddc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 f8f6 	bl	8002d54 <HAL_LPTIM_GetState>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d101      	bne.n	8002b72 <HAL_LPTIM_TimeOut_Stop_IT+0x36>
  {
    return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e014      	b.n	8002b9c <HAL_LPTIM_TimeOut_Stop_IT+0x60>
  }

  /* Reset TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_TIMOUT;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	490b      	ldr	r1, [pc, #44]	@ (8002bac <HAL_LPTIM_TimeOut_Stop_IT+0x70>)
 8002b7e:	400a      	ands	r2, r1
 8002b80:	60da      	str	r2, [r3, #12]

  /* Disable Compare match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	438a      	bics	r2, r1
 8002b90:	609a      	str	r2, [r3, #8]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	222e      	movs	r2, #46	@ 0x2e
 8002b96:	2101      	movs	r1, #1
 8002b98:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40010400 	.word	0x40010400
 8002ba8:	dfffffff 	.word	0xdfffffff
 8002bac:	fff7ffff 	.word	0xfff7ffff

08002bb0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d10e      	bne.n	8002be4 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d107      	bne.n	8002be4 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7fd fd1a 	bl	8000618 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2202      	movs	r2, #2
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d10e      	bne.n	8002c10 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d107      	bne.n	8002c10 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2202      	movs	r2, #2
 8002c06:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f000 f872 	bl	8002cf4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2204      	movs	r2, #4
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d10e      	bne.n	8002c3c <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2204      	movs	r2, #4
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d107      	bne.n	8002c3c <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2204      	movs	r2, #4
 8002c32:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 f864 	bl	8002d04 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2208      	movs	r2, #8
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d10e      	bne.n	8002c68 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2208      	movs	r2, #8
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d107      	bne.n	8002c68 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f000 f856 	bl	8002d14 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2210      	movs	r2, #16
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b10      	cmp	r3, #16
 8002c74:	d10e      	bne.n	8002c94 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b10      	cmp	r3, #16
 8002c82:	d107      	bne.n	8002c94 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2210      	movs	r2, #16
 8002c8a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f848 	bl	8002d24 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d107      	bne.n	8002cc0 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 f83a 	bl	8002d34 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2240      	movs	r2, #64	@ 0x40
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b40      	cmp	r3, #64	@ 0x40
 8002ccc:	d10e      	bne.n	8002cec <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2240      	movs	r2, #64	@ 0x40
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b40      	cmp	r3, #64	@ 0x40
 8002cda:	d107      	bne.n	8002cec <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2240      	movs	r2, #64	@ 0x40
 8002ce2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 f82c 	bl	8002d44 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cec:	46c0      	nop			@ (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8002cfc:	46c0      	nop			@ (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b002      	add	sp, #8
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8002d0c:	46c0      	nop			@ (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b002      	add	sp, #8
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8002d1c:	46c0      	nop			@ (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b002      	add	sp, #8
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8002d2c:	46c0      	nop			@ (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b002      	add	sp, #8
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8002d3c:	46c0      	nop			@ (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8002d4c:	46c0      	nop			@ (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b002      	add	sp, #8
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	222e      	movs	r2, #46	@ 0x2e
 8002d60:	5c9b      	ldrb	r3, [r3, r2]
 8002d62:	b2db      	uxtb	r3, r3
}
 8002d64:	0018      	movs	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b002      	add	sp, #8
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8002d76:	230f      	movs	r3, #15
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8002d7e:	4b15      	ldr	r3, [pc, #84]	@ (8002dd4 <LPTIM_WaitForFlag+0x68>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4915      	ldr	r1, [pc, #84]	@ (8002dd8 <LPTIM_WaitForFlag+0x6c>)
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7fd f9d1 	bl	800012c <__udivsi3>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	0013      	movs	r3, r2
 8002d90:	015b      	lsls	r3, r3, #5
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	189b      	adds	r3, r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d103      	bne.n	8002db0 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8002da8:	230f      	movs	r3, #15
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2203      	movs	r2, #3
 8002dae:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	4013      	ands	r3, r2
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d002      	beq.n	8002dc6 <LPTIM_WaitForFlag+0x5a>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ea      	bne.n	8002d9c <LPTIM_WaitForFlag+0x30>

  return result;
 8002dc6:	230f      	movs	r3, #15
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	781b      	ldrb	r3, [r3, #0]
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b004      	add	sp, #16
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	2000000c 	.word	0x2000000c
 8002dd8:	00004e20 	.word	0x00004e20

08002ddc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08c      	sub	sp, #48	@ 0x30
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dec:	613b      	str	r3, [r7, #16]
  return(result);
 8002dee:	693b      	ldr	r3, [r7, #16]
  uint32_t tmpCMP;
  uint32_t tmpARR;
  uint32_t primask_bit;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002df0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002df2:	2301      	movs	r3, #1
 8002df4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f383 8810 	msr	PRIMASK, r3
}
 8002dfc:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	001a      	movs	r2, r3
 8002e04:	4b56      	ldr	r3, [pc, #344]	@ (8002f60 <LPTIM_Disable+0x184>)
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d106      	bne.n	8002e18 <LPTIM_Disable+0x3c>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002e0a:	4b56      	ldr	r3, [pc, #344]	@ (8002f64 <LPTIM_Disable+0x188>)
 8002e0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e0e:	23c0      	movs	r3, #192	@ 0xc0
 8002e10:	031b      	lsls	r3, r3, #12
 8002e12:	4013      	ands	r3, r2
 8002e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8002e16:	e000      	b.n	8002e1a <LPTIM_Disable+0x3e>
    default:
      break;
 8002e18:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	001a      	movs	r2, r3
 8002e40:	4b47      	ldr	r3, [pc, #284]	@ (8002f60 <LPTIM_Disable+0x184>)
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d10d      	bne.n	8002e62 <LPTIM_Disable+0x86>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8002e46:	4b47      	ldr	r3, [pc, #284]	@ (8002f64 <LPTIM_Disable+0x188>)
 8002e48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e4a:	4b46      	ldr	r3, [pc, #280]	@ (8002f64 <LPTIM_Disable+0x188>)
 8002e4c:	2180      	movs	r1, #128	@ 0x80
 8002e4e:	0609      	lsls	r1, r1, #24
 8002e50:	430a      	orrs	r2, r1
 8002e52:	629a      	str	r2, [r3, #40]	@ 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8002e54:	4b43      	ldr	r3, [pc, #268]	@ (8002f64 <LPTIM_Disable+0x188>)
 8002e56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e58:	4b42      	ldr	r3, [pc, #264]	@ (8002f64 <LPTIM_Disable+0x188>)
 8002e5a:	0052      	lsls	r2, r2, #1
 8002e5c:	0852      	lsrs	r2, r2, #1
 8002e5e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8002e60:	e000      	b.n	8002e64 <LPTIM_Disable+0x88>
    default:
      break;
 8002e62:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <LPTIM_Disable+0x94>
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d05c      	beq.n	8002f2a <LPTIM_Disable+0x14e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	001a      	movs	r2, r3
 8002e76:	4b3a      	ldr	r3, [pc, #232]	@ (8002f60 <LPTIM_Disable+0x184>)
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d106      	bne.n	8002e8a <LPTIM_Disable+0xae>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8002e7c:	4b39      	ldr	r3, [pc, #228]	@ (8002f64 <LPTIM_Disable+0x188>)
 8002e7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e80:	4b38      	ldr	r3, [pc, #224]	@ (8002f64 <LPTIM_Disable+0x188>)
 8002e82:	4939      	ldr	r1, [pc, #228]	@ (8002f68 <LPTIM_Disable+0x18c>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8002e88:	e000      	b.n	8002e8c <LPTIM_Disable+0xb0>
      default:
        break;
 8002e8a:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01b      	beq.n	8002eca <LPTIM_Disable+0xee>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2108      	movs	r1, #8
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f7ff ff5c 	bl	8002d6c <LPTIM_WaitForFlag>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d103      	bne.n	8002ec2 <LPTIM_Disable+0xe6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	222e      	movs	r2, #46	@ 0x2e
 8002ebe:	2103      	movs	r1, #3
 8002ec0:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01b      	beq.n	8002f08 <LPTIM_Disable+0x12c>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2101      	movs	r1, #1
 8002edc:	430a      	orrs	r2, r1
 8002ede:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2110      	movs	r1, #16
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7ff ff3d 	bl	8002d6c <LPTIM_WaitForFlag>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d103      	bne.n	8002f00 <LPTIM_Disable+0x124>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	222e      	movs	r2, #46	@ 0x2e
 8002efc:	2103      	movs	r1, #3
 8002efe:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2210      	movs	r2, #16
 8002f06:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	001a      	movs	r2, r3
 8002f0e:	4b14      	ldr	r3, [pc, #80]	@ (8002f60 <LPTIM_Disable+0x184>)
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d109      	bne.n	8002f28 <LPTIM_Disable+0x14c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8002f14:	4b13      	ldr	r3, [pc, #76]	@ (8002f64 <LPTIM_Disable+0x188>)
 8002f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f18:	4a13      	ldr	r2, [pc, #76]	@ (8002f68 <LPTIM_Disable+0x18c>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	4b11      	ldr	r3, [pc, #68]	@ (8002f64 <LPTIM_Disable+0x188>)
 8002f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f22:	430a      	orrs	r2, r1
 8002f24:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8002f26:	e000      	b.n	8002f2a <LPTIM_Disable+0x14e>
      default:
        break;
 8002f28:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2101      	movs	r1, #1
 8002f36:	438a      	bics	r2, r1
 8002f38:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f40:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6a3a      	ldr	r2, [r7, #32]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f383 8810 	msr	PRIMASK, r3
}
 8002f54:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b00c      	add	sp, #48	@ 0x30
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	40007c00 	.word	0x40007c00
 8002f64:	40021000 	.word	0x40021000
 8002f68:	fff3ffff 	.word	0xfff3ffff

08002f6c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f70:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b03      	ldr	r3, [pc, #12]	@ (8002f84 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002f76:	2180      	movs	r1, #128	@ 0x80
 8002f78:	0049      	lsls	r1, r1, #1
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]
}
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40007000 	.word	0x40007000

08002f88 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	000a      	movs	r2, r1
 8002f92:	1cfb      	adds	r3, r7, #3
 8002f94:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002f9a:	4b25      	ldr	r3, [pc, #148]	@ (8003030 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	2380      	movs	r3, #128	@ 0x80
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002fa6:	4b23      	ldr	r3, [pc, #140]	@ (8003034 <HAL_PWR_EnterSTOPMode+0xac>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	2201      	movs	r2, #1
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <HAL_PWR_EnterSTOPMode+0x40>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8002fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8003030 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003030 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002fc2:	491d      	ldr	r1, [pc, #116]	@ (8003038 <HAL_PWR_EnterSTOPMode+0xb0>)
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002fc8:	4b19      	ldr	r3, [pc, #100]	@ (8003030 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	4393      	bics	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8002fde:	4b14      	ldr	r3, [pc, #80]	@ (8003030 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002fe4:	4b15      	ldr	r3, [pc, #84]	@ (800303c <HAL_PWR_EnterSTOPMode+0xb4>)
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	4b14      	ldr	r3, [pc, #80]	@ (800303c <HAL_PWR_EnterSTOPMode+0xb4>)
 8002fea:	2104      	movs	r1, #4
 8002fec:	430a      	orrs	r2, r1
 8002fee:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002ff0:	1cfb      	adds	r3, r7, #3
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002ff8:	bf30      	wfi
 8002ffa:	e002      	b.n	8003002 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002ffc:	bf40      	sev
    __WFE();
 8002ffe:	bf20      	wfe
    __WFE();
 8003000:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003002:	4b0e      	ldr	r3, [pc, #56]	@ (800303c <HAL_PWR_EnterSTOPMode+0xb4>)
 8003004:	691a      	ldr	r2, [r3, #16]
 8003006:	4b0d      	ldr	r3, [pc, #52]	@ (800303c <HAL_PWR_EnterSTOPMode+0xb4>)
 8003008:	2104      	movs	r1, #4
 800300a:	438a      	bics	r2, r1
 800300c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d009      	beq.n	8003028 <HAL_PWR_EnterSTOPMode+0xa0>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d006      	beq.n	8003028 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800301a:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_PWR_EnterSTOPMode+0xa8>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4b04      	ldr	r3, [pc, #16]	@ (8003030 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003020:	2180      	movs	r1, #128	@ 0x80
 8003022:	0089      	lsls	r1, r1, #2
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
  }
}
 8003028:	46c0      	nop			@ (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b006      	add	sp, #24
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40007000 	.word	0x40007000
 8003034:	40010000 	.word	0x40010000
 8003038:	fffffdff 	.word	0xfffffdff
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b5b0      	push	{r4, r5, r7, lr}
 8003042:	b08a      	sub	sp, #40	@ 0x28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	f000 fb6c 	bl	800372c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003054:	4bc8      	ldr	r3, [pc, #800]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	220c      	movs	r2, #12
 800305a:	4013      	ands	r3, r2
 800305c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800305e:	4bc6      	ldr	r3, [pc, #792]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	025b      	lsls	r3, r3, #9
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2201      	movs	r2, #1
 8003070:	4013      	ands	r3, r2
 8003072:	d100      	bne.n	8003076 <HAL_RCC_OscConfig+0x36>
 8003074:	e07d      	b.n	8003172 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	2b08      	cmp	r3, #8
 800307a:	d007      	beq.n	800308c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d112      	bne.n	80030a8 <HAL_RCC_OscConfig+0x68>
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	2380      	movs	r3, #128	@ 0x80
 8003086:	025b      	lsls	r3, r3, #9
 8003088:	429a      	cmp	r2, r3
 800308a:	d10d      	bne.n	80030a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	4bba      	ldr	r3, [pc, #744]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	2380      	movs	r3, #128	@ 0x80
 8003092:	029b      	lsls	r3, r3, #10
 8003094:	4013      	ands	r3, r2
 8003096:	d100      	bne.n	800309a <HAL_RCC_OscConfig+0x5a>
 8003098:	e06a      	b.n	8003170 <HAL_RCC_OscConfig+0x130>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d166      	bne.n	8003170 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f000 fb42 	bl	800372c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	2380      	movs	r3, #128	@ 0x80
 80030ae:	025b      	lsls	r3, r3, #9
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_OscConfig+0x84>
 80030b4:	4bb0      	ldr	r3, [pc, #704]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4baf      	ldr	r3, [pc, #700]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80030ba:	2180      	movs	r1, #128	@ 0x80
 80030bc:	0249      	lsls	r1, r1, #9
 80030be:	430a      	orrs	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e027      	b.n	8003114 <HAL_RCC_OscConfig+0xd4>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	23a0      	movs	r3, #160	@ 0xa0
 80030ca:	02db      	lsls	r3, r3, #11
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d10e      	bne.n	80030ee <HAL_RCC_OscConfig+0xae>
 80030d0:	4ba9      	ldr	r3, [pc, #676]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4ba8      	ldr	r3, [pc, #672]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80030d6:	2180      	movs	r1, #128	@ 0x80
 80030d8:	02c9      	lsls	r1, r1, #11
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	4ba6      	ldr	r3, [pc, #664]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4ba5      	ldr	r3, [pc, #660]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80030e4:	2180      	movs	r1, #128	@ 0x80
 80030e6:	0249      	lsls	r1, r1, #9
 80030e8:	430a      	orrs	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e012      	b.n	8003114 <HAL_RCC_OscConfig+0xd4>
 80030ee:	4ba2      	ldr	r3, [pc, #648]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4ba1      	ldr	r3, [pc, #644]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80030f4:	49a1      	ldr	r1, [pc, #644]	@ (800337c <HAL_RCC_OscConfig+0x33c>)
 80030f6:	400a      	ands	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	4b9f      	ldr	r3, [pc, #636]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	2380      	movs	r3, #128	@ 0x80
 8003100:	025b      	lsls	r3, r3, #9
 8003102:	4013      	ands	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4b9b      	ldr	r3, [pc, #620]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b9a      	ldr	r3, [pc, #616]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 800310e:	499c      	ldr	r1, [pc, #624]	@ (8003380 <HAL_RCC_OscConfig+0x340>)
 8003110:	400a      	ands	r2, r1
 8003112:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d014      	beq.n	8003146 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fe fccc 	bl	8001ab8 <HAL_GetTick>
 8003120:	0003      	movs	r3, r0
 8003122:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003126:	f7fe fcc7 	bl	8001ab8 <HAL_GetTick>
 800312a:	0002      	movs	r2, r0
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b64      	cmp	r3, #100	@ 0x64
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e2f9      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003138:	4b8f      	ldr	r3, [pc, #572]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	2380      	movs	r3, #128	@ 0x80
 800313e:	029b      	lsls	r3, r3, #10
 8003140:	4013      	ands	r3, r2
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0xe6>
 8003144:	e015      	b.n	8003172 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7fe fcb7 	bl	8001ab8 <HAL_GetTick>
 800314a:	0003      	movs	r3, r0
 800314c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003150:	f7fe fcb2 	bl	8001ab8 <HAL_GetTick>
 8003154:	0002      	movs	r2, r0
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	@ 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e2e4      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003162:	4b85      	ldr	r3, [pc, #532]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	2380      	movs	r3, #128	@ 0x80
 8003168:	029b      	lsls	r3, r3, #10
 800316a:	4013      	ands	r3, r2
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x110>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2202      	movs	r2, #2
 8003178:	4013      	ands	r3, r2
 800317a:	d100      	bne.n	800317e <HAL_RCC_OscConfig+0x13e>
 800317c:	e099      	b.n	80032b2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003186:	2220      	movs	r2, #32
 8003188:	4013      	ands	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800318c:	4b7a      	ldr	r3, [pc, #488]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b79      	ldr	r3, [pc, #484]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 8003192:	2120      	movs	r1, #32
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319a:	2220      	movs	r2, #32
 800319c:	4393      	bics	r3, r2
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d005      	beq.n	80031b2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2b0c      	cmp	r3, #12
 80031aa:	d13e      	bne.n	800322a <HAL_RCC_OscConfig+0x1ea>
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d13b      	bne.n	800322a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80031b2:	4b71      	ldr	r3, [pc, #452]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2204      	movs	r2, #4
 80031b8:	4013      	ands	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_RCC_OscConfig+0x186>
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e2b2      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c6:	4b6c      	ldr	r3, [pc, #432]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003384 <HAL_RCC_OscConfig+0x344>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	0019      	movs	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	021a      	lsls	r2, r3, #8
 80031d6:	4b68      	ldr	r3, [pc, #416]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80031d8:	430a      	orrs	r2, r1
 80031da:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80031dc:	4b66      	ldr	r3, [pc, #408]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2209      	movs	r2, #9
 80031e2:	4393      	bics	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	4b64      	ldr	r3, [pc, #400]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80031e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ea:	430a      	orrs	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ee:	f000 fbeb 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 80031f2:	0001      	movs	r1, r0
 80031f4:	4b60      	ldr	r3, [pc, #384]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	220f      	movs	r2, #15
 80031fc:	4013      	ands	r3, r2
 80031fe:	4a62      	ldr	r2, [pc, #392]	@ (8003388 <HAL_RCC_OscConfig+0x348>)
 8003200:	5cd3      	ldrb	r3, [r2, r3]
 8003202:	000a      	movs	r2, r1
 8003204:	40da      	lsrs	r2, r3
 8003206:	4b61      	ldr	r3, [pc, #388]	@ (800338c <HAL_RCC_OscConfig+0x34c>)
 8003208:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800320a:	4b61      	ldr	r3, [pc, #388]	@ (8003390 <HAL_RCC_OscConfig+0x350>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2513      	movs	r5, #19
 8003210:	197c      	adds	r4, r7, r5
 8003212:	0018      	movs	r0, r3
 8003214:	f7fe fc0a 	bl	8001a2c <HAL_InitTick>
 8003218:	0003      	movs	r3, r0
 800321a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800321c:	197b      	adds	r3, r7, r5
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d046      	beq.n	80032b2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003224:	197b      	adds	r3, r7, r5
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	e280      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	2b00      	cmp	r3, #0
 800322e:	d027      	beq.n	8003280 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003230:	4b51      	ldr	r3, [pc, #324]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2209      	movs	r2, #9
 8003236:	4393      	bics	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	4b4f      	ldr	r3, [pc, #316]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 800323c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323e:	430a      	orrs	r2, r1
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003242:	f7fe fc39 	bl	8001ab8 <HAL_GetTick>
 8003246:	0003      	movs	r3, r0
 8003248:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800324c:	f7fe fc34 	bl	8001ab8 <HAL_GetTick>
 8003250:	0002      	movs	r2, r0
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e266      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800325e:	4b46      	ldr	r3, [pc, #280]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2204      	movs	r2, #4
 8003264:	4013      	ands	r3, r2
 8003266:	d0f1      	beq.n	800324c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	4b43      	ldr	r3, [pc, #268]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a45      	ldr	r2, [pc, #276]	@ (8003384 <HAL_RCC_OscConfig+0x344>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	4b3f      	ldr	r3, [pc, #252]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	e018      	b.n	80032b2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003280:	4b3d      	ldr	r3, [pc, #244]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b3c      	ldr	r3, [pc, #240]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 8003286:	2101      	movs	r1, #1
 8003288:	438a      	bics	r2, r1
 800328a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328c:	f7fe fc14 	bl	8001ab8 <HAL_GetTick>
 8003290:	0003      	movs	r3, r0
 8003292:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003296:	f7fe fc0f 	bl	8001ab8 <HAL_GetTick>
 800329a:	0002      	movs	r2, r0
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e241      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032a8:	4b33      	ldr	r3, [pc, #204]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2204      	movs	r2, #4
 80032ae:	4013      	ands	r3, r2
 80032b0:	d1f1      	bne.n	8003296 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2210      	movs	r2, #16
 80032b8:	4013      	ands	r3, r2
 80032ba:	d100      	bne.n	80032be <HAL_RCC_OscConfig+0x27e>
 80032bc:	e0a1      	b.n	8003402 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d140      	bne.n	8003346 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2380      	movs	r3, #128	@ 0x80
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4013      	ands	r3, r2
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_OscConfig+0x29c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e227      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032dc:	4b26      	ldr	r3, [pc, #152]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003394 <HAL_RCC_OscConfig+0x354>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	0019      	movs	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1a      	ldr	r2, [r3, #32]
 80032ea:	4b23      	ldr	r3, [pc, #140]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80032ec:	430a      	orrs	r2, r1
 80032ee:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032f0:	4b21      	ldr	r3, [pc, #132]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	0a19      	lsrs	r1, r3, #8
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	061a      	lsls	r2, r3, #24
 80032fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 8003300:	430a      	orrs	r2, r1
 8003302:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	0b5b      	lsrs	r3, r3, #13
 800330a:	3301      	adds	r3, #1
 800330c:	2280      	movs	r2, #128	@ 0x80
 800330e:	0212      	lsls	r2, r2, #8
 8003310:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003312:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	210f      	movs	r1, #15
 800331a:	400b      	ands	r3, r1
 800331c:	491a      	ldr	r1, [pc, #104]	@ (8003388 <HAL_RCC_OscConfig+0x348>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003322:	4b1a      	ldr	r3, [pc, #104]	@ (800338c <HAL_RCC_OscConfig+0x34c>)
 8003324:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003326:	4b1a      	ldr	r3, [pc, #104]	@ (8003390 <HAL_RCC_OscConfig+0x350>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2513      	movs	r5, #19
 800332c:	197c      	adds	r4, r7, r5
 800332e:	0018      	movs	r0, r3
 8003330:	f7fe fb7c 	bl	8001a2c <HAL_InitTick>
 8003334:	0003      	movs	r3, r0
 8003336:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003338:	197b      	adds	r3, r7, r5
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d060      	beq.n	8003402 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8003340:	197b      	adds	r3, r7, r5
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	e1f2      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d03f      	beq.n	80033ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800334e:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <HAL_RCC_OscConfig+0x338>)
 8003354:	2180      	movs	r1, #128	@ 0x80
 8003356:	0049      	lsls	r1, r1, #1
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335c:	f7fe fbac 	bl	8001ab8 <HAL_GetTick>
 8003360:	0003      	movs	r3, r0
 8003362:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003364:	e018      	b.n	8003398 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003366:	f7fe fba7 	bl	8001ab8 <HAL_GetTick>
 800336a:	0002      	movs	r2, r0
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d911      	bls.n	8003398 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e1d9      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
 8003378:	40021000 	.word	0x40021000
 800337c:	fffeffff 	.word	0xfffeffff
 8003380:	fffbffff 	.word	0xfffbffff
 8003384:	ffffe0ff 	.word	0xffffe0ff
 8003388:	08006b10 	.word	0x08006b10
 800338c:	2000000c 	.word	0x2000000c
 8003390:	20000010 	.word	0x20000010
 8003394:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003398:	4bc9      	ldr	r3, [pc, #804]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2380      	movs	r3, #128	@ 0x80
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4013      	ands	r3, r2
 80033a2:	d0e0      	beq.n	8003366 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a4:	4bc6      	ldr	r3, [pc, #792]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4ac6      	ldr	r2, [pc, #792]	@ (80036c4 <HAL_RCC_OscConfig+0x684>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	0019      	movs	r1, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1a      	ldr	r2, [r3, #32]
 80033b2:	4bc3      	ldr	r3, [pc, #780]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033b8:	4bc1      	ldr	r3, [pc, #772]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	0a19      	lsrs	r1, r3, #8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	061a      	lsls	r2, r3, #24
 80033c6:	4bbe      	ldr	r3, [pc, #760]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	e019      	b.n	8003402 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033ce:	4bbc      	ldr	r3, [pc, #752]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4bbb      	ldr	r3, [pc, #748]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 80033d4:	49bc      	ldr	r1, [pc, #752]	@ (80036c8 <HAL_RCC_OscConfig+0x688>)
 80033d6:	400a      	ands	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033da:	f7fe fb6d 	bl	8001ab8 <HAL_GetTick>
 80033de:	0003      	movs	r3, r0
 80033e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033e4:	f7fe fb68 	bl	8001ab8 <HAL_GetTick>
 80033e8:	0002      	movs	r2, r0
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e19a      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80033f6:	4bb2      	ldr	r3, [pc, #712]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4013      	ands	r3, r2
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2208      	movs	r2, #8
 8003408:	4013      	ands	r3, r2
 800340a:	d036      	beq.n	800347a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d019      	beq.n	8003448 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003414:	4baa      	ldr	r3, [pc, #680]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003416:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003418:	4ba9      	ldr	r3, [pc, #676]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800341a:	2101      	movs	r1, #1
 800341c:	430a      	orrs	r2, r1
 800341e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003420:	f7fe fb4a 	bl	8001ab8 <HAL_GetTick>
 8003424:	0003      	movs	r3, r0
 8003426:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800342a:	f7fe fb45 	bl	8001ab8 <HAL_GetTick>
 800342e:	0002      	movs	r2, r0
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e177      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800343c:	4ba0      	ldr	r3, [pc, #640]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800343e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003440:	2202      	movs	r2, #2
 8003442:	4013      	ands	r3, r2
 8003444:	d0f1      	beq.n	800342a <HAL_RCC_OscConfig+0x3ea>
 8003446:	e018      	b.n	800347a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003448:	4b9d      	ldr	r3, [pc, #628]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800344a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800344c:	4b9c      	ldr	r3, [pc, #624]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800344e:	2101      	movs	r1, #1
 8003450:	438a      	bics	r2, r1
 8003452:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003454:	f7fe fb30 	bl	8001ab8 <HAL_GetTick>
 8003458:	0003      	movs	r3, r0
 800345a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800345e:	f7fe fb2b 	bl	8001ab8 <HAL_GetTick>
 8003462:	0002      	movs	r2, r0
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e15d      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003470:	4b93      	ldr	r3, [pc, #588]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003474:	2202      	movs	r2, #2
 8003476:	4013      	ands	r3, r2
 8003478:	d1f1      	bne.n	800345e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2204      	movs	r2, #4
 8003480:	4013      	ands	r3, r2
 8003482:	d100      	bne.n	8003486 <HAL_RCC_OscConfig+0x446>
 8003484:	e0ae      	b.n	80035e4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003486:	2023      	movs	r0, #35	@ 0x23
 8003488:	183b      	adds	r3, r7, r0
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348e:	4b8c      	ldr	r3, [pc, #560]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003490:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003492:	2380      	movs	r3, #128	@ 0x80
 8003494:	055b      	lsls	r3, r3, #21
 8003496:	4013      	ands	r3, r2
 8003498:	d109      	bne.n	80034ae <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	4b89      	ldr	r3, [pc, #548]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800349c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800349e:	4b88      	ldr	r3, [pc, #544]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 80034a0:	2180      	movs	r1, #128	@ 0x80
 80034a2:	0549      	lsls	r1, r1, #21
 80034a4:	430a      	orrs	r2, r1
 80034a6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80034a8:	183b      	adds	r3, r7, r0
 80034aa:	2201      	movs	r2, #1
 80034ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ae:	4b87      	ldr	r3, [pc, #540]	@ (80036cc <HAL_RCC_OscConfig+0x68c>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	2380      	movs	r3, #128	@ 0x80
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4013      	ands	r3, r2
 80034b8:	d11a      	bne.n	80034f0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ba:	4b84      	ldr	r3, [pc, #528]	@ (80036cc <HAL_RCC_OscConfig+0x68c>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b83      	ldr	r3, [pc, #524]	@ (80036cc <HAL_RCC_OscConfig+0x68c>)
 80034c0:	2180      	movs	r1, #128	@ 0x80
 80034c2:	0049      	lsls	r1, r1, #1
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c8:	f7fe faf6 	bl	8001ab8 <HAL_GetTick>
 80034cc:	0003      	movs	r3, r0
 80034ce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d2:	f7fe faf1 	bl	8001ab8 <HAL_GetTick>
 80034d6:	0002      	movs	r2, r0
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b64      	cmp	r3, #100	@ 0x64
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e123      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	4b79      	ldr	r3, [pc, #484]	@ (80036cc <HAL_RCC_OscConfig+0x68c>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4013      	ands	r3, r2
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	2380      	movs	r3, #128	@ 0x80
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d107      	bne.n	800350c <HAL_RCC_OscConfig+0x4cc>
 80034fc:	4b70      	ldr	r3, [pc, #448]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 80034fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003500:	4b6f      	ldr	r3, [pc, #444]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003502:	2180      	movs	r1, #128	@ 0x80
 8003504:	0049      	lsls	r1, r1, #1
 8003506:	430a      	orrs	r2, r1
 8003508:	651a      	str	r2, [r3, #80]	@ 0x50
 800350a:	e031      	b.n	8003570 <HAL_RCC_OscConfig+0x530>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10c      	bne.n	800352e <HAL_RCC_OscConfig+0x4ee>
 8003514:	4b6a      	ldr	r3, [pc, #424]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003516:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003518:	4b69      	ldr	r3, [pc, #420]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800351a:	496b      	ldr	r1, [pc, #428]	@ (80036c8 <HAL_RCC_OscConfig+0x688>)
 800351c:	400a      	ands	r2, r1
 800351e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003520:	4b67      	ldr	r3, [pc, #412]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003522:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003524:	4b66      	ldr	r3, [pc, #408]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003526:	496a      	ldr	r1, [pc, #424]	@ (80036d0 <HAL_RCC_OscConfig+0x690>)
 8003528:	400a      	ands	r2, r1
 800352a:	651a      	str	r2, [r3, #80]	@ 0x50
 800352c:	e020      	b.n	8003570 <HAL_RCC_OscConfig+0x530>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	23a0      	movs	r3, #160	@ 0xa0
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	429a      	cmp	r2, r3
 8003538:	d10e      	bne.n	8003558 <HAL_RCC_OscConfig+0x518>
 800353a:	4b61      	ldr	r3, [pc, #388]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800353c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800353e:	4b60      	ldr	r3, [pc, #384]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003540:	2180      	movs	r1, #128	@ 0x80
 8003542:	00c9      	lsls	r1, r1, #3
 8003544:	430a      	orrs	r2, r1
 8003546:	651a      	str	r2, [r3, #80]	@ 0x50
 8003548:	4b5d      	ldr	r3, [pc, #372]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800354a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800354c:	4b5c      	ldr	r3, [pc, #368]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800354e:	2180      	movs	r1, #128	@ 0x80
 8003550:	0049      	lsls	r1, r1, #1
 8003552:	430a      	orrs	r2, r1
 8003554:	651a      	str	r2, [r3, #80]	@ 0x50
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0x530>
 8003558:	4b59      	ldr	r3, [pc, #356]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800355a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800355c:	4b58      	ldr	r3, [pc, #352]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800355e:	495a      	ldr	r1, [pc, #360]	@ (80036c8 <HAL_RCC_OscConfig+0x688>)
 8003560:	400a      	ands	r2, r1
 8003562:	651a      	str	r2, [r3, #80]	@ 0x50
 8003564:	4b56      	ldr	r3, [pc, #344]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003566:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003568:	4b55      	ldr	r3, [pc, #340]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800356a:	4959      	ldr	r1, [pc, #356]	@ (80036d0 <HAL_RCC_OscConfig+0x690>)
 800356c:	400a      	ands	r2, r1
 800356e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d015      	beq.n	80035a4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003578:	f7fe fa9e 	bl	8001ab8 <HAL_GetTick>
 800357c:	0003      	movs	r3, r0
 800357e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003580:	e009      	b.n	8003596 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fe fa99 	bl	8001ab8 <HAL_GetTick>
 8003586:	0002      	movs	r2, r0
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	4a51      	ldr	r2, [pc, #324]	@ (80036d4 <HAL_RCC_OscConfig+0x694>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e0ca      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003596:	4b4a      	ldr	r3, [pc, #296]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003598:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800359a:	2380      	movs	r3, #128	@ 0x80
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4013      	ands	r3, r2
 80035a0:	d0ef      	beq.n	8003582 <HAL_RCC_OscConfig+0x542>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a4:	f7fe fa88 	bl	8001ab8 <HAL_GetTick>
 80035a8:	0003      	movs	r3, r0
 80035aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035ac:	e009      	b.n	80035c2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f7fe fa83 	bl	8001ab8 <HAL_GetTick>
 80035b2:	0002      	movs	r2, r0
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	4a46      	ldr	r2, [pc, #280]	@ (80036d4 <HAL_RCC_OscConfig+0x694>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e0b4      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035c2:	4b3f      	ldr	r3, [pc, #252]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 80035c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035c6:	2380      	movs	r3, #128	@ 0x80
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4013      	ands	r3, r2
 80035cc:	d1ef      	bne.n	80035ae <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035ce:	2323      	movs	r3, #35	@ 0x23
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d8:	4b39      	ldr	r3, [pc, #228]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 80035da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035dc:	4b38      	ldr	r3, [pc, #224]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 80035de:	493e      	ldr	r1, [pc, #248]	@ (80036d8 <HAL_RCC_OscConfig+0x698>)
 80035e0:	400a      	ands	r2, r1
 80035e2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d100      	bne.n	80035ee <HAL_RCC_OscConfig+0x5ae>
 80035ec:	e09d      	b.n	800372a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	d100      	bne.n	80035f6 <HAL_RCC_OscConfig+0x5b6>
 80035f4:	e076      	b.n	80036e4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d145      	bne.n	800368a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fe:	4b30      	ldr	r3, [pc, #192]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	4b2f      	ldr	r3, [pc, #188]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003604:	4935      	ldr	r1, [pc, #212]	@ (80036dc <HAL_RCC_OscConfig+0x69c>)
 8003606:	400a      	ands	r2, r1
 8003608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360a:	f7fe fa55 	bl	8001ab8 <HAL_GetTick>
 800360e:	0003      	movs	r3, r0
 8003610:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003614:	f7fe fa50 	bl	8001ab8 <HAL_GetTick>
 8003618:	0002      	movs	r2, r0
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e082      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003626:	4b26      	ldr	r3, [pc, #152]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	2380      	movs	r3, #128	@ 0x80
 800362c:	049b      	lsls	r3, r3, #18
 800362e:	4013      	ands	r3, r2
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003632:	4b23      	ldr	r3, [pc, #140]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	4a2a      	ldr	r2, [pc, #168]	@ (80036e0 <HAL_RCC_OscConfig+0x6a0>)
 8003638:	4013      	ands	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	431a      	orrs	r2, r3
 800364c:	4b1c      	ldr	r3, [pc, #112]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800364e:	430a      	orrs	r2, r1
 8003650:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003652:	4b1b      	ldr	r3, [pc, #108]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4b1a      	ldr	r3, [pc, #104]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003658:	2180      	movs	r1, #128	@ 0x80
 800365a:	0449      	lsls	r1, r1, #17
 800365c:	430a      	orrs	r2, r1
 800365e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fe fa2a 	bl	8001ab8 <HAL_GetTick>
 8003664:	0003      	movs	r3, r0
 8003666:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366a:	f7fe fa25 	bl	8001ab8 <HAL_GetTick>
 800366e:	0002      	movs	r2, r0
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e057      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800367c:	4b10      	ldr	r3, [pc, #64]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	2380      	movs	r3, #128	@ 0x80
 8003682:	049b      	lsls	r3, r3, #18
 8003684:	4013      	ands	r3, r2
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x62a>
 8003688:	e04f      	b.n	800372a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368a:	4b0d      	ldr	r3, [pc, #52]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4b0c      	ldr	r3, [pc, #48]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 8003690:	4912      	ldr	r1, [pc, #72]	@ (80036dc <HAL_RCC_OscConfig+0x69c>)
 8003692:	400a      	ands	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003696:	f7fe fa0f 	bl	8001ab8 <HAL_GetTick>
 800369a:	0003      	movs	r3, r0
 800369c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe fa0a 	bl	8001ab8 <HAL_GetTick>
 80036a4:	0002      	movs	r2, r0
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e03c      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036b2:	4b03      	ldr	r3, [pc, #12]	@ (80036c0 <HAL_RCC_OscConfig+0x680>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	2380      	movs	r3, #128	@ 0x80
 80036b8:	049b      	lsls	r3, r3, #18
 80036ba:	4013      	ands	r3, r2
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x660>
 80036be:	e034      	b.n	800372a <HAL_RCC_OscConfig+0x6ea>
 80036c0:	40021000 	.word	0x40021000
 80036c4:	ffff1fff 	.word	0xffff1fff
 80036c8:	fffffeff 	.word	0xfffffeff
 80036cc:	40007000 	.word	0x40007000
 80036d0:	fffffbff 	.word	0xfffffbff
 80036d4:	00001388 	.word	0x00001388
 80036d8:	efffffff 	.word	0xefffffff
 80036dc:	feffffff 	.word	0xfeffffff
 80036e0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036f0:	4b10      	ldr	r3, [pc, #64]	@ (8003734 <HAL_RCC_OscConfig+0x6f4>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	2380      	movs	r3, #128	@ 0x80
 80036fa:	025b      	lsls	r3, r3, #9
 80036fc:	401a      	ands	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003702:	429a      	cmp	r2, r3
 8003704:	d10f      	bne.n	8003726 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	23f0      	movs	r3, #240	@ 0xf0
 800370a:	039b      	lsls	r3, r3, #14
 800370c:	401a      	ands	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d107      	bne.n	8003726 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	23c0      	movs	r3, #192	@ 0xc0
 800371a:	041b      	lsls	r3, r3, #16
 800371c:	401a      	ands	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d001      	beq.n	800372a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b00a      	add	sp, #40	@ 0x28
 8003732:	bdb0      	pop	{r4, r5, r7, pc}
 8003734:	40021000 	.word	0x40021000

08003738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003738:	b5b0      	push	{r4, r5, r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e128      	b.n	800399e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b96      	ldr	r3, [pc, #600]	@ (80039a8 <HAL_RCC_ClockConfig+0x270>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2201      	movs	r2, #1
 8003752:	4013      	ands	r3, r2
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d91e      	bls.n	8003798 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b93      	ldr	r3, [pc, #588]	@ (80039a8 <HAL_RCC_ClockConfig+0x270>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2201      	movs	r2, #1
 8003760:	4393      	bics	r3, r2
 8003762:	0019      	movs	r1, r3
 8003764:	4b90      	ldr	r3, [pc, #576]	@ (80039a8 <HAL_RCC_ClockConfig+0x270>)
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800376c:	f7fe f9a4 	bl	8001ab8 <HAL_GetTick>
 8003770:	0003      	movs	r3, r0
 8003772:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003774:	e009      	b.n	800378a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003776:	f7fe f99f 	bl	8001ab8 <HAL_GetTick>
 800377a:	0002      	movs	r2, r0
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	4a8a      	ldr	r2, [pc, #552]	@ (80039ac <HAL_RCC_ClockConfig+0x274>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e109      	b.n	800399e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800378a:	4b87      	ldr	r3, [pc, #540]	@ (80039a8 <HAL_RCC_ClockConfig+0x270>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2201      	movs	r2, #1
 8003790:	4013      	ands	r3, r2
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d1ee      	bne.n	8003776 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2202      	movs	r2, #2
 800379e:	4013      	ands	r3, r2
 80037a0:	d009      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a2:	4b83      	ldr	r3, [pc, #524]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	22f0      	movs	r2, #240	@ 0xf0
 80037a8:	4393      	bics	r3, r2
 80037aa:	0019      	movs	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	4b7f      	ldr	r3, [pc, #508]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 80037b2:	430a      	orrs	r2, r1
 80037b4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2201      	movs	r2, #1
 80037bc:	4013      	ands	r3, r2
 80037be:	d100      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x8a>
 80037c0:	e089      	b.n	80038d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d107      	bne.n	80037da <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037ca:	4b79      	ldr	r3, [pc, #484]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	2380      	movs	r3, #128	@ 0x80
 80037d0:	029b      	lsls	r3, r3, #10
 80037d2:	4013      	ands	r3, r2
 80037d4:	d120      	bne.n	8003818 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0e1      	b.n	800399e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037e2:	4b73      	ldr	r3, [pc, #460]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	2380      	movs	r3, #128	@ 0x80
 80037e8:	049b      	lsls	r3, r3, #18
 80037ea:	4013      	ands	r3, r2
 80037ec:	d114      	bne.n	8003818 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0d5      	b.n	800399e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d106      	bne.n	8003808 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037fa:	4b6d      	ldr	r3, [pc, #436]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2204      	movs	r2, #4
 8003800:	4013      	ands	r3, r2
 8003802:	d109      	bne.n	8003818 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0ca      	b.n	800399e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003808:	4b69      	ldr	r3, [pc, #420]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	2380      	movs	r3, #128	@ 0x80
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4013      	ands	r3, r2
 8003812:	d101      	bne.n	8003818 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0c2      	b.n	800399e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003818:	4b65      	ldr	r3, [pc, #404]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2203      	movs	r2, #3
 800381e:	4393      	bics	r3, r2
 8003820:	0019      	movs	r1, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	4b62      	ldr	r3, [pc, #392]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 8003828:	430a      	orrs	r2, r1
 800382a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800382c:	f7fe f944 	bl	8001ab8 <HAL_GetTick>
 8003830:	0003      	movs	r3, r0
 8003832:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d111      	bne.n	8003860 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800383c:	e009      	b.n	8003852 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383e:	f7fe f93b 	bl	8001ab8 <HAL_GetTick>
 8003842:	0002      	movs	r2, r0
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	4a58      	ldr	r2, [pc, #352]	@ (80039ac <HAL_RCC_ClockConfig+0x274>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0a5      	b.n	800399e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003852:	4b57      	ldr	r3, [pc, #348]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	220c      	movs	r2, #12
 8003858:	4013      	ands	r3, r2
 800385a:	2b08      	cmp	r3, #8
 800385c:	d1ef      	bne.n	800383e <HAL_RCC_ClockConfig+0x106>
 800385e:	e03a      	b.n	80038d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d111      	bne.n	800388c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003868:	e009      	b.n	800387e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386a:	f7fe f925 	bl	8001ab8 <HAL_GetTick>
 800386e:	0002      	movs	r2, r0
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	4a4d      	ldr	r2, [pc, #308]	@ (80039ac <HAL_RCC_ClockConfig+0x274>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e08f      	b.n	800399e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800387e:	4b4c      	ldr	r3, [pc, #304]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	220c      	movs	r2, #12
 8003884:	4013      	ands	r3, r2
 8003886:	2b0c      	cmp	r3, #12
 8003888:	d1ef      	bne.n	800386a <HAL_RCC_ClockConfig+0x132>
 800388a:	e024      	b.n	80038d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d11b      	bne.n	80038cc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003894:	e009      	b.n	80038aa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003896:	f7fe f90f 	bl	8001ab8 <HAL_GetTick>
 800389a:	0002      	movs	r2, r0
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	4a42      	ldr	r2, [pc, #264]	@ (80039ac <HAL_RCC_ClockConfig+0x274>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e079      	b.n	800399e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80038aa:	4b41      	ldr	r3, [pc, #260]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	220c      	movs	r2, #12
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d1ef      	bne.n	8003896 <HAL_RCC_ClockConfig+0x15e>
 80038b6:	e00e      	b.n	80038d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b8:	f7fe f8fe 	bl	8001ab8 <HAL_GetTick>
 80038bc:	0002      	movs	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	4a3a      	ldr	r2, [pc, #232]	@ (80039ac <HAL_RCC_ClockConfig+0x274>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e068      	b.n	800399e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80038cc:	4b38      	ldr	r3, [pc, #224]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	220c      	movs	r2, #12
 80038d2:	4013      	ands	r3, r2
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d6:	4b34      	ldr	r3, [pc, #208]	@ (80039a8 <HAL_RCC_ClockConfig+0x270>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2201      	movs	r2, #1
 80038dc:	4013      	ands	r3, r2
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d21e      	bcs.n	8003922 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e4:	4b30      	ldr	r3, [pc, #192]	@ (80039a8 <HAL_RCC_ClockConfig+0x270>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2201      	movs	r2, #1
 80038ea:	4393      	bics	r3, r2
 80038ec:	0019      	movs	r1, r3
 80038ee:	4b2e      	ldr	r3, [pc, #184]	@ (80039a8 <HAL_RCC_ClockConfig+0x270>)
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038f6:	f7fe f8df 	bl	8001ab8 <HAL_GetTick>
 80038fa:	0003      	movs	r3, r0
 80038fc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	e009      	b.n	8003914 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003900:	f7fe f8da 	bl	8001ab8 <HAL_GetTick>
 8003904:	0002      	movs	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	4a28      	ldr	r2, [pc, #160]	@ (80039ac <HAL_RCC_ClockConfig+0x274>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e044      	b.n	800399e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003914:	4b24      	ldr	r3, [pc, #144]	@ (80039a8 <HAL_RCC_ClockConfig+0x270>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2201      	movs	r2, #1
 800391a:	4013      	ands	r3, r2
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d1ee      	bne.n	8003900 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2204      	movs	r2, #4
 8003928:	4013      	ands	r3, r2
 800392a:	d009      	beq.n	8003940 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800392c:	4b20      	ldr	r3, [pc, #128]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4a20      	ldr	r2, [pc, #128]	@ (80039b4 <HAL_RCC_ClockConfig+0x27c>)
 8003932:	4013      	ands	r3, r2
 8003934:	0019      	movs	r1, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	4b1d      	ldr	r3, [pc, #116]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 800393c:	430a      	orrs	r2, r1
 800393e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2208      	movs	r2, #8
 8003946:	4013      	ands	r3, r2
 8003948:	d00a      	beq.n	8003960 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800394a:	4b19      	ldr	r3, [pc, #100]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	4a1a      	ldr	r2, [pc, #104]	@ (80039b8 <HAL_RCC_ClockConfig+0x280>)
 8003950:	4013      	ands	r3, r2
 8003952:	0019      	movs	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	00da      	lsls	r2, r3, #3
 800395a:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 800395c:	430a      	orrs	r2, r1
 800395e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003960:	f000 f832 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8003964:	0001      	movs	r1, r0
 8003966:	4b12      	ldr	r3, [pc, #72]	@ (80039b0 <HAL_RCC_ClockConfig+0x278>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	220f      	movs	r2, #15
 800396e:	4013      	ands	r3, r2
 8003970:	4a12      	ldr	r2, [pc, #72]	@ (80039bc <HAL_RCC_ClockConfig+0x284>)
 8003972:	5cd3      	ldrb	r3, [r2, r3]
 8003974:	000a      	movs	r2, r1
 8003976:	40da      	lsrs	r2, r3
 8003978:	4b11      	ldr	r3, [pc, #68]	@ (80039c0 <HAL_RCC_ClockConfig+0x288>)
 800397a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800397c:	4b11      	ldr	r3, [pc, #68]	@ (80039c4 <HAL_RCC_ClockConfig+0x28c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	250b      	movs	r5, #11
 8003982:	197c      	adds	r4, r7, r5
 8003984:	0018      	movs	r0, r3
 8003986:	f7fe f851 	bl	8001a2c <HAL_InitTick>
 800398a:	0003      	movs	r3, r0
 800398c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800398e:	197b      	adds	r3, r7, r5
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003996:	197b      	adds	r3, r7, r5
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	e000      	b.n	800399e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b004      	add	sp, #16
 80039a4:	bdb0      	pop	{r4, r5, r7, pc}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	40022000 	.word	0x40022000
 80039ac:	00001388 	.word	0x00001388
 80039b0:	40021000 	.word	0x40021000
 80039b4:	fffff8ff 	.word	0xfffff8ff
 80039b8:	ffffc7ff 	.word	0xffffc7ff
 80039bc:	08006b10 	.word	0x08006b10
 80039c0:	2000000c 	.word	0x2000000c
 80039c4:	20000010 	.word	0x20000010

080039c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c8:	b5b0      	push	{r4, r5, r7, lr}
 80039ca:	b08e      	sub	sp, #56	@ 0x38
 80039cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80039ce:	4b4c      	ldr	r3, [pc, #304]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x138>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039d6:	230c      	movs	r3, #12
 80039d8:	4013      	ands	r3, r2
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d014      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x40>
 80039de:	d900      	bls.n	80039e2 <HAL_RCC_GetSysClockFreq+0x1a>
 80039e0:	e07b      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x112>
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d002      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x24>
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d00b      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ea:	e076      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80039ec:	4b44      	ldr	r3, [pc, #272]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x138>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2210      	movs	r2, #16
 80039f2:	4013      	ands	r3, r2
 80039f4:	d002      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80039f6:	4b43      	ldr	r3, [pc, #268]	@ (8003b04 <HAL_RCC_GetSysClockFreq+0x13c>)
 80039f8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80039fa:	e07c      	b.n	8003af6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80039fc:	4b42      	ldr	r3, [pc, #264]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x140>)
 80039fe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003a00:	e079      	b.n	8003af6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a02:	4b42      	ldr	r3, [pc, #264]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x144>)
 8003a04:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003a06:	e076      	b.n	8003af6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0a:	0c9a      	lsrs	r2, r3, #18
 8003a0c:	230f      	movs	r3, #15
 8003a0e:	401a      	ands	r2, r3
 8003a10:	4b3f      	ldr	r3, [pc, #252]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x148>)
 8003a12:	5c9b      	ldrb	r3, [r3, r2]
 8003a14:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a18:	0d9a      	lsrs	r2, r3, #22
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	3301      	adds	r3, #1
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a22:	4b37      	ldr	r3, [pc, #220]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	2380      	movs	r3, #128	@ 0x80
 8003a28:	025b      	lsls	r3, r3, #9
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d01a      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	4a35      	ldr	r2, [pc, #212]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x144>)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	69b8      	ldr	r0, [r7, #24]
 8003a3c:	69f9      	ldr	r1, [r7, #28]
 8003a3e:	f7fc fc21 	bl	8000284 <__aeabi_lmul>
 8003a42:	0002      	movs	r2, r0
 8003a44:	000b      	movs	r3, r1
 8003a46:	0010      	movs	r0, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f7fc fbf5 	bl	8000244 <__aeabi_uldivmod>
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	000b      	movs	r3, r1
 8003a5e:	0013      	movs	r3, r2
 8003a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a62:	e037      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a64:	4b26      	ldr	r3, [pc, #152]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2210      	movs	r2, #16
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d01a      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	4a23      	ldr	r2, [pc, #140]	@ (8003b04 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a78:	2300      	movs	r3, #0
 8003a7a:	68b8      	ldr	r0, [r7, #8]
 8003a7c:	68f9      	ldr	r1, [r7, #12]
 8003a7e:	f7fc fc01 	bl	8000284 <__aeabi_lmul>
 8003a82:	0002      	movs	r2, r0
 8003a84:	000b      	movs	r3, r1
 8003a86:	0010      	movs	r0, r2
 8003a88:	0019      	movs	r1, r3
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	603b      	str	r3, [r7, #0]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f7fc fbd5 	bl	8000244 <__aeabi_uldivmod>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	000b      	movs	r3, r1
 8003a9e:	0013      	movs	r3, r2
 8003aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aa2:	e017      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	0019      	movs	r1, r3
 8003aac:	4a16      	ldr	r2, [pc, #88]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x140>)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f7fc fbe8 	bl	8000284 <__aeabi_lmul>
 8003ab4:	0002      	movs	r2, r0
 8003ab6:	000b      	movs	r3, r1
 8003ab8:	0010      	movs	r0, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	001c      	movs	r4, r3
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	001d      	movs	r5, r3
 8003ac4:	0022      	movs	r2, r4
 8003ac6:	002b      	movs	r3, r5
 8003ac8:	f7fc fbbc 	bl	8000244 <__aeabi_uldivmod>
 8003acc:	0002      	movs	r2, r0
 8003ace:	000b      	movs	r3, r1
 8003ad0:	0013      	movs	r3, r2
 8003ad2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003ad8:	e00d      	b.n	8003af6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ada:	4b09      	ldr	r3, [pc, #36]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x138>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	0b5b      	lsrs	r3, r3, #13
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	2280      	movs	r2, #128	@ 0x80
 8003aec:	0212      	lsls	r2, r2, #8
 8003aee:	409a      	lsls	r2, r3
 8003af0:	0013      	movs	r3, r2
 8003af2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003af4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003af8:	0018      	movs	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b00e      	add	sp, #56	@ 0x38
 8003afe:	bdb0      	pop	{r4, r5, r7, pc}
 8003b00:	40021000 	.word	0x40021000
 8003b04:	003d0900 	.word	0x003d0900
 8003b08:	00f42400 	.word	0x00f42400
 8003b0c:	007a1200 	.word	0x007a1200
 8003b10:	08006b28 	.word	0x08006b28

08003b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b18:	4b02      	ldr	r3, [pc, #8]	@ (8003b24 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
}
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	2000000c 	.word	0x2000000c

08003b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b2c:	f7ff fff2 	bl	8003b14 <HAL_RCC_GetHCLKFreq>
 8003b30:	0001      	movs	r1, r0
 8003b32:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	0a1b      	lsrs	r3, r3, #8
 8003b38:	2207      	movs	r2, #7
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	4a04      	ldr	r2, [pc, #16]	@ (8003b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b3e:	5cd3      	ldrb	r3, [r2, r3]
 8003b40:	40d9      	lsrs	r1, r3
 8003b42:	000b      	movs	r3, r1
}
 8003b44:	0018      	movs	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	08006b20 	.word	0x08006b20

08003b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b58:	f7ff ffdc 	bl	8003b14 <HAL_RCC_GetHCLKFreq>
 8003b5c:	0001      	movs	r1, r0
 8003b5e:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	0adb      	lsrs	r3, r3, #11
 8003b64:	2207      	movs	r2, #7
 8003b66:	4013      	ands	r3, r2
 8003b68:	4a04      	ldr	r2, [pc, #16]	@ (8003b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b6a:	5cd3      	ldrb	r3, [r2, r3]
 8003b6c:	40d9      	lsrs	r1, r3
 8003b6e:	000b      	movs	r3, r1
}
 8003b70:	0018      	movs	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	08006b20 	.word	0x08006b20

08003b80 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003b88:	2017      	movs	r0, #23
 8003b8a:	183b      	adds	r3, r7, r0
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2220      	movs	r2, #32
 8003b96:	4013      	ands	r3, r2
 8003b98:	d100      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003b9a:	e0c7      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b9c:	4b84      	ldr	r3, [pc, #528]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ba0:	2380      	movs	r3, #128	@ 0x80
 8003ba2:	055b      	lsls	r3, r3, #21
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d109      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba8:	4b81      	ldr	r3, [pc, #516]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003baa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bac:	4b80      	ldr	r3, [pc, #512]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003bae:	2180      	movs	r1, #128	@ 0x80
 8003bb0:	0549      	lsls	r1, r1, #21
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003bb6:	183b      	adds	r3, r7, r0
 8003bb8:	2201      	movs	r2, #1
 8003bba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	4b7d      	ldr	r3, [pc, #500]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	2380      	movs	r3, #128	@ 0x80
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d11a      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc8:	4b7a      	ldr	r3, [pc, #488]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4b79      	ldr	r3, [pc, #484]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003bce:	2180      	movs	r1, #128	@ 0x80
 8003bd0:	0049      	lsls	r1, r1, #1
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd6:	f7fd ff6f 	bl	8001ab8 <HAL_GetTick>
 8003bda:	0003      	movs	r3, r0
 8003bdc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bde:	e008      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be0:	f7fd ff6a 	bl	8001ab8 <HAL_GetTick>
 8003be4:	0002      	movs	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	@ 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e0d9      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf2:	4b70      	ldr	r3, [pc, #448]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	2380      	movs	r3, #128	@ 0x80
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d0f0      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003bfe:	4b6c      	ldr	r3, [pc, #432]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	23c0      	movs	r3, #192	@ 0xc0
 8003c04:	039b      	lsls	r3, r3, #14
 8003c06:	4013      	ands	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	23c0      	movs	r3, #192	@ 0xc0
 8003c10:	039b      	lsls	r3, r3, #14
 8003c12:	4013      	ands	r3, r2
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d013      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	23c0      	movs	r3, #192	@ 0xc0
 8003c20:	029b      	lsls	r3, r3, #10
 8003c22:	401a      	ands	r2, r3
 8003c24:	23c0      	movs	r3, #192	@ 0xc0
 8003c26:	029b      	lsls	r3, r3, #10
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d10a      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003c2c:	4b60      	ldr	r3, [pc, #384]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	2380      	movs	r3, #128	@ 0x80
 8003c32:	029b      	lsls	r3, r3, #10
 8003c34:	401a      	ands	r2, r3
 8003c36:	2380      	movs	r3, #128	@ 0x80
 8003c38:	029b      	lsls	r3, r3, #10
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0b1      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003c42:	4b5b      	ldr	r3, [pc, #364]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c46:	23c0      	movs	r3, #192	@ 0xc0
 8003c48:	029b      	lsls	r3, r3, #10
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d03b      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	23c0      	movs	r3, #192	@ 0xc0
 8003c5a:	029b      	lsls	r3, r3, #10
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d033      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d02e      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003c6e:	4b50      	ldr	r3, [pc, #320]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c72:	4a51      	ldr	r2, [pc, #324]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c78:	4b4d      	ldr	r3, [pc, #308]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c7c:	4b4c      	ldr	r3, [pc, #304]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c7e:	2180      	movs	r1, #128	@ 0x80
 8003c80:	0309      	lsls	r1, r1, #12
 8003c82:	430a      	orrs	r2, r1
 8003c84:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c86:	4b4a      	ldr	r3, [pc, #296]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c8a:	4b49      	ldr	r3, [pc, #292]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c8c:	494b      	ldr	r1, [pc, #300]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c8e:	400a      	ands	r2, r1
 8003c90:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003c92:	4b47      	ldr	r3, [pc, #284]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	2380      	movs	r3, #128	@ 0x80
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d014      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fd ff09 	bl	8001ab8 <HAL_GetTick>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003caa:	e009      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cac:	f7fd ff04 	bl	8001ab8 <HAL_GetTick>
 8003cb0:	0002      	movs	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	4a42      	ldr	r2, [pc, #264]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e072      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003cc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003cc4:	2380      	movs	r3, #128	@ 0x80
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d0ef      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d01f      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	23c0      	movs	r3, #192	@ 0xc0
 8003cdc:	029b      	lsls	r3, r3, #10
 8003cde:	401a      	ands	r2, r3
 8003ce0:	23c0      	movs	r3, #192	@ 0xc0
 8003ce2:	029b      	lsls	r3, r3, #10
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d10c      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003ce8:	4b31      	ldr	r3, [pc, #196]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a35      	ldr	r2, [pc, #212]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	0019      	movs	r1, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	23c0      	movs	r3, #192	@ 0xc0
 8003cf8:	039b      	lsls	r3, r3, #14
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	4b2b      	ldr	r3, [pc, #172]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d04:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	23c0      	movs	r3, #192	@ 0xc0
 8003d0c:	029b      	lsls	r3, r3, #10
 8003d0e:	401a      	ands	r2, r3
 8003d10:	4b27      	ldr	r3, [pc, #156]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d12:	430a      	orrs	r2, r1
 8003d14:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d16:	2317      	movs	r3, #23
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d105      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d20:	4b23      	ldr	r3, [pc, #140]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d24:	4b22      	ldr	r3, [pc, #136]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d26:	4928      	ldr	r1, [pc, #160]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d28:	400a      	ands	r2, r1
 8003d2a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2202      	movs	r2, #2
 8003d32:	4013      	ands	r3, r2
 8003d34:	d009      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d36:	4b1e      	ldr	r3, [pc, #120]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3a:	220c      	movs	r2, #12
 8003d3c:	4393      	bics	r3, r2
 8003d3e:	0019      	movs	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	4b1a      	ldr	r3, [pc, #104]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d46:	430a      	orrs	r2, r1
 8003d48:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2204      	movs	r2, #4
 8003d50:	4013      	ands	r3, r2
 8003d52:	d009      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d54:	4b16      	ldr	r3, [pc, #88]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d58:	4a1c      	ldr	r2, [pc, #112]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	4b13      	ldr	r3, [pc, #76]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d64:	430a      	orrs	r2, r1
 8003d66:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d72:	4b0f      	ldr	r3, [pc, #60]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d76:	4a16      	ldr	r2, [pc, #88]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	4b0b      	ldr	r3, [pc, #44]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d82:	430a      	orrs	r2, r1
 8003d84:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2280      	movs	r2, #128	@ 0x80
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003d90:	4b07      	ldr	r3, [pc, #28]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d94:	4a0f      	ldr	r2, [pc, #60]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	0019      	movs	r1, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	4b04      	ldr	r3, [pc, #16]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003da0:	430a      	orrs	r2, r1
 8003da2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	0018      	movs	r0, r3
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b006      	add	sp, #24
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
 8003db8:	fffcffff 	.word	0xfffcffff
 8003dbc:	fff7ffff 	.word	0xfff7ffff
 8003dc0:	00001388 	.word	0x00001388
 8003dc4:	ffcfffff 	.word	0xffcfffff
 8003dc8:	efffffff 	.word	0xefffffff
 8003dcc:	fffff3ff 	.word	0xfffff3ff
 8003dd0:	ffffcfff 	.word	0xffffcfff
 8003dd4:	fff3ffff 	.word	0xfff3ffff

08003dd8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003dd8:	b5b0      	push	{r4, r5, r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003de0:	230f      	movs	r3, #15
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	2201      	movs	r2, #1
 8003de6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e088      	b.n	8003f04 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2221      	movs	r2, #33	@ 0x21
 8003df6:	5c9b      	ldrb	r3, [r3, r2]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d107      	bne.n	8003e0e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	2100      	movs	r1, #0
 8003e04:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f7fd fc79 	bl	8001700 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2221      	movs	r2, #33	@ 0x21
 8003e12:	2102      	movs	r1, #2
 8003e14:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d05f      	beq.n	8003ee4 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	22ca      	movs	r2, #202	@ 0xca
 8003e2a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2253      	movs	r2, #83	@ 0x53
 8003e32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003e34:	250f      	movs	r5, #15
 8003e36:	197c      	adds	r4, r7, r5
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f000 fc7e 	bl	800473c <RTC_EnterInitMode>
 8003e40:	0003      	movs	r3, r0
 8003e42:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003e44:	0028      	movs	r0, r5
 8003e46:	183b      	adds	r3, r7, r0
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d12c      	bne.n	8003ea8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	492c      	ldr	r1, [pc, #176]	@ (8003f0c <HAL_RTC_Init+0x134>)
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6899      	ldr	r1, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	68d2      	ldr	r2, [r2, #12]
 8003e84:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6919      	ldr	r1, [r3, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	041a      	lsls	r2, r3, #16
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003e9a:	183c      	adds	r4, r7, r0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f000 fc90 	bl	80047c4 <RTC_ExitInitMode>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003ea8:	230f      	movs	r3, #15
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d113      	bne.n	8003eda <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2103      	movs	r1, #3
 8003ebe:	438a      	bics	r2, r1
 8003ec0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	22ff      	movs	r2, #255	@ 0xff
 8003ee0:	625a      	str	r2, [r3, #36]	@ 0x24
 8003ee2:	e003      	b.n	8003eec <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003ee4:	230f      	movs	r3, #15
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003eec:	230f      	movs	r3, #15
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2221      	movs	r2, #33	@ 0x21
 8003efa:	2101      	movs	r1, #1
 8003efc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003efe:	230f      	movs	r3, #15
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	781b      	ldrb	r3, [r3, #0]
}
 8003f04:	0018      	movs	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b004      	add	sp, #16
 8003f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f0c:	ff8fffbf 	.word	0xff8fffbf

08003f10 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f10:	b5b0      	push	{r4, r5, r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	5c9b      	ldrb	r3, [r3, r2]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_RTC_SetTime+0x1e>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e092      	b.n	8004054 <HAL_RTC_SetTime+0x144>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2221      	movs	r2, #33	@ 0x21
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d125      	bne.n	8003f90 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2240      	movs	r2, #64	@ 0x40
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d102      	bne.n	8003f56 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2200      	movs	r2, #0
 8003f54:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f000 fc5c 	bl	8004818 <RTC_ByteToBcd2>
 8003f60:	0003      	movs	r3, r0
 8003f62:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f000 fc55 	bl	8004818 <RTC_ByteToBcd2>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f72:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	789b      	ldrb	r3, [r3, #2]
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f000 fc4d 	bl	8004818 <RTC_ByteToBcd2>
 8003f7e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f80:	0022      	movs	r2, r4
 8003f82:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	78db      	ldrb	r3, [r3, #3]
 8003f88:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	e017      	b.n	8003fc0 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2240      	movs	r2, #64	@ 0x40
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d102      	bne.n	8003fa2 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	785b      	ldrb	r3, [r3, #1]
 8003fac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fae:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003fb4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	78db      	ldrb	r3, [r3, #3]
 8003fba:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	22ca      	movs	r2, #202	@ 0xca
 8003fc6:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2253      	movs	r2, #83	@ 0x53
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003fd0:	2513      	movs	r5, #19
 8003fd2:	197c      	adds	r4, r7, r5
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f000 fbb0 	bl	800473c <RTC_EnterInitMode>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003fe0:	0028      	movs	r0, r5
 8003fe2:	183b      	adds	r3, r7, r0
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d120      	bne.n	800402c <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	491a      	ldr	r1, [pc, #104]	@ (800405c <HAL_RTC_SetTime+0x14c>)
 8003ff2:	400a      	ands	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4917      	ldr	r1, [pc, #92]	@ (8004060 <HAL_RTC_SetTime+0x150>)
 8004002:	400a      	ands	r2, r1
 8004004:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6899      	ldr	r1, [r3, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	431a      	orrs	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800401e:	183c      	adds	r4, r7, r0
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	0018      	movs	r0, r3
 8004024:	f000 fbce 	bl	80047c4 <RTC_ExitInitMode>
 8004028:	0003      	movs	r3, r0
 800402a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800402c:	2313      	movs	r3, #19
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2221      	movs	r2, #33	@ 0x21
 800403a:	2101      	movs	r1, #1
 800403c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	22ff      	movs	r2, #255	@ 0xff
 8004044:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	2100      	movs	r1, #0
 800404c:	5499      	strb	r1, [r3, r2]

  return status;
 800404e:	2313      	movs	r3, #19
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	781b      	ldrb	r3, [r3, #0]
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b006      	add	sp, #24
 800405a:	bdb0      	pop	{r4, r5, r7, pc}
 800405c:	007f7f7f 	.word	0x007f7f7f
 8004060:	fffbffff 	.word	0xfffbffff

08004064 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	045b      	lsls	r3, r3, #17
 8004086:	0c5a      	lsrs	r2, r3, #17
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a22      	ldr	r2, [pc, #136]	@ (800411c <HAL_RTC_GetTime+0xb8>)
 8004094:	4013      	ands	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	0c1b      	lsrs	r3, r3, #16
 800409c:	b2db      	uxtb	r3, r3
 800409e:	223f      	movs	r2, #63	@ 0x3f
 80040a0:	4013      	ands	r3, r2
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	0a1b      	lsrs	r3, r3, #8
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	227f      	movs	r2, #127	@ 0x7f
 80040b0:	4013      	ands	r3, r2
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	227f      	movs	r2, #127	@ 0x7f
 80040be:	4013      	ands	r3, r2
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	0d9b      	lsrs	r3, r3, #22
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2201      	movs	r2, #1
 80040ce:	4013      	ands	r3, r2
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d11a      	bne.n	8004112 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f000 fbba 	bl	800485a <RTC_Bcd2ToByte>
 80040e6:	0003      	movs	r3, r0
 80040e8:	001a      	movs	r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	785b      	ldrb	r3, [r3, #1]
 80040f2:	0018      	movs	r0, r3
 80040f4:	f000 fbb1 	bl	800485a <RTC_Bcd2ToByte>
 80040f8:	0003      	movs	r3, r0
 80040fa:	001a      	movs	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	789b      	ldrb	r3, [r3, #2]
 8004104:	0018      	movs	r0, r3
 8004106:	f000 fba8 	bl	800485a <RTC_Bcd2ToByte>
 800410a:	0003      	movs	r3, r0
 800410c:	001a      	movs	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	0018      	movs	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	b006      	add	sp, #24
 800411a:	bd80      	pop	{r7, pc}
 800411c:	007f7f7f 	.word	0x007f7f7f

08004120 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004120:	b5b0      	push	{r4, r5, r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	5c9b      	ldrb	r3, [r3, r2]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_RTC_SetDate+0x1e>
 800413a:	2302      	movs	r3, #2
 800413c:	e07e      	b.n	800423c <HAL_RTC_SetDate+0x11c>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	2101      	movs	r1, #1
 8004144:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2221      	movs	r2, #33	@ 0x21
 800414a:	2102      	movs	r1, #2
 800414c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10e      	bne.n	8004172 <HAL_RTC_SetDate+0x52>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	001a      	movs	r2, r3
 800415a:	2310      	movs	r3, #16
 800415c:	4013      	ands	r3, r2
 800415e:	d008      	beq.n	8004172 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	785b      	ldrb	r3, [r3, #1]
 8004164:	2210      	movs	r2, #16
 8004166:	4393      	bics	r3, r2
 8004168:	b2db      	uxtb	r3, r3
 800416a:	330a      	adds	r3, #10
 800416c:	b2da      	uxtb	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d11c      	bne.n	80041b2 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	78db      	ldrb	r3, [r3, #3]
 800417c:	0018      	movs	r0, r3
 800417e:	f000 fb4b 	bl	8004818 <RTC_ByteToBcd2>
 8004182:	0003      	movs	r3, r0
 8004184:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	785b      	ldrb	r3, [r3, #1]
 800418a:	0018      	movs	r0, r3
 800418c:	f000 fb44 	bl	8004818 <RTC_ByteToBcd2>
 8004190:	0003      	movs	r3, r0
 8004192:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004194:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	789b      	ldrb	r3, [r3, #2]
 800419a:	0018      	movs	r0, r3
 800419c:	f000 fb3c 	bl	8004818 <RTC_ByteToBcd2>
 80041a0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80041a2:	0022      	movs	r2, r4
 80041a4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e00e      	b.n	80041d0 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	78db      	ldrb	r3, [r3, #3]
 80041b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	785b      	ldrb	r3, [r3, #1]
 80041bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041be:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80041c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	22ca      	movs	r2, #202	@ 0xca
 80041d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2253      	movs	r2, #83	@ 0x53
 80041de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041e0:	2513      	movs	r5, #19
 80041e2:	197c      	adds	r4, r7, r5
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	0018      	movs	r0, r3
 80041e8:	f000 faa8 	bl	800473c <RTC_EnterInitMode>
 80041ec:	0003      	movs	r3, r0
 80041ee:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80041f0:	0028      	movs	r0, r5
 80041f2:	183b      	adds	r3, r7, r0
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10c      	bne.n	8004214 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4910      	ldr	r1, [pc, #64]	@ (8004244 <HAL_RTC_SetDate+0x124>)
 8004202:	400a      	ands	r2, r1
 8004204:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004206:	183c      	adds	r4, r7, r0
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	0018      	movs	r0, r3
 800420c:	f000 fada 	bl	80047c4 <RTC_ExitInitMode>
 8004210:	0003      	movs	r3, r0
 8004212:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8004214:	2313      	movs	r3, #19
 8004216:	18fb      	adds	r3, r7, r3
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d103      	bne.n	8004226 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2221      	movs	r2, #33	@ 0x21
 8004222:	2101      	movs	r1, #1
 8004224:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	22ff      	movs	r2, #255	@ 0xff
 800422c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	2100      	movs	r1, #0
 8004234:	5499      	strb	r1, [r3, r2]

  return status;
 8004236:	2313      	movs	r3, #19
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	781b      	ldrb	r3, [r3, #0]
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b006      	add	sp, #24
 8004242:	bdb0      	pop	{r4, r5, r7, pc}
 8004244:	00ffff3f 	.word	0x00ffff3f

08004248 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b089      	sub	sp, #36	@ 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004254:	4ba7      	ldr	r3, [pc, #668]	@ (80044f4 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	22fa      	movs	r2, #250	@ 0xfa
 800425a:	01d1      	lsls	r1, r2, #7
 800425c:	0018      	movs	r0, r3
 800425e:	f7fb ff65 	bl	800012c <__udivsi3>
 8004262:	0003      	movs	r3, r0
 8004264:	001a      	movs	r2, r3
 8004266:	0013      	movs	r3, r2
 8004268:	015b      	lsls	r3, r3, #5
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	189b      	adds	r3, r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	5c9b      	ldrb	r3, [r3, r2]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_RTC_SetAlarm_IT+0x42>
 8004286:	2302      	movs	r3, #2
 8004288:	e130      	b.n	80044ec <HAL_RTC_SetAlarm_IT+0x2a4>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	2101      	movs	r1, #1
 8004290:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2221      	movs	r2, #33	@ 0x21
 8004296:	2102      	movs	r1, #2
 8004298:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d136      	bne.n	800430e <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2240      	movs	r2, #64	@ 0x40
 80042a8:	4013      	ands	r3, r2
 80042aa:	d102      	bne.n	80042b2 <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2200      	movs	r2, #0
 80042b0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	0018      	movs	r0, r3
 80042b8:	f000 faae 	bl	8004818 <RTC_ByteToBcd2>
 80042bc:	0003      	movs	r3, r0
 80042be:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	0018      	movs	r0, r3
 80042c6:	f000 faa7 	bl	8004818 <RTC_ByteToBcd2>
 80042ca:	0003      	movs	r3, r0
 80042cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80042ce:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	789b      	ldrb	r3, [r3, #2]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f000 fa9f 	bl	8004818 <RTC_ByteToBcd2>
 80042da:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80042dc:	0022      	movs	r2, r4
 80042de:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	78db      	ldrb	r3, [r3, #3]
 80042e4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80042e6:	431a      	orrs	r2, r3
 80042e8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2220      	movs	r2, #32
 80042ee:	5c9b      	ldrb	r3, [r3, r2]
 80042f0:	0018      	movs	r0, r3
 80042f2:	f000 fa91 	bl	8004818 <RTC_ByteToBcd2>
 80042f6:	0003      	movs	r3, r0
 80042f8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80042fa:	0022      	movs	r2, r4
 80042fc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004302:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004308:	4313      	orrs	r3, r2
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e022      	b.n	8004354 <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2240      	movs	r2, #64	@ 0x40
 8004316:	4013      	ands	r3, r2
 8004318:	d102      	bne.n	8004320 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2200      	movs	r2, #0
 800431e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	785b      	ldrb	r3, [r3, #1]
 800432a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800432c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004332:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	78db      	ldrb	r3, [r3, #3]
 8004338:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800433a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2120      	movs	r1, #32
 8004340:	5c5b      	ldrb	r3, [r3, r1]
 8004342:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004344:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800434a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004350:	4313      	orrs	r3, r2
 8004352:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	22ca      	movs	r2, #202	@ 0xca
 8004366:	625a      	str	r2, [r3, #36]	@ 0x24
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2253      	movs	r2, #83	@ 0x53
 800436e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004374:	2380      	movs	r3, #128	@ 0x80
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	429a      	cmp	r2, r3
 800437a:	d146      	bne.n	800440a <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	495c      	ldr	r1, [pc, #368]	@ (80044f8 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8004388:	400a      	ands	r2, r1
 800438a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	22ff      	movs	r2, #255	@ 0xff
 8004394:	401a      	ands	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4958      	ldr	r1, [pc, #352]	@ (80044fc <HAL_RTC_SetAlarm_IT+0x2b4>)
 800439c:	430a      	orrs	r2, r1
 800439e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10d      	bne.n	80043c8 <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	22ff      	movs	r2, #255	@ 0xff
 80043b2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2221      	movs	r2, #33	@ 0x21
 80043b8:	2103      	movs	r1, #3
 80043ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	2100      	movs	r1, #0
 80043c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e091      	b.n	80044ec <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	4013      	ands	r3, r2
 80043d2:	d0e5      	beq.n	80043a0 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2180      	movs	r1, #128	@ 0x80
 80043f0:	0049      	lsls	r1, r1, #1
 80043f2:	430a      	orrs	r2, r1
 80043f4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2180      	movs	r1, #128	@ 0x80
 8004402:	0149      	lsls	r1, r1, #5
 8004404:	430a      	orrs	r2, r1
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	e055      	b.n	80044b6 <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	493a      	ldr	r1, [pc, #232]	@ (8004500 <HAL_RTC_SetAlarm_IT+0x2b8>)
 8004416:	400a      	ands	r2, r1
 8004418:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	22ff      	movs	r2, #255	@ 0xff
 8004422:	401a      	ands	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4936      	ldr	r1, [pc, #216]	@ (8004504 <HAL_RTC_SetAlarm_IT+0x2bc>)
 800442a:	430a      	orrs	r2, r1
 800442c:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800442e:	4b31      	ldr	r3, [pc, #196]	@ (80044f4 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	22fa      	movs	r2, #250	@ 0xfa
 8004434:	01d1      	lsls	r1, r2, #7
 8004436:	0018      	movs	r0, r3
 8004438:	f7fb fe78 	bl	800012c <__udivsi3>
 800443c:	0003      	movs	r3, r0
 800443e:	001a      	movs	r2, r3
 8004440:	0013      	movs	r3, r2
 8004442:	015b      	lsls	r3, r3, #5
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	189b      	adds	r3, r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	3b01      	subs	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10d      	bne.n	8004476 <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	22ff      	movs	r2, #255	@ 0xff
 8004460:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2221      	movs	r2, #33	@ 0x21
 8004466:	2103      	movs	r1, #3
 8004468:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	2100      	movs	r1, #0
 8004470:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e03a      	b.n	80044ec <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	2202      	movs	r2, #2
 800447e:	4013      	ands	r3, r2
 8004480:	d0e5      	beq.n	800444e <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2180      	movs	r1, #128	@ 0x80
 800449e:	0089      	lsls	r1, r1, #2
 80044a0:	430a      	orrs	r2, r1
 80044a2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2180      	movs	r1, #128	@ 0x80
 80044b0:	0189      	lsls	r1, r1, #6
 80044b2:	430a      	orrs	r2, r1
 80044b4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80044b6:	4b14      	ldr	r3, [pc, #80]	@ (8004508 <HAL_RTC_SetAlarm_IT+0x2c0>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4b13      	ldr	r3, [pc, #76]	@ (8004508 <HAL_RTC_SetAlarm_IT+0x2c0>)
 80044bc:	2180      	movs	r1, #128	@ 0x80
 80044be:	0289      	lsls	r1, r1, #10
 80044c0:	430a      	orrs	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80044c4:	4b10      	ldr	r3, [pc, #64]	@ (8004508 <HAL_RTC_SetAlarm_IT+0x2c0>)
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004508 <HAL_RTC_SetAlarm_IT+0x2c0>)
 80044ca:	2180      	movs	r1, #128	@ 0x80
 80044cc:	0289      	lsls	r1, r1, #10
 80044ce:	430a      	orrs	r2, r1
 80044d0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	22ff      	movs	r2, #255	@ 0xff
 80044d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2221      	movs	r2, #33	@ 0x21
 80044de:	2101      	movs	r1, #1
 80044e0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	2100      	movs	r1, #0
 80044e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b009      	add	sp, #36	@ 0x24
 80044f2:	bd90      	pop	{r4, r7, pc}
 80044f4:	2000000c 	.word	0x2000000c
 80044f8:	fffffeff 	.word	0xfffffeff
 80044fc:	fffffe7f 	.word	0xfffffe7f
 8004500:	fffffdff 	.word	0xfffffdff
 8004504:	fffffd7f 	.word	0xfffffd7f
 8004508:	40010400 	.word	0x40010400

0800450c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	5c9b      	ldrb	r3, [r3, r2]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_RTC_DeactivateAlarm+0x1c>
 8004524:	2302      	movs	r3, #2
 8004526:	e086      	b.n	8004636 <HAL_RTC_DeactivateAlarm+0x12a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	2101      	movs	r1, #1
 800452e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2221      	movs	r2, #33	@ 0x21
 8004534:	2102      	movs	r1, #2
 8004536:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	22ca      	movs	r2, #202	@ 0xca
 800453e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2253      	movs	r2, #83	@ 0x53
 8004546:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	2380      	movs	r3, #128	@ 0x80
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	429a      	cmp	r2, r3
 8004550:	d132      	bne.n	80045b8 <HAL_RTC_DeactivateAlarm+0xac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4938      	ldr	r1, [pc, #224]	@ (8004640 <HAL_RTC_DeactivateAlarm+0x134>)
 800455e:	400a      	ands	r2, r1
 8004560:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4935      	ldr	r1, [pc, #212]	@ (8004644 <HAL_RTC_DeactivateAlarm+0x138>)
 800456e:	400a      	ands	r2, r1
 8004570:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004572:	f7fd faa1 	bl	8001ab8 <HAL_GetTick>
 8004576:	0003      	movs	r3, r0
 8004578:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800457a:	e016      	b.n	80045aa <HAL_RTC_DeactivateAlarm+0x9e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800457c:	f7fd fa9c 	bl	8001ab8 <HAL_GetTick>
 8004580:	0002      	movs	r2, r0
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad2      	subs	r2, r2, r3
 8004586:	23fa      	movs	r3, #250	@ 0xfa
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	429a      	cmp	r2, r3
 800458c:	d90d      	bls.n	80045aa <HAL_RTC_DeactivateAlarm+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	22ff      	movs	r2, #255	@ 0xff
 8004594:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2221      	movs	r2, #33	@ 0x21
 800459a:	2103      	movs	r1, #3
 800459c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	2100      	movs	r1, #0
 80045a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e045      	b.n	8004636 <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	4013      	ands	r3, r2
 80045b4:	d0e2      	beq.n	800457c <HAL_RTC_DeactivateAlarm+0x70>
 80045b6:	e031      	b.n	800461c <HAL_RTC_DeactivateAlarm+0x110>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4921      	ldr	r1, [pc, #132]	@ (8004648 <HAL_RTC_DeactivateAlarm+0x13c>)
 80045c4:	400a      	ands	r2, r1
 80045c6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	491e      	ldr	r1, [pc, #120]	@ (800464c <HAL_RTC_DeactivateAlarm+0x140>)
 80045d4:	400a      	ands	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045d8:	f7fd fa6e 	bl	8001ab8 <HAL_GetTick>
 80045dc:	0003      	movs	r3, r0
 80045de:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80045e0:	e016      	b.n	8004610 <HAL_RTC_DeactivateAlarm+0x104>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045e2:	f7fd fa69 	bl	8001ab8 <HAL_GetTick>
 80045e6:	0002      	movs	r2, r0
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	1ad2      	subs	r2, r2, r3
 80045ec:	23fa      	movs	r3, #250	@ 0xfa
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d90d      	bls.n	8004610 <HAL_RTC_DeactivateAlarm+0x104>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	22ff      	movs	r2, #255	@ 0xff
 80045fa:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2221      	movs	r2, #33	@ 0x21
 8004600:	2103      	movs	r1, #3
 8004602:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	2100      	movs	r1, #0
 800460a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e012      	b.n	8004636 <HAL_RTC_DeactivateAlarm+0x12a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2202      	movs	r2, #2
 8004618:	4013      	ands	r3, r2
 800461a:	d0e2      	beq.n	80045e2 <HAL_RTC_DeactivateAlarm+0xd6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	22ff      	movs	r2, #255	@ 0xff
 8004622:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2221      	movs	r2, #33	@ 0x21
 8004628:	2101      	movs	r1, #1
 800462a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	2100      	movs	r1, #0
 8004632:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	0018      	movs	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	b004      	add	sp, #16
 800463c:	bd80      	pop	{r7, pc}
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	fffffeff 	.word	0xfffffeff
 8004644:	ffffefff 	.word	0xffffefff
 8004648:	fffffdff 	.word	0xfffffdff
 800464c:	ffffdfff 	.word	0xffffdfff

08004650 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004658:	4b21      	ldr	r3, [pc, #132]	@ (80046e0 <HAL_RTC_AlarmIRQHandler+0x90>)
 800465a:	2280      	movs	r2, #128	@ 0x80
 800465c:	0292      	lsls	r2, r2, #10
 800465e:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	2380      	movs	r3, #128	@ 0x80
 8004668:	015b      	lsls	r3, r3, #5
 800466a:	4013      	ands	r3, r2
 800466c:	d014      	beq.n	8004698 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	2380      	movs	r3, #128	@ 0x80
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	4013      	ands	r3, r2
 800467a:	d00d      	beq.n	8004698 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	22ff      	movs	r2, #255	@ 0xff
 8004684:	401a      	ands	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4916      	ldr	r1, [pc, #88]	@ (80046e4 <HAL_RTC_AlarmIRQHandler+0x94>)
 800468c:	430a      	orrs	r2, r1
 800468e:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	0018      	movs	r0, r3
 8004694:	f7fb ff88 	bl	80005a8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	2380      	movs	r3, #128	@ 0x80
 80046a0:	019b      	lsls	r3, r3, #6
 80046a2:	4013      	ands	r3, r2
 80046a4:	d014      	beq.n	80046d0 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	2380      	movs	r3, #128	@ 0x80
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4013      	ands	r3, r2
 80046b2:	d00d      	beq.n	80046d0 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	22ff      	movs	r2, #255	@ 0xff
 80046bc:	401a      	ands	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4909      	ldr	r1, [pc, #36]	@ (80046e8 <HAL_RTC_AlarmIRQHandler+0x98>)
 80046c4:	430a      	orrs	r2, r1
 80046c6:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	0018      	movs	r0, r3
 80046cc:	f000 f8e4 	bl	8004898 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2221      	movs	r2, #33	@ 0x21
 80046d4:	2101      	movs	r1, #1
 80046d6:	5499      	strb	r1, [r3, r2]
}
 80046d8:	46c0      	nop			@ (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	b002      	add	sp, #8
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40010400 	.word	0x40010400
 80046e4:	fffffe7f 	.word	0xfffffe7f
 80046e8:	fffffd7f 	.word	0xfffffd7f

080046ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a0e      	ldr	r2, [pc, #56]	@ (8004738 <HAL_RTC_WaitForSynchro+0x4c>)
 80046fe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004700:	f7fd f9da 	bl	8001ab8 <HAL_GetTick>
 8004704:	0003      	movs	r3, r0
 8004706:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004708:	e00a      	b.n	8004720 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800470a:	f7fd f9d5 	bl	8001ab8 <HAL_GetTick>
 800470e:	0002      	movs	r2, r0
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	1ad2      	subs	r2, r2, r3
 8004714:	23fa      	movs	r3, #250	@ 0xfa
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	429a      	cmp	r2, r3
 800471a:	d901      	bls.n	8004720 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e006      	b.n	800472e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	4013      	ands	r3, r2
 800472a:	d0ee      	beq.n	800470a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	0018      	movs	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	b004      	add	sp, #16
 8004734:	bd80      	pop	{r7, pc}
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	0001ff5f 	.word	0x0001ff5f

0800473c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004748:	230f      	movs	r3, #15
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	2200      	movs	r2, #0
 800474e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	2240      	movs	r2, #64	@ 0x40
 8004758:	4013      	ands	r3, r2
 800475a:	d12c      	bne.n	80047b6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2180      	movs	r1, #128	@ 0x80
 8004768:	430a      	orrs	r2, r1
 800476a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800476c:	f7fd f9a4 	bl	8001ab8 <HAL_GetTick>
 8004770:	0003      	movs	r3, r0
 8004772:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004774:	e014      	b.n	80047a0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004776:	f7fd f99f 	bl	8001ab8 <HAL_GetTick>
 800477a:	0002      	movs	r2, r0
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	1ad2      	subs	r2, r2, r3
 8004780:	200f      	movs	r0, #15
 8004782:	183b      	adds	r3, r7, r0
 8004784:	1839      	adds	r1, r7, r0
 8004786:	7809      	ldrb	r1, [r1, #0]
 8004788:	7019      	strb	r1, [r3, #0]
 800478a:	23fa      	movs	r3, #250	@ 0xfa
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	429a      	cmp	r2, r3
 8004790:	d906      	bls.n	80047a0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2221      	movs	r2, #33	@ 0x21
 8004796:	2104      	movs	r1, #4
 8004798:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800479a:	183b      	adds	r3, r7, r0
 800479c:	2201      	movs	r2, #1
 800479e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2240      	movs	r2, #64	@ 0x40
 80047a8:	4013      	ands	r3, r2
 80047aa:	d104      	bne.n	80047b6 <RTC_EnterInitMode+0x7a>
 80047ac:	230f      	movs	r3, #15
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d1df      	bne.n	8004776 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80047b6:	230f      	movs	r3, #15
 80047b8:	18fb      	adds	r3, r7, r3
 80047ba:	781b      	ldrb	r3, [r3, #0]
}
 80047bc:	0018      	movs	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	b004      	add	sp, #16
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80047c4:	b590      	push	{r4, r7, lr}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047cc:	240f      	movs	r4, #15
 80047ce:	193b      	adds	r3, r7, r4
 80047d0:	2200      	movs	r2, #0
 80047d2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2180      	movs	r1, #128	@ 0x80
 80047e0:	438a      	bics	r2, r1
 80047e2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2220      	movs	r2, #32
 80047ec:	4013      	ands	r3, r2
 80047ee:	d10c      	bne.n	800480a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f7ff ff7a 	bl	80046ec <HAL_RTC_WaitForSynchro>
 80047f8:	1e03      	subs	r3, r0, #0
 80047fa:	d006      	beq.n	800480a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2221      	movs	r2, #33	@ 0x21
 8004800:	2104      	movs	r1, #4
 8004802:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004804:	193b      	adds	r3, r7, r4
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800480a:	230f      	movs	r3, #15
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	781b      	ldrb	r3, [r3, #0]
}
 8004810:	0018      	movs	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	b005      	add	sp, #20
 8004816:	bd90      	pop	{r4, r7, pc}

08004818 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	0002      	movs	r2, r0
 8004820:	1dfb      	adds	r3, r7, #7
 8004822:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004828:	e007      	b.n	800483a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3301      	adds	r3, #1
 800482e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004830:	1dfb      	adds	r3, r7, #7
 8004832:	1dfa      	adds	r2, r7, #7
 8004834:	7812      	ldrb	r2, [r2, #0]
 8004836:	3a0a      	subs	r2, #10
 8004838:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 800483a:	1dfb      	adds	r3, r7, #7
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b09      	cmp	r3, #9
 8004840:	d8f3      	bhi.n	800482a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	b2da      	uxtb	r2, r3
 800484a:	1dfb      	adds	r3, r7, #7
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	4313      	orrs	r3, r2
 8004850:	b2db      	uxtb	r3, r3
}
 8004852:	0018      	movs	r0, r3
 8004854:	46bd      	mov	sp, r7
 8004856:	b004      	add	sp, #16
 8004858:	bd80      	pop	{r7, pc}

0800485a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	0002      	movs	r2, r0
 8004862:	1dfb      	adds	r3, r7, #7
 8004864:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800486a:	1dfb      	adds	r3, r7, #7
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	091b      	lsrs	r3, r3, #4
 8004870:	b2db      	uxtb	r3, r3
 8004872:	001a      	movs	r2, r3
 8004874:	0013      	movs	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	189b      	adds	r3, r3, r2
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	1dfb      	adds	r3, r7, #7
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	210f      	movs	r1, #15
 8004888:	400b      	ands	r3, r1
 800488a:	b2db      	uxtb	r3, r3
 800488c:	18d3      	adds	r3, r2, r3
 800488e:	b2db      	uxtb	r3, r3
}
 8004890:	0018      	movs	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	b004      	add	sp, #16
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80048a0:	46c0      	nop			@ (mov r8, r8)
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b002      	add	sp, #8
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e032      	b.n	8004920 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2239      	movs	r2, #57	@ 0x39
 80048be:	5c9b      	ldrb	r3, [r3, r2]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d107      	bne.n	80048d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2238      	movs	r2, #56	@ 0x38
 80048ca:	2100      	movs	r1, #0
 80048cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7fc ff53 	bl	800177c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2239      	movs	r2, #57	@ 0x39
 80048da:	2102      	movs	r1, #2
 80048dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3304      	adds	r3, #4
 80048e6:	0019      	movs	r1, r3
 80048e8:	0010      	movs	r0, r2
 80048ea:	f000 fc2b 	bl	8005144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	223e      	movs	r2, #62	@ 0x3e
 80048f2:	2101      	movs	r1, #1
 80048f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	223a      	movs	r2, #58	@ 0x3a
 80048fa:	2101      	movs	r1, #1
 80048fc:	5499      	strb	r1, [r3, r2]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	223b      	movs	r2, #59	@ 0x3b
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	223c      	movs	r2, #60	@ 0x3c
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	223d      	movs	r2, #61	@ 0x3d
 8004912:	2101      	movs	r1, #1
 8004914:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2239      	movs	r2, #57	@ 0x39
 800491a:	2101      	movs	r1, #1
 800491c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	b002      	add	sp, #8
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2239      	movs	r2, #57	@ 0x39
 8004934:	5c9b      	ldrb	r3, [r3, r2]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	d001      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e031      	b.n	80049a4 <HAL_TIM_Base_Start_IT+0x7c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2239      	movs	r2, #57	@ 0x39
 8004944:	2102      	movs	r1, #2
 8004946:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2101      	movs	r1, #1
 8004954:	430a      	orrs	r2, r1
 8004956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	2380      	movs	r3, #128	@ 0x80
 800495e:	05db      	lsls	r3, r3, #23
 8004960:	429a      	cmp	r2, r3
 8004962:	d004      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x46>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a10      	ldr	r2, [pc, #64]	@ (80049ac <HAL_TIM_Base_Start_IT+0x84>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d111      	bne.n	8004992 <HAL_TIM_Base_Start_IT+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2207      	movs	r2, #7
 8004976:	4013      	ands	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b06      	cmp	r3, #6
 800497e:	d010      	beq.n	80049a2 <HAL_TIM_Base_Start_IT+0x7a>
    {
      __HAL_TIM_ENABLE(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2101      	movs	r1, #1
 800498c:	430a      	orrs	r2, r1
 800498e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004990:	e007      	b.n	80049a2 <HAL_TIM_Base_Start_IT+0x7a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2101      	movs	r1, #1
 800499e:	430a      	orrs	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	0018      	movs	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b004      	add	sp, #16
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40010800 	.word	0x40010800

080049b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2101      	movs	r1, #1
 80049c4:	438a      	bics	r2, r1
 80049c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	4a0a      	ldr	r2, [pc, #40]	@ (80049f8 <HAL_TIM_Base_Stop_IT+0x48>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	d107      	bne.n	80049e4 <HAL_TIM_Base_Stop_IT+0x34>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2101      	movs	r1, #1
 80049e0:	438a      	bics	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2239      	movs	r2, #57	@ 0x39
 80049e8:	2101      	movs	r1, #1
 80049ea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	0018      	movs	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b002      	add	sp, #8
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	00001111 	.word	0x00001111

080049fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e032      	b.n	8004a74 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2239      	movs	r2, #57	@ 0x39
 8004a12:	5c9b      	ldrb	r3, [r3, r2]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d107      	bne.n	8004a2a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2238      	movs	r2, #56	@ 0x38
 8004a1e:	2100      	movs	r1, #0
 8004a20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7fc fe8b 	bl	8001740 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2239      	movs	r2, #57	@ 0x39
 8004a2e:	2102      	movs	r1, #2
 8004a30:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	0019      	movs	r1, r3
 8004a3c:	0010      	movs	r0, r2
 8004a3e:	f000 fb81 	bl	8005144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	223e      	movs	r2, #62	@ 0x3e
 8004a46:	2101      	movs	r1, #1
 8004a48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	223a      	movs	r2, #58	@ 0x3a
 8004a4e:	2101      	movs	r1, #1
 8004a50:	5499      	strb	r1, [r3, r2]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	223b      	movs	r2, #59	@ 0x3b
 8004a56:	2101      	movs	r1, #1
 8004a58:	5499      	strb	r1, [r3, r2]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	223c      	movs	r2, #60	@ 0x3c
 8004a5e:	2101      	movs	r1, #1
 8004a60:	5499      	strb	r1, [r3, r2]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	223d      	movs	r2, #61	@ 0x3d
 8004a66:	2101      	movs	r1, #1
 8004a68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2239      	movs	r2, #57	@ 0x39
 8004a6e:	2101      	movs	r1, #1
 8004a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	0018      	movs	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b002      	add	sp, #8
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d108      	bne.n	8004a9e <HAL_TIM_PWM_Start+0x22>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	223a      	movs	r2, #58	@ 0x3a
 8004a90:	5c9b      	ldrb	r3, [r3, r2]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	1e5a      	subs	r2, r3, #1
 8004a98:	4193      	sbcs	r3, r2
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	e01f      	b.n	8004ade <HAL_TIM_PWM_Start+0x62>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d108      	bne.n	8004ab6 <HAL_TIM_PWM_Start+0x3a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	223b      	movs	r2, #59	@ 0x3b
 8004aa8:	5c9b      	ldrb	r3, [r3, r2]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	1e5a      	subs	r2, r3, #1
 8004ab0:	4193      	sbcs	r3, r2
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	e013      	b.n	8004ade <HAL_TIM_PWM_Start+0x62>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d108      	bne.n	8004ace <HAL_TIM_PWM_Start+0x52>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	223c      	movs	r2, #60	@ 0x3c
 8004ac0:	5c9b      	ldrb	r3, [r3, r2]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	1e5a      	subs	r2, r3, #1
 8004ac8:	4193      	sbcs	r3, r2
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	e007      	b.n	8004ade <HAL_TIM_PWM_Start+0x62>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	223d      	movs	r2, #61	@ 0x3d
 8004ad2:	5c9b      	ldrb	r3, [r3, r2]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	1e5a      	subs	r2, r3, #1
 8004ada:	4193      	sbcs	r3, r2
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e048      	b.n	8004b78 <HAL_TIM_PWM_Start+0xfc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_PWM_Start+0x7a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	223a      	movs	r2, #58	@ 0x3a
 8004af0:	2102      	movs	r1, #2
 8004af2:	5499      	strb	r1, [r3, r2]
 8004af4:	e013      	b.n	8004b1e <HAL_TIM_PWM_Start+0xa2>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d104      	bne.n	8004b06 <HAL_TIM_PWM_Start+0x8a>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	223b      	movs	r2, #59	@ 0x3b
 8004b00:	2102      	movs	r1, #2
 8004b02:	5499      	strb	r1, [r3, r2]
 8004b04:	e00b      	b.n	8004b1e <HAL_TIM_PWM_Start+0xa2>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d104      	bne.n	8004b16 <HAL_TIM_PWM_Start+0x9a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	223c      	movs	r2, #60	@ 0x3c
 8004b10:	2102      	movs	r1, #2
 8004b12:	5499      	strb	r1, [r3, r2]
 8004b14:	e003      	b.n	8004b1e <HAL_TIM_PWM_Start+0xa2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	223d      	movs	r2, #61	@ 0x3d
 8004b1a:	2102      	movs	r1, #2
 8004b1c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6839      	ldr	r1, [r7, #0]
 8004b24:	2201      	movs	r2, #1
 8004b26:	0018      	movs	r0, r3
 8004b28:	f000 fcf4 	bl	8005514 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	2380      	movs	r3, #128	@ 0x80
 8004b32:	05db      	lsls	r3, r3, #23
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d004      	beq.n	8004b42 <HAL_TIM_PWM_Start+0xc6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a10      	ldr	r2, [pc, #64]	@ (8004b80 <HAL_TIM_PWM_Start+0x104>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d111      	bne.n	8004b66 <HAL_TIM_PWM_Start+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2207      	movs	r2, #7
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b06      	cmp	r3, #6
 8004b52:	d010      	beq.n	8004b76 <HAL_TIM_PWM_Start+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2101      	movs	r1, #1
 8004b60:	430a      	orrs	r2, r1
 8004b62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b64:	e007      	b.n	8004b76 <HAL_TIM_PWM_Start+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2101      	movs	r1, #1
 8004b72:	430a      	orrs	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	0018      	movs	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	b004      	add	sp, #16
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40010800 	.word	0x40010800

08004b84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6839      	ldr	r1, [r7, #0]
 8004b94:	2200      	movs	r2, #0
 8004b96:	0018      	movs	r0, r3
 8004b98:	f000 fcbc 	bl	8005514 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	4a16      	ldr	r2, [pc, #88]	@ (8004bfc <HAL_TIM_PWM_Stop+0x78>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d107      	bne.n	8004bb8 <HAL_TIM_PWM_Stop+0x34>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	438a      	bics	r2, r1
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d104      	bne.n	8004bc8 <HAL_TIM_PWM_Stop+0x44>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	223a      	movs	r2, #58	@ 0x3a
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	5499      	strb	r1, [r3, r2]
 8004bc6:	e013      	b.n	8004bf0 <HAL_TIM_PWM_Stop+0x6c>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d104      	bne.n	8004bd8 <HAL_TIM_PWM_Stop+0x54>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	223b      	movs	r2, #59	@ 0x3b
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	5499      	strb	r1, [r3, r2]
 8004bd6:	e00b      	b.n	8004bf0 <HAL_TIM_PWM_Stop+0x6c>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d104      	bne.n	8004be8 <HAL_TIM_PWM_Stop+0x64>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	223c      	movs	r2, #60	@ 0x3c
 8004be2:	2101      	movs	r1, #1
 8004be4:	5499      	strb	r1, [r3, r2]
 8004be6:	e003      	b.n	8004bf0 <HAL_TIM_PWM_Stop+0x6c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	223d      	movs	r2, #61	@ 0x3d
 8004bec:	2101      	movs	r1, #1
 8004bee:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b002      	add	sp, #8
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	46c0      	nop			@ (mov r8, r8)
 8004bfc:	00001111 	.word	0x00001111

08004c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d124      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d11d      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2203      	movs	r2, #3
 8004c2a:	4252      	negs	r2, r2
 8004c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2203      	movs	r2, #3
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d004      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 fa66 	bl	8005114 <HAL_TIM_IC_CaptureCallback>
 8004c48:	e007      	b.n	8004c5a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f000 fa59 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f000 fa65 	bl	8005124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2204      	movs	r2, #4
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d125      	bne.n	8004cba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2204      	movs	r2, #4
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d11e      	bne.n	8004cba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2205      	movs	r2, #5
 8004c82:	4252      	negs	r2, r2
 8004c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	23c0      	movs	r3, #192	@ 0xc0
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4013      	ands	r3, r2
 8004c98:	d004      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f000 fa39 	bl	8005114 <HAL_TIM_IC_CaptureCallback>
 8004ca2:	e007      	b.n	8004cb4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f000 fa2c 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f000 fa38 	bl	8005124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d124      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2208      	movs	r2, #8
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d11d      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2209      	movs	r2, #9
 8004cdc:	4252      	negs	r2, r2
 8004cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	2203      	movs	r2, #3
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f000 fa0d 	bl	8005114 <HAL_TIM_IC_CaptureCallback>
 8004cfa:	e007      	b.n	8004d0c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f000 fa00 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	0018      	movs	r0, r3
 8004d08:	f000 fa0c 	bl	8005124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2210      	movs	r2, #16
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d125      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2210      	movs	r2, #16
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b10      	cmp	r3, #16
 8004d2c:	d11e      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2211      	movs	r2, #17
 8004d34:	4252      	negs	r2, r2
 8004d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2208      	movs	r2, #8
 8004d3c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	23c0      	movs	r3, #192	@ 0xc0
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f000 f9e0 	bl	8005114 <HAL_TIM_IC_CaptureCallback>
 8004d54:	e007      	b.n	8004d66 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f000 f9d3 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 f9df 	bl	8005124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2201      	movs	r2, #1
 8004d74:	4013      	ands	r3, r2
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d10f      	bne.n	8004d9a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d108      	bne.n	8004d9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	4252      	negs	r2, r2
 8004d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	0018      	movs	r0, r3
 8004d96:	f7fb fc1d 	bl	80005d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2240      	movs	r2, #64	@ 0x40
 8004da2:	4013      	ands	r3, r2
 8004da4:	2b40      	cmp	r3, #64	@ 0x40
 8004da6:	d10f      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	2240      	movs	r2, #64	@ 0x40
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b40      	cmp	r3, #64	@ 0x40
 8004db4:	d108      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2241      	movs	r2, #65	@ 0x41
 8004dbc:	4252      	negs	r2, r2
 8004dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f000 f9b6 	bl	8005134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dc8:	46c0      	nop			@ (mov r8, r8)
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b002      	add	sp, #8
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ddc:	2317      	movs	r3, #23
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2238      	movs	r2, #56	@ 0x38
 8004de8:	5c9b      	ldrb	r3, [r3, r2]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e0ad      	b.n	8004f4e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2238      	movs	r2, #56	@ 0x38
 8004df6:	2101      	movs	r1, #1
 8004df8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b0c      	cmp	r3, #12
 8004dfe:	d100      	bne.n	8004e02 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004e00:	e076      	b.n	8004ef0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b0c      	cmp	r3, #12
 8004e06:	d900      	bls.n	8004e0a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004e08:	e095      	b.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d04e      	beq.n	8004eae <HAL_TIM_PWM_ConfigChannel+0xde>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d900      	bls.n	8004e18 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004e16:	e08e      	b.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_TIM_PWM_ConfigChannel+0x56>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d021      	beq.n	8004e68 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004e24:	e087      	b.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	0011      	movs	r1, r2
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f000 f9d2 	bl	80051d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2108      	movs	r1, #8
 8004e40:	430a      	orrs	r2, r1
 8004e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2104      	movs	r1, #4
 8004e50:	438a      	bics	r2, r1
 8004e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6999      	ldr	r1, [r3, #24]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	619a      	str	r2, [r3, #24]
      break;
 8004e66:	e06b      	b.n	8004f40 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	0011      	movs	r1, r2
 8004e70:	0018      	movs	r0, r3
 8004e72:	f000 f9ed 	bl	8005250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2180      	movs	r1, #128	@ 0x80
 8004e82:	0109      	lsls	r1, r1, #4
 8004e84:	430a      	orrs	r2, r1
 8004e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4931      	ldr	r1, [pc, #196]	@ (8004f58 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004e94:	400a      	ands	r2, r1
 8004e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6999      	ldr	r1, [r3, #24]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	021a      	lsls	r2, r3, #8
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	619a      	str	r2, [r3, #24]
      break;
 8004eac:	e048      	b.n	8004f40 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	0011      	movs	r1, r2
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f000 fa0c 	bl	80052d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69da      	ldr	r2, [r3, #28]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2108      	movs	r1, #8
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2104      	movs	r1, #4
 8004ed8:	438a      	bics	r2, r1
 8004eda:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69d9      	ldr	r1, [r3, #28]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	61da      	str	r2, [r3, #28]
      break;
 8004eee:	e027      	b.n	8004f40 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	0011      	movs	r1, r2
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f000 fa2b 	bl	8005354 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2180      	movs	r1, #128	@ 0x80
 8004f0a:	0109      	lsls	r1, r1, #4
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69da      	ldr	r2, [r3, #28]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	490f      	ldr	r1, [pc, #60]	@ (8004f58 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004f1c:	400a      	ands	r2, r1
 8004f1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69d9      	ldr	r1, [r3, #28]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	021a      	lsls	r2, r3, #8
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	61da      	str	r2, [r3, #28]
      break;
 8004f34:	e004      	b.n	8004f40 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004f36:	2317      	movs	r3, #23
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	701a      	strb	r2, [r3, #0]
      break;
 8004f3e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2238      	movs	r2, #56	@ 0x38
 8004f44:	2100      	movs	r1, #0
 8004f46:	5499      	strb	r1, [r3, r2]

  return status;
 8004f48:	2317      	movs	r3, #23
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	781b      	ldrb	r3, [r3, #0]
}
 8004f4e:	0018      	movs	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b006      	add	sp, #24
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	fffffbff 	.word	0xfffffbff

08004f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f66:	230f      	movs	r3, #15
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2238      	movs	r2, #56	@ 0x38
 8004f72:	5c9b      	ldrb	r3, [r3, r2]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_TIM_ConfigClockSource+0x20>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e0bc      	b.n	80050f6 <HAL_TIM_ConfigClockSource+0x19a>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2238      	movs	r2, #56	@ 0x38
 8004f80:	2101      	movs	r1, #1
 8004f82:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2239      	movs	r2, #57	@ 0x39
 8004f88:	2102      	movs	r1, #2
 8004f8a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2277      	movs	r2, #119	@ 0x77
 8004f98:	4393      	bics	r3, r2
 8004f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4a58      	ldr	r2, [pc, #352]	@ (8005100 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2280      	movs	r2, #128	@ 0x80
 8004fb2:	0192      	lsls	r2, r2, #6
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d040      	beq.n	800503a <HAL_TIM_ConfigClockSource+0xde>
 8004fb8:	2280      	movs	r2, #128	@ 0x80
 8004fba:	0192      	lsls	r2, r2, #6
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d900      	bls.n	8004fc2 <HAL_TIM_ConfigClockSource+0x66>
 8004fc0:	e088      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x178>
 8004fc2:	2280      	movs	r2, #128	@ 0x80
 8004fc4:	0152      	lsls	r2, r2, #5
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d100      	bne.n	8004fcc <HAL_TIM_ConfigClockSource+0x70>
 8004fca:	e088      	b.n	80050de <HAL_TIM_ConfigClockSource+0x182>
 8004fcc:	2280      	movs	r2, #128	@ 0x80
 8004fce:	0152      	lsls	r2, r2, #5
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d900      	bls.n	8004fd6 <HAL_TIM_ConfigClockSource+0x7a>
 8004fd4:	e07e      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x178>
 8004fd6:	2b70      	cmp	r3, #112	@ 0x70
 8004fd8:	d018      	beq.n	800500c <HAL_TIM_ConfigClockSource+0xb0>
 8004fda:	d900      	bls.n	8004fde <HAL_TIM_ConfigClockSource+0x82>
 8004fdc:	e07a      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x178>
 8004fde:	2b60      	cmp	r3, #96	@ 0x60
 8004fe0:	d04f      	beq.n	8005082 <HAL_TIM_ConfigClockSource+0x126>
 8004fe2:	d900      	bls.n	8004fe6 <HAL_TIM_ConfigClockSource+0x8a>
 8004fe4:	e076      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x178>
 8004fe6:	2b50      	cmp	r3, #80	@ 0x50
 8004fe8:	d03b      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x106>
 8004fea:	d900      	bls.n	8004fee <HAL_TIM_ConfigClockSource+0x92>
 8004fec:	e072      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x178>
 8004fee:	2b40      	cmp	r3, #64	@ 0x40
 8004ff0:	d057      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x146>
 8004ff2:	d900      	bls.n	8004ff6 <HAL_TIM_ConfigClockSource+0x9a>
 8004ff4:	e06e      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x178>
 8004ff6:	2b30      	cmp	r3, #48	@ 0x30
 8004ff8:	d063      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0x166>
 8004ffa:	d86b      	bhi.n	80050d4 <HAL_TIM_ConfigClockSource+0x178>
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d060      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0x166>
 8005000:	d868      	bhi.n	80050d4 <HAL_TIM_ConfigClockSource+0x178>
 8005002:	2b00      	cmp	r3, #0
 8005004:	d05d      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0x166>
 8005006:	2b10      	cmp	r3, #16
 8005008:	d05b      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0x166>
 800500a:	e063      	b.n	80050d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800501c:	f000 fa5a 	bl	80054d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2277      	movs	r2, #119	@ 0x77
 800502c:	4313      	orrs	r3, r2
 800502e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	609a      	str	r2, [r3, #8]
      break;
 8005038:	e052      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800504a:	f000 fa43 	bl	80054d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2180      	movs	r1, #128	@ 0x80
 800505a:	01c9      	lsls	r1, r1, #7
 800505c:	430a      	orrs	r2, r1
 800505e:	609a      	str	r2, [r3, #8]
      break;
 8005060:	e03e      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800506e:	001a      	movs	r2, r3
 8005070:	f000 f9b6 	bl	80053e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2150      	movs	r1, #80	@ 0x50
 800507a:	0018      	movs	r0, r3
 800507c:	f000 fa10 	bl	80054a0 <TIM_ITRx_SetConfig>
      break;
 8005080:	e02e      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800508e:	001a      	movs	r2, r3
 8005090:	f000 f9d4 	bl	800543c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2160      	movs	r1, #96	@ 0x60
 800509a:	0018      	movs	r0, r3
 800509c:	f000 fa00 	bl	80054a0 <TIM_ITRx_SetConfig>
      break;
 80050a0:	e01e      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ae:	001a      	movs	r2, r3
 80050b0:	f000 f996 	bl	80053e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2140      	movs	r1, #64	@ 0x40
 80050ba:	0018      	movs	r0, r3
 80050bc:	f000 f9f0 	bl	80054a0 <TIM_ITRx_SetConfig>
      break;
 80050c0:	e00e      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	0019      	movs	r1, r3
 80050cc:	0010      	movs	r0, r2
 80050ce:	f000 f9e7 	bl	80054a0 <TIM_ITRx_SetConfig>
      break;
 80050d2:	e005      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80050d4:	230f      	movs	r3, #15
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	2201      	movs	r2, #1
 80050da:	701a      	strb	r2, [r3, #0]
      break;
 80050dc:	e000      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80050de:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2239      	movs	r2, #57	@ 0x39
 80050e4:	2101      	movs	r1, #1
 80050e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2238      	movs	r2, #56	@ 0x38
 80050ec:	2100      	movs	r1, #0
 80050ee:	5499      	strb	r1, [r3, r2]

  return status;
 80050f0:	230f      	movs	r3, #15
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	781b      	ldrb	r3, [r3, #0]
}
 80050f6:	0018      	movs	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b004      	add	sp, #16
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			@ (mov r8, r8)
 8005100:	ffff00ff 	.word	0xffff00ff

08005104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800510c:	46c0      	nop			@ (mov r8, r8)
 800510e:	46bd      	mov	sp, r7
 8005110:	b002      	add	sp, #8
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800511c:	46c0      	nop			@ (mov r8, r8)
 800511e:	46bd      	mov	sp, r7
 8005120:	b002      	add	sp, #8
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800512c:	46c0      	nop			@ (mov r8, r8)
 800512e:	46bd      	mov	sp, r7
 8005130:	b002      	add	sp, #8
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800513c:	46c0      	nop			@ (mov r8, r8)
 800513e:	46bd      	mov	sp, r7
 8005140:	b002      	add	sp, #8
 8005142:	bd80      	pop	{r7, pc}

08005144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	2380      	movs	r3, #128	@ 0x80
 8005158:	05db      	lsls	r3, r3, #23
 800515a:	429a      	cmp	r2, r3
 800515c:	d003      	beq.n	8005166 <TIM_Base_SetConfig+0x22>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a1b      	ldr	r2, [pc, #108]	@ (80051d0 <TIM_Base_SetConfig+0x8c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d108      	bne.n	8005178 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2270      	movs	r2, #112	@ 0x70
 800516a:	4393      	bics	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	2380      	movs	r3, #128	@ 0x80
 800517c:	05db      	lsls	r3, r3, #23
 800517e:	429a      	cmp	r2, r3
 8005180:	d003      	beq.n	800518a <TIM_Base_SetConfig+0x46>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a12      	ldr	r2, [pc, #72]	@ (80051d0 <TIM_Base_SetConfig+0x8c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d108      	bne.n	800519c <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a11      	ldr	r2, [pc, #68]	@ (80051d4 <TIM_Base_SetConfig+0x90>)
 800518e:	4013      	ands	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2280      	movs	r2, #128	@ 0x80
 80051a0:	4393      	bics	r3, r2
 80051a2:	001a      	movs	r2, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	615a      	str	r2, [r3, #20]
}
 80051c8:	46c0      	nop			@ (mov r8, r8)
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b004      	add	sp, #16
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40010800 	.word	0x40010800
 80051d4:	fffffcff 	.word	0xfffffcff

080051d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	2201      	movs	r2, #1
 80051e8:	4393      	bics	r3, r2
 80051ea:	001a      	movs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2270      	movs	r2, #112	@ 0x70
 8005206:	4393      	bics	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2203      	movs	r2, #3
 800520e:	4393      	bics	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2202      	movs	r2, #2
 8005220:	4393      	bics	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	621a      	str	r2, [r3, #32]
}
 8005248:	46c0      	nop			@ (mov r8, r8)
 800524a:	46bd      	mov	sp, r7
 800524c:	b006      	add	sp, #24
 800524e:	bd80      	pop	{r7, pc}

08005250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	2210      	movs	r2, #16
 8005260:	4393      	bics	r3, r2
 8005262:	001a      	movs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4a13      	ldr	r2, [pc, #76]	@ (80052cc <TIM_OC2_SetConfig+0x7c>)
 800527e:	4013      	ands	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4a12      	ldr	r2, [pc, #72]	@ (80052d0 <TIM_OC2_SetConfig+0x80>)
 8005286:	4013      	ands	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2220      	movs	r2, #32
 800529a:	4393      	bics	r3, r2
 800529c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	621a      	str	r2, [r3, #32]
}
 80052c4:	46c0      	nop			@ (mov r8, r8)
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b006      	add	sp, #24
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	ffff8fff 	.word	0xffff8fff
 80052d0:	fffffcff 	.word	0xfffffcff

080052d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	4a1a      	ldr	r2, [pc, #104]	@ (800534c <TIM_OC3_SetConfig+0x78>)
 80052e4:	401a      	ands	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2270      	movs	r2, #112	@ 0x70
 8005300:	4393      	bics	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2203      	movs	r2, #3
 8005308:	4393      	bics	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	4a0d      	ldr	r2, [pc, #52]	@ (8005350 <TIM_OC3_SetConfig+0x7c>)
 800531a:	4013      	ands	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	621a      	str	r2, [r3, #32]
}
 8005344:	46c0      	nop			@ (mov r8, r8)
 8005346:	46bd      	mov	sp, r7
 8005348:	b006      	add	sp, #24
 800534a:	bd80      	pop	{r7, pc}
 800534c:	fffffeff 	.word	0xfffffeff
 8005350:	fffffdff 	.word	0xfffffdff

08005354 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	4a1b      	ldr	r2, [pc, #108]	@ (80053d0 <TIM_OC4_SetConfig+0x7c>)
 8005364:	401a      	ands	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4a15      	ldr	r2, [pc, #84]	@ (80053d4 <TIM_OC4_SetConfig+0x80>)
 8005380:	4013      	ands	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4a14      	ldr	r2, [pc, #80]	@ (80053d8 <TIM_OC4_SetConfig+0x84>)
 8005388:	4013      	ands	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	4a10      	ldr	r2, [pc, #64]	@ (80053dc <TIM_OC4_SetConfig+0x88>)
 800539c:	4013      	ands	r3, r2
 800539e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	031b      	lsls	r3, r3, #12
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	621a      	str	r2, [r3, #32]
}
 80053c6:	46c0      	nop			@ (mov r8, r8)
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b006      	add	sp, #24
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	46c0      	nop			@ (mov r8, r8)
 80053d0:	ffffefff 	.word	0xffffefff
 80053d4:	ffff8fff 	.word	0xffff8fff
 80053d8:	fffffcff 	.word	0xfffffcff
 80053dc:	ffffdfff 	.word	0xffffdfff

080053e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	2201      	movs	r2, #1
 80053f8:	4393      	bics	r3, r2
 80053fa:	001a      	movs	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	22f0      	movs	r2, #240	@ 0xf0
 800540a:	4393      	bics	r3, r2
 800540c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	220a      	movs	r2, #10
 800541c:	4393      	bics	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	621a      	str	r2, [r3, #32]
}
 8005434:	46c0      	nop			@ (mov r8, r8)
 8005436:	46bd      	mov	sp, r7
 8005438:	b006      	add	sp, #24
 800543a:	bd80      	pop	{r7, pc}

0800543c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	2210      	movs	r2, #16
 800544e:	4393      	bics	r3, r2
 8005450:	001a      	movs	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	4a0d      	ldr	r2, [pc, #52]	@ (800549c <TIM_TI2_ConfigInputStage+0x60>)
 8005466:	4013      	ands	r3, r2
 8005468:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	031b      	lsls	r3, r3, #12
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	22a0      	movs	r2, #160	@ 0xa0
 8005478:	4393      	bics	r3, r2
 800547a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	46c0      	nop			@ (mov r8, r8)
 8005494:	46bd      	mov	sp, r7
 8005496:	b006      	add	sp, #24
 8005498:	bd80      	pop	{r7, pc}
 800549a:	46c0      	nop			@ (mov r8, r8)
 800549c:	ffff0fff 	.word	0xffff0fff

080054a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2270      	movs	r2, #112	@ 0x70
 80054b4:	4393      	bics	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	2207      	movs	r2, #7
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	609a      	str	r2, [r3, #8]
}
 80054ca:	46c0      	nop			@ (mov r8, r8)
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b004      	add	sp, #16
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4a09      	ldr	r2, [pc, #36]	@ (8005510 <TIM_ETR_SetConfig+0x3c>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	021a      	lsls	r2, r3, #8
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	609a      	str	r2, [r3, #8]
}
 8005508:	46c0      	nop			@ (mov r8, r8)
 800550a:	46bd      	mov	sp, r7
 800550c:	b006      	add	sp, #24
 800550e:	bd80      	pop	{r7, pc}
 8005510:	ffff00ff 	.word	0xffff00ff

08005514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	221f      	movs	r2, #31
 8005524:	4013      	ands	r3, r2
 8005526:	2201      	movs	r2, #1
 8005528:	409a      	lsls	r2, r3
 800552a:	0013      	movs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	43d2      	mvns	r2, r2
 8005536:	401a      	ands	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	211f      	movs	r1, #31
 8005544:	400b      	ands	r3, r1
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4099      	lsls	r1, r3
 800554a:	000b      	movs	r3, r1
 800554c:	431a      	orrs	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	46c0      	nop			@ (mov r8, r8)
 8005554:	46bd      	mov	sp, r7
 8005556:	b006      	add	sp, #24
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2238      	movs	r2, #56	@ 0x38
 800556a:	5c9b      	ldrb	r3, [r3, r2]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005570:	2302      	movs	r3, #2
 8005572:	e03d      	b.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2238      	movs	r2, #56	@ 0x38
 8005578:	2101      	movs	r1, #1
 800557a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2239      	movs	r2, #57	@ 0x39
 8005580:	2102      	movs	r1, #2
 8005582:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2270      	movs	r2, #112	@ 0x70
 8005598:	4393      	bics	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	2380      	movs	r3, #128	@ 0x80
 80055b4:	05db      	lsls	r3, r3, #23
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d004      	beq.n	80055c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a0e      	ldr	r2, [pc, #56]	@ (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d10c      	bne.n	80055de <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2280      	movs	r2, #128	@ 0x80
 80055c8:	4393      	bics	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2239      	movs	r2, #57	@ 0x39
 80055e2:	2101      	movs	r1, #1
 80055e4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2238      	movs	r2, #56	@ 0x38
 80055ea:	2100      	movs	r1, #0
 80055ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	0018      	movs	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b004      	add	sp, #16
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40010800 	.word	0x40010800

080055fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e044      	b.n	8005698 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d107      	bne.n	8005626 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2278      	movs	r2, #120	@ 0x78
 800561a:	2100      	movs	r1, #0
 800561c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	0018      	movs	r0, r3
 8005622:	f7fc f829 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2224      	movs	r2, #36	@ 0x24
 800562a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2101      	movs	r1, #1
 8005638:	438a      	bics	r2, r1
 800563a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	0018      	movs	r0, r3
 8005640:	f000 f8d0 	bl	80057e4 <UART_SetConfig>
 8005644:	0003      	movs	r3, r0
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e024      	b.n	8005698 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	0018      	movs	r0, r3
 800565a:	f000 fb0d 	bl	8005c78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	490d      	ldr	r1, [pc, #52]	@ (80056a0 <HAL_UART_Init+0xa4>)
 800566a:	400a      	ands	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	212a      	movs	r1, #42	@ 0x2a
 800567a:	438a      	bics	r2, r1
 800567c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2101      	movs	r1, #1
 800568a:	430a      	orrs	r2, r1
 800568c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	0018      	movs	r0, r3
 8005692:	f000 fba5 	bl	8005de0 <UART_CheckIdleState>
 8005696:	0003      	movs	r3, r0
}
 8005698:	0018      	movs	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	b002      	add	sp, #8
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	ffffb7ff 	.word	0xffffb7ff

080056a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08a      	sub	sp, #40	@ 0x28
 80056a8:	af02      	add	r7, sp, #8
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	1dbb      	adds	r3, r7, #6
 80056b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d000      	beq.n	80056be <HAL_UART_Transmit+0x1a>
 80056bc:	e08c      	b.n	80057d8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <HAL_UART_Transmit+0x28>
 80056c4:	1dbb      	adds	r3, r7, #6
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e084      	b.n	80057da <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	2380      	movs	r3, #128	@ 0x80
 80056d6:	015b      	lsls	r3, r3, #5
 80056d8:	429a      	cmp	r2, r3
 80056da:	d109      	bne.n	80056f0 <HAL_UART_Transmit+0x4c>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2201      	movs	r2, #1
 80056e8:	4013      	ands	r3, r2
 80056ea:	d001      	beq.n	80056f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e074      	b.n	80057da <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2284      	movs	r2, #132	@ 0x84
 80056f4:	2100      	movs	r1, #0
 80056f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2221      	movs	r2, #33	@ 0x21
 80056fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056fe:	f7fc f9db 	bl	8001ab8 <HAL_GetTick>
 8005702:	0003      	movs	r3, r0
 8005704:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1dba      	adds	r2, r7, #6
 800570a:	2150      	movs	r1, #80	@ 0x50
 800570c:	8812      	ldrh	r2, [r2, #0]
 800570e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1dba      	adds	r2, r7, #6
 8005714:	2152      	movs	r1, #82	@ 0x52
 8005716:	8812      	ldrh	r2, [r2, #0]
 8005718:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	2380      	movs	r3, #128	@ 0x80
 8005720:	015b      	lsls	r3, r3, #5
 8005722:	429a      	cmp	r2, r3
 8005724:	d108      	bne.n	8005738 <HAL_UART_Transmit+0x94>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d104      	bne.n	8005738 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	e003      	b.n	8005740 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800573c:	2300      	movs	r3, #0
 800573e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005740:	e02f      	b.n	80057a2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	0013      	movs	r3, r2
 800574c:	2200      	movs	r2, #0
 800574e:	2180      	movs	r1, #128	@ 0x80
 8005750:	f000 fbee 	bl	8005f30 <UART_WaitOnFlagUntilTimeout>
 8005754:	1e03      	subs	r3, r0, #0
 8005756:	d004      	beq.n	8005762 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e03b      	b.n	80057da <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10b      	bne.n	8005780 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	001a      	movs	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	05d2      	lsls	r2, r2, #23
 8005774:	0dd2      	lsrs	r2, r2, #23
 8005776:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	3302      	adds	r3, #2
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e007      	b.n	8005790 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	781a      	ldrb	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	3301      	adds	r3, #1
 800578e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2252      	movs	r2, #82	@ 0x52
 8005794:	5a9b      	ldrh	r3, [r3, r2]
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b299      	uxth	r1, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2252      	movs	r2, #82	@ 0x52
 80057a0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2252      	movs	r2, #82	@ 0x52
 80057a6:	5a9b      	ldrh	r3, [r3, r2]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1c9      	bne.n	8005742 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	0013      	movs	r3, r2
 80057b8:	2200      	movs	r2, #0
 80057ba:	2140      	movs	r1, #64	@ 0x40
 80057bc:	f000 fbb8 	bl	8005f30 <UART_WaitOnFlagUntilTimeout>
 80057c0:	1e03      	subs	r3, r0, #0
 80057c2:	d004      	beq.n	80057ce <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2220      	movs	r2, #32
 80057c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e005      	b.n	80057da <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	e000      	b.n	80057da <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80057d8:	2302      	movs	r3, #2
  }
}
 80057da:	0018      	movs	r0, r3
 80057dc:	46bd      	mov	sp, r7
 80057de:	b008      	add	sp, #32
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e4:	b5b0      	push	{r4, r5, r7, lr}
 80057e6:	b08e      	sub	sp, #56	@ 0x38
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057ec:	231a      	movs	r3, #26
 80057ee:	2218      	movs	r2, #24
 80057f0:	189b      	adds	r3, r3, r2
 80057f2:	19db      	adds	r3, r3, r7
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	431a      	orrs	r2, r3
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	431a      	orrs	r2, r3
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	4313      	orrs	r3, r2
 800580e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4ab4      	ldr	r2, [pc, #720]	@ (8005ae8 <UART_SetConfig+0x304>)
 8005818:	4013      	ands	r3, r2
 800581a:	0019      	movs	r1, r3
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005822:	430a      	orrs	r2, r1
 8005824:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	4aaf      	ldr	r2, [pc, #700]	@ (8005aec <UART_SetConfig+0x308>)
 800582e:	4013      	ands	r3, r2
 8005830:	0019      	movs	r1, r3
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4aa9      	ldr	r2, [pc, #676]	@ (8005af0 <UART_SetConfig+0x30c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d004      	beq.n	8005858 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005854:	4313      	orrs	r3, r2
 8005856:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	4aa5      	ldr	r2, [pc, #660]	@ (8005af4 <UART_SetConfig+0x310>)
 8005860:	4013      	ands	r3, r2
 8005862:	0019      	movs	r1, r3
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800586a:	430a      	orrs	r2, r1
 800586c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4aa1      	ldr	r2, [pc, #644]	@ (8005af8 <UART_SetConfig+0x314>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d131      	bne.n	80058dc <UART_SetConfig+0xf8>
 8005878:	4ba0      	ldr	r3, [pc, #640]	@ (8005afc <UART_SetConfig+0x318>)
 800587a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587c:	220c      	movs	r2, #12
 800587e:	4013      	ands	r3, r2
 8005880:	2b0c      	cmp	r3, #12
 8005882:	d01d      	beq.n	80058c0 <UART_SetConfig+0xdc>
 8005884:	d823      	bhi.n	80058ce <UART_SetConfig+0xea>
 8005886:	2b08      	cmp	r3, #8
 8005888:	d00c      	beq.n	80058a4 <UART_SetConfig+0xc0>
 800588a:	d820      	bhi.n	80058ce <UART_SetConfig+0xea>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <UART_SetConfig+0xb2>
 8005890:	2b04      	cmp	r3, #4
 8005892:	d00e      	beq.n	80058b2 <UART_SetConfig+0xce>
 8005894:	e01b      	b.n	80058ce <UART_SetConfig+0xea>
 8005896:	231b      	movs	r3, #27
 8005898:	2218      	movs	r2, #24
 800589a:	189b      	adds	r3, r3, r2
 800589c:	19db      	adds	r3, r3, r7
 800589e:	2200      	movs	r2, #0
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	e065      	b.n	8005970 <UART_SetConfig+0x18c>
 80058a4:	231b      	movs	r3, #27
 80058a6:	2218      	movs	r2, #24
 80058a8:	189b      	adds	r3, r3, r2
 80058aa:	19db      	adds	r3, r3, r7
 80058ac:	2202      	movs	r2, #2
 80058ae:	701a      	strb	r2, [r3, #0]
 80058b0:	e05e      	b.n	8005970 <UART_SetConfig+0x18c>
 80058b2:	231b      	movs	r3, #27
 80058b4:	2218      	movs	r2, #24
 80058b6:	189b      	adds	r3, r3, r2
 80058b8:	19db      	adds	r3, r3, r7
 80058ba:	2204      	movs	r2, #4
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	e057      	b.n	8005970 <UART_SetConfig+0x18c>
 80058c0:	231b      	movs	r3, #27
 80058c2:	2218      	movs	r2, #24
 80058c4:	189b      	adds	r3, r3, r2
 80058c6:	19db      	adds	r3, r3, r7
 80058c8:	2208      	movs	r2, #8
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	e050      	b.n	8005970 <UART_SetConfig+0x18c>
 80058ce:	231b      	movs	r3, #27
 80058d0:	2218      	movs	r2, #24
 80058d2:	189b      	adds	r3, r3, r2
 80058d4:	19db      	adds	r3, r3, r7
 80058d6:	2210      	movs	r2, #16
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	e049      	b.n	8005970 <UART_SetConfig+0x18c>
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a83      	ldr	r2, [pc, #524]	@ (8005af0 <UART_SetConfig+0x30c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d13e      	bne.n	8005964 <UART_SetConfig+0x180>
 80058e6:	4b85      	ldr	r3, [pc, #532]	@ (8005afc <UART_SetConfig+0x318>)
 80058e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058ea:	23c0      	movs	r3, #192	@ 0xc0
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	4013      	ands	r3, r2
 80058f0:	22c0      	movs	r2, #192	@ 0xc0
 80058f2:	0112      	lsls	r2, r2, #4
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d027      	beq.n	8005948 <UART_SetConfig+0x164>
 80058f8:	22c0      	movs	r2, #192	@ 0xc0
 80058fa:	0112      	lsls	r2, r2, #4
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d82a      	bhi.n	8005956 <UART_SetConfig+0x172>
 8005900:	2280      	movs	r2, #128	@ 0x80
 8005902:	0112      	lsls	r2, r2, #4
 8005904:	4293      	cmp	r3, r2
 8005906:	d011      	beq.n	800592c <UART_SetConfig+0x148>
 8005908:	2280      	movs	r2, #128	@ 0x80
 800590a:	0112      	lsls	r2, r2, #4
 800590c:	4293      	cmp	r3, r2
 800590e:	d822      	bhi.n	8005956 <UART_SetConfig+0x172>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d004      	beq.n	800591e <UART_SetConfig+0x13a>
 8005914:	2280      	movs	r2, #128	@ 0x80
 8005916:	00d2      	lsls	r2, r2, #3
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <UART_SetConfig+0x156>
 800591c:	e01b      	b.n	8005956 <UART_SetConfig+0x172>
 800591e:	231b      	movs	r3, #27
 8005920:	2218      	movs	r2, #24
 8005922:	189b      	adds	r3, r3, r2
 8005924:	19db      	adds	r3, r3, r7
 8005926:	2200      	movs	r2, #0
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e021      	b.n	8005970 <UART_SetConfig+0x18c>
 800592c:	231b      	movs	r3, #27
 800592e:	2218      	movs	r2, #24
 8005930:	189b      	adds	r3, r3, r2
 8005932:	19db      	adds	r3, r3, r7
 8005934:	2202      	movs	r2, #2
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	e01a      	b.n	8005970 <UART_SetConfig+0x18c>
 800593a:	231b      	movs	r3, #27
 800593c:	2218      	movs	r2, #24
 800593e:	189b      	adds	r3, r3, r2
 8005940:	19db      	adds	r3, r3, r7
 8005942:	2204      	movs	r2, #4
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	e013      	b.n	8005970 <UART_SetConfig+0x18c>
 8005948:	231b      	movs	r3, #27
 800594a:	2218      	movs	r2, #24
 800594c:	189b      	adds	r3, r3, r2
 800594e:	19db      	adds	r3, r3, r7
 8005950:	2208      	movs	r2, #8
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	e00c      	b.n	8005970 <UART_SetConfig+0x18c>
 8005956:	231b      	movs	r3, #27
 8005958:	2218      	movs	r2, #24
 800595a:	189b      	adds	r3, r3, r2
 800595c:	19db      	adds	r3, r3, r7
 800595e:	2210      	movs	r2, #16
 8005960:	701a      	strb	r2, [r3, #0]
 8005962:	e005      	b.n	8005970 <UART_SetConfig+0x18c>
 8005964:	231b      	movs	r3, #27
 8005966:	2218      	movs	r2, #24
 8005968:	189b      	adds	r3, r3, r2
 800596a:	19db      	adds	r3, r3, r7
 800596c:	2210      	movs	r2, #16
 800596e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a5e      	ldr	r2, [pc, #376]	@ (8005af0 <UART_SetConfig+0x30c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d000      	beq.n	800597c <UART_SetConfig+0x198>
 800597a:	e084      	b.n	8005a86 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800597c:	231b      	movs	r3, #27
 800597e:	2218      	movs	r2, #24
 8005980:	189b      	adds	r3, r3, r2
 8005982:	19db      	adds	r3, r3, r7
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b08      	cmp	r3, #8
 8005988:	d01d      	beq.n	80059c6 <UART_SetConfig+0x1e2>
 800598a:	dc20      	bgt.n	80059ce <UART_SetConfig+0x1ea>
 800598c:	2b04      	cmp	r3, #4
 800598e:	d015      	beq.n	80059bc <UART_SetConfig+0x1d8>
 8005990:	dc1d      	bgt.n	80059ce <UART_SetConfig+0x1ea>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <UART_SetConfig+0x1b8>
 8005996:	2b02      	cmp	r3, #2
 8005998:	d005      	beq.n	80059a6 <UART_SetConfig+0x1c2>
 800599a:	e018      	b.n	80059ce <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800599c:	f7fe f8c4 	bl	8003b28 <HAL_RCC_GetPCLK1Freq>
 80059a0:	0003      	movs	r3, r0
 80059a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80059a4:	e01c      	b.n	80059e0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059a6:	4b55      	ldr	r3, [pc, #340]	@ (8005afc <UART_SetConfig+0x318>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2210      	movs	r2, #16
 80059ac:	4013      	ands	r3, r2
 80059ae:	d002      	beq.n	80059b6 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80059b0:	4b53      	ldr	r3, [pc, #332]	@ (8005b00 <UART_SetConfig+0x31c>)
 80059b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059b4:	e014      	b.n	80059e0 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80059b6:	4b53      	ldr	r3, [pc, #332]	@ (8005b04 <UART_SetConfig+0x320>)
 80059b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80059ba:	e011      	b.n	80059e0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059bc:	f7fe f804 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 80059c0:	0003      	movs	r3, r0
 80059c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80059c4:	e00c      	b.n	80059e0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059c6:	2380      	movs	r3, #128	@ 0x80
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80059cc:	e008      	b.n	80059e0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80059d2:	231a      	movs	r3, #26
 80059d4:	2218      	movs	r2, #24
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	19db      	adds	r3, r3, r7
 80059da:	2201      	movs	r2, #1
 80059dc:	701a      	strb	r2, [r3, #0]
        break;
 80059de:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d100      	bne.n	80059e8 <UART_SetConfig+0x204>
 80059e6:	e12f      	b.n	8005c48 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	0013      	movs	r3, r2
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	189b      	adds	r3, r3, r2
 80059f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d305      	bcc.n	8005a04 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d906      	bls.n	8005a12 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8005a04:	231a      	movs	r3, #26
 8005a06:	2218      	movs	r2, #24
 8005a08:	189b      	adds	r3, r3, r2
 8005a0a:	19db      	adds	r3, r3, r7
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	e11a      	b.n	8005c48 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a14:	613b      	str	r3, [r7, #16]
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	6939      	ldr	r1, [r7, #16]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	000b      	movs	r3, r1
 8005a20:	0e1b      	lsrs	r3, r3, #24
 8005a22:	0010      	movs	r0, r2
 8005a24:	0205      	lsls	r5, r0, #8
 8005a26:	431d      	orrs	r5, r3
 8005a28:	000b      	movs	r3, r1
 8005a2a:	021c      	lsls	r4, r3, #8
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	60bb      	str	r3, [r7, #8]
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	68b8      	ldr	r0, [r7, #8]
 8005a3a:	68f9      	ldr	r1, [r7, #12]
 8005a3c:	1900      	adds	r0, r0, r4
 8005a3e:	4169      	adcs	r1, r5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	603b      	str	r3, [r7, #0]
 8005a46:	2300      	movs	r3, #0
 8005a48:	607b      	str	r3, [r7, #4]
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f7fa fbf9 	bl	8000244 <__aeabi_uldivmod>
 8005a52:	0002      	movs	r2, r0
 8005a54:	000b      	movs	r3, r1
 8005a56:	0013      	movs	r3, r2
 8005a58:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a5c:	23c0      	movs	r3, #192	@ 0xc0
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d309      	bcc.n	8005a78 <UART_SetConfig+0x294>
 8005a64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a66:	2380      	movs	r3, #128	@ 0x80
 8005a68:	035b      	lsls	r3, r3, #13
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d204      	bcs.n	8005a78 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	e0e7      	b.n	8005c48 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8005a78:	231a      	movs	r3, #26
 8005a7a:	2218      	movs	r2, #24
 8005a7c:	189b      	adds	r3, r3, r2
 8005a7e:	19db      	adds	r3, r3, r7
 8005a80:	2201      	movs	r2, #1
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	e0e0      	b.n	8005c48 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	69da      	ldr	r2, [r3, #28]
 8005a8a:	2380      	movs	r3, #128	@ 0x80
 8005a8c:	021b      	lsls	r3, r3, #8
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d000      	beq.n	8005a94 <UART_SetConfig+0x2b0>
 8005a92:	e082      	b.n	8005b9a <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8005a94:	231b      	movs	r3, #27
 8005a96:	2218      	movs	r2, #24
 8005a98:	189b      	adds	r3, r3, r2
 8005a9a:	19db      	adds	r3, r3, r7
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d834      	bhi.n	8005b0c <UART_SetConfig+0x328>
 8005aa2:	009a      	lsls	r2, r3, #2
 8005aa4:	4b18      	ldr	r3, [pc, #96]	@ (8005b08 <UART_SetConfig+0x324>)
 8005aa6:	18d3      	adds	r3, r2, r3
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aac:	f7fe f83c 	bl	8003b28 <HAL_RCC_GetPCLK1Freq>
 8005ab0:	0003      	movs	r3, r0
 8005ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005ab4:	e033      	b.n	8005b1e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ab6:	f7fe f84d 	bl	8003b54 <HAL_RCC_GetPCLK2Freq>
 8005aba:	0003      	movs	r3, r0
 8005abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005abe:	e02e      	b.n	8005b1e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8005afc <UART_SetConfig+0x318>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d002      	beq.n	8005ad0 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005aca:	4b0d      	ldr	r3, [pc, #52]	@ (8005b00 <UART_SetConfig+0x31c>)
 8005acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ace:	e026      	b.n	8005b1e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8005b04 <UART_SetConfig+0x320>)
 8005ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005ad4:	e023      	b.n	8005b1e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ad6:	f7fd ff77 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8005ada:	0003      	movs	r3, r0
 8005adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005ade:	e01e      	b.n	8005b1e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae0:	2380      	movs	r3, #128	@ 0x80
 8005ae2:	021b      	lsls	r3, r3, #8
 8005ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005ae6:	e01a      	b.n	8005b1e <UART_SetConfig+0x33a>
 8005ae8:	efff69f3 	.word	0xefff69f3
 8005aec:	ffffcfff 	.word	0xffffcfff
 8005af0:	40004800 	.word	0x40004800
 8005af4:	fffff4ff 	.word	0xfffff4ff
 8005af8:	40004400 	.word	0x40004400
 8005afc:	40021000 	.word	0x40021000
 8005b00:	003d0900 	.word	0x003d0900
 8005b04:	00f42400 	.word	0x00f42400
 8005b08:	08006b34 	.word	0x08006b34
      default:
        pclk = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005b10:	231a      	movs	r3, #26
 8005b12:	2218      	movs	r2, #24
 8005b14:	189b      	adds	r3, r3, r2
 8005b16:	19db      	adds	r3, r3, r7
 8005b18:	2201      	movs	r2, #1
 8005b1a:	701a      	strb	r2, [r3, #0]
        break;
 8005b1c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d100      	bne.n	8005b26 <UART_SetConfig+0x342>
 8005b24:	e090      	b.n	8005c48 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b28:	005a      	lsls	r2, r3, #1
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	18d2      	adds	r2, r2, r3
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	0019      	movs	r1, r3
 8005b38:	0010      	movs	r0, r2
 8005b3a:	f7fa faf7 	bl	800012c <__udivsi3>
 8005b3e:	0003      	movs	r3, r0
 8005b40:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b44:	2b0f      	cmp	r3, #15
 8005b46:	d921      	bls.n	8005b8c <UART_SetConfig+0x3a8>
 8005b48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b4a:	2380      	movs	r3, #128	@ 0x80
 8005b4c:	025b      	lsls	r3, r3, #9
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d21c      	bcs.n	8005b8c <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	200e      	movs	r0, #14
 8005b58:	2418      	movs	r4, #24
 8005b5a:	1903      	adds	r3, r0, r4
 8005b5c:	19db      	adds	r3, r3, r7
 8005b5e:	210f      	movs	r1, #15
 8005b60:	438a      	bics	r2, r1
 8005b62:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2207      	movs	r2, #7
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	b299      	uxth	r1, r3
 8005b70:	1903      	adds	r3, r0, r4
 8005b72:	19db      	adds	r3, r3, r7
 8005b74:	1902      	adds	r2, r0, r4
 8005b76:	19d2      	adds	r2, r2, r7
 8005b78:	8812      	ldrh	r2, [r2, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	1902      	adds	r2, r0, r4
 8005b84:	19d2      	adds	r2, r2, r7
 8005b86:	8812      	ldrh	r2, [r2, #0]
 8005b88:	60da      	str	r2, [r3, #12]
 8005b8a:	e05d      	b.n	8005c48 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005b8c:	231a      	movs	r3, #26
 8005b8e:	2218      	movs	r2, #24
 8005b90:	189b      	adds	r3, r3, r2
 8005b92:	19db      	adds	r3, r3, r7
 8005b94:	2201      	movs	r2, #1
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	e056      	b.n	8005c48 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b9a:	231b      	movs	r3, #27
 8005b9c:	2218      	movs	r2, #24
 8005b9e:	189b      	adds	r3, r3, r2
 8005ba0:	19db      	adds	r3, r3, r7
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d822      	bhi.n	8005bee <UART_SetConfig+0x40a>
 8005ba8:	009a      	lsls	r2, r3, #2
 8005baa:	4b2f      	ldr	r3, [pc, #188]	@ (8005c68 <UART_SetConfig+0x484>)
 8005bac:	18d3      	adds	r3, r2, r3
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb2:	f7fd ffb9 	bl	8003b28 <HAL_RCC_GetPCLK1Freq>
 8005bb6:	0003      	movs	r3, r0
 8005bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005bba:	e021      	b.n	8005c00 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bbc:	f7fd ffca 	bl	8003b54 <HAL_RCC_GetPCLK2Freq>
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005bc4:	e01c      	b.n	8005c00 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bc6:	4b29      	ldr	r3, [pc, #164]	@ (8005c6c <UART_SetConfig+0x488>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2210      	movs	r2, #16
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d002      	beq.n	8005bd6 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005bd0:	4b27      	ldr	r3, [pc, #156]	@ (8005c70 <UART_SetConfig+0x48c>)
 8005bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bd4:	e014      	b.n	8005c00 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8005bd6:	4b27      	ldr	r3, [pc, #156]	@ (8005c74 <UART_SetConfig+0x490>)
 8005bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005bda:	e011      	b.n	8005c00 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bdc:	f7fd fef4 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8005be0:	0003      	movs	r3, r0
 8005be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005be4:	e00c      	b.n	8005c00 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005be6:	2380      	movs	r3, #128	@ 0x80
 8005be8:	021b      	lsls	r3, r3, #8
 8005bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005bec:	e008      	b.n	8005c00 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005bf2:	231a      	movs	r3, #26
 8005bf4:	2218      	movs	r2, #24
 8005bf6:	189b      	adds	r3, r3, r2
 8005bf8:	19db      	adds	r3, r3, r7
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	701a      	strb	r2, [r3, #0]
        break;
 8005bfe:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d020      	beq.n	8005c48 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	085a      	lsrs	r2, r3, #1
 8005c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0e:	18d2      	adds	r2, r2, r3
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	0019      	movs	r1, r3
 8005c16:	0010      	movs	r0, r2
 8005c18:	f7fa fa88 	bl	800012c <__udivsi3>
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c22:	2b0f      	cmp	r3, #15
 8005c24:	d90a      	bls.n	8005c3c <UART_SetConfig+0x458>
 8005c26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c28:	2380      	movs	r3, #128	@ 0x80
 8005c2a:	025b      	lsls	r3, r3, #9
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d205      	bcs.n	8005c3c <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60da      	str	r2, [r3, #12]
 8005c3a:	e005      	b.n	8005c48 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005c3c:	231a      	movs	r3, #26
 8005c3e:	2218      	movs	r2, #24
 8005c40:	189b      	adds	r3, r3, r2
 8005c42:	19db      	adds	r3, r3, r7
 8005c44:	2201      	movs	r2, #1
 8005c46:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	2200      	movs	r2, #0
 8005c52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c54:	231a      	movs	r3, #26
 8005c56:	2218      	movs	r2, #24
 8005c58:	189b      	adds	r3, r3, r2
 8005c5a:	19db      	adds	r3, r3, r7
 8005c5c:	781b      	ldrb	r3, [r3, #0]
}
 8005c5e:	0018      	movs	r0, r3
 8005c60:	46bd      	mov	sp, r7
 8005c62:	b00e      	add	sp, #56	@ 0x38
 8005c64:	bdb0      	pop	{r4, r5, r7, pc}
 8005c66:	46c0      	nop			@ (mov r8, r8)
 8005c68:	08006b58 	.word	0x08006b58
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	003d0900 	.word	0x003d0900
 8005c74:	00f42400 	.word	0x00f42400

08005c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c84:	2201      	movs	r2, #1
 8005c86:	4013      	ands	r3, r2
 8005c88:	d00b      	beq.n	8005ca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	4a4a      	ldr	r2, [pc, #296]	@ (8005dbc <UART_AdvFeatureConfig+0x144>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	0019      	movs	r1, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	4013      	ands	r3, r2
 8005caa:	d00b      	beq.n	8005cc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4a43      	ldr	r2, [pc, #268]	@ (8005dc0 <UART_AdvFeatureConfig+0x148>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	0019      	movs	r1, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc8:	2204      	movs	r2, #4
 8005cca:	4013      	ands	r3, r2
 8005ccc:	d00b      	beq.n	8005ce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	4a3b      	ldr	r2, [pc, #236]	@ (8005dc4 <UART_AdvFeatureConfig+0x14c>)
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	0019      	movs	r1, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cea:	2208      	movs	r2, #8
 8005cec:	4013      	ands	r3, r2
 8005cee:	d00b      	beq.n	8005d08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	4a34      	ldr	r2, [pc, #208]	@ (8005dc8 <UART_AdvFeatureConfig+0x150>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	0019      	movs	r1, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	2210      	movs	r2, #16
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d00b      	beq.n	8005d2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	4a2c      	ldr	r2, [pc, #176]	@ (8005dcc <UART_AdvFeatureConfig+0x154>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	0019      	movs	r1, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2e:	2220      	movs	r2, #32
 8005d30:	4013      	ands	r3, r2
 8005d32:	d00b      	beq.n	8005d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	4a25      	ldr	r2, [pc, #148]	@ (8005dd0 <UART_AdvFeatureConfig+0x158>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	0019      	movs	r1, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d50:	2240      	movs	r2, #64	@ 0x40
 8005d52:	4013      	ands	r3, r2
 8005d54:	d01d      	beq.n	8005d92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd4 <UART_AdvFeatureConfig+0x15c>)
 8005d5e:	4013      	ands	r3, r2
 8005d60:	0019      	movs	r1, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d72:	2380      	movs	r3, #128	@ 0x80
 8005d74:	035b      	lsls	r3, r3, #13
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d10b      	bne.n	8005d92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	4a15      	ldr	r2, [pc, #84]	@ (8005dd8 <UART_AdvFeatureConfig+0x160>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	0019      	movs	r1, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d96:	2280      	movs	r2, #128	@ 0x80
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d00b      	beq.n	8005db4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	4a0e      	ldr	r2, [pc, #56]	@ (8005ddc <UART_AdvFeatureConfig+0x164>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	0019      	movs	r1, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	605a      	str	r2, [r3, #4]
  }
}
 8005db4:	46c0      	nop			@ (mov r8, r8)
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b002      	add	sp, #8
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	fffdffff 	.word	0xfffdffff
 8005dc0:	fffeffff 	.word	0xfffeffff
 8005dc4:	fffbffff 	.word	0xfffbffff
 8005dc8:	ffff7fff 	.word	0xffff7fff
 8005dcc:	ffffefff 	.word	0xffffefff
 8005dd0:	ffffdfff 	.word	0xffffdfff
 8005dd4:	ffefffff 	.word	0xffefffff
 8005dd8:	ff9fffff 	.word	0xff9fffff
 8005ddc:	fff7ffff 	.word	0xfff7ffff

08005de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b092      	sub	sp, #72	@ 0x48
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2284      	movs	r2, #132	@ 0x84
 8005dec:	2100      	movs	r1, #0
 8005dee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005df0:	f7fb fe62 	bl	8001ab8 <HAL_GetTick>
 8005df4:	0003      	movs	r3, r0
 8005df6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2208      	movs	r2, #8
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d12c      	bne.n	8005e60 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e08:	2280      	movs	r2, #128	@ 0x80
 8005e0a:	0391      	lsls	r1, r2, #14
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4a46      	ldr	r2, [pc, #280]	@ (8005f28 <UART_CheckIdleState+0x148>)
 8005e10:	9200      	str	r2, [sp, #0]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f000 f88c 	bl	8005f30 <UART_WaitOnFlagUntilTimeout>
 8005e18:	1e03      	subs	r3, r0, #0
 8005e1a:	d021      	beq.n	8005e60 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e20:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e26:	2301      	movs	r3, #1
 8005e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2c:	f383 8810 	msr	PRIMASK, r3
}
 8005e30:	46c0      	nop			@ (mov r8, r8)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2180      	movs	r1, #128	@ 0x80
 8005e3e:	438a      	bics	r2, r1
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e48:	f383 8810 	msr	PRIMASK, r3
}
 8005e4c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2278      	movs	r2, #120	@ 0x78
 8005e58:	2100      	movs	r1, #0
 8005e5a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e05f      	b.n	8005f20 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2204      	movs	r2, #4
 8005e68:	4013      	ands	r3, r2
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d146      	bne.n	8005efc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e70:	2280      	movs	r2, #128	@ 0x80
 8005e72:	03d1      	lsls	r1, r2, #15
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	4a2c      	ldr	r2, [pc, #176]	@ (8005f28 <UART_CheckIdleState+0x148>)
 8005e78:	9200      	str	r2, [sp, #0]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f000 f858 	bl	8005f30 <UART_WaitOnFlagUntilTimeout>
 8005e80:	1e03      	subs	r3, r0, #0
 8005e82:	d03b      	beq.n	8005efc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e84:	f3ef 8310 	mrs	r3, PRIMASK
 8005e88:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e8e:	2301      	movs	r3, #1
 8005e90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f383 8810 	msr	PRIMASK, r3
}
 8005e98:	46c0      	nop			@ (mov r8, r8)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4921      	ldr	r1, [pc, #132]	@ (8005f2c <UART_CheckIdleState+0x14c>)
 8005ea6:	400a      	ands	r2, r1
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f383 8810 	msr	PRIMASK, r3
}
 8005eb4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8005eba:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ebc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ebe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f383 8810 	msr	PRIMASK, r3
}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	438a      	bics	r2, r1
 8005eda:	609a      	str	r2, [r3, #8]
 8005edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ede:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	f383 8810 	msr	PRIMASK, r3
}
 8005ee6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2280      	movs	r2, #128	@ 0x80
 8005eec:	2120      	movs	r1, #32
 8005eee:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2278      	movs	r2, #120	@ 0x78
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e011      	b.n	8005f20 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2280      	movs	r2, #128	@ 0x80
 8005f06:	2120      	movs	r1, #32
 8005f08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2278      	movs	r2, #120	@ 0x78
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	0018      	movs	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b010      	add	sp, #64	@ 0x40
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	01ffffff 	.word	0x01ffffff
 8005f2c:	fffffedf 	.word	0xfffffedf

08005f30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	1dfb      	adds	r3, r7, #7
 8005f3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f40:	e04b      	b.n	8005fda <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	3301      	adds	r3, #1
 8005f46:	d048      	beq.n	8005fda <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f48:	f7fb fdb6 	bl	8001ab8 <HAL_GetTick>
 8005f4c:	0002      	movs	r2, r0
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d302      	bcc.n	8005f5e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e04b      	b.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2204      	movs	r2, #4
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	d035      	beq.n	8005fda <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	2208      	movs	r2, #8
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d111      	bne.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2208      	movs	r2, #8
 8005f82:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	0018      	movs	r0, r3
 8005f88:	f000 f83c 	bl	8006004 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2284      	movs	r2, #132	@ 0x84
 8005f90:	2108      	movs	r1, #8
 8005f92:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2278      	movs	r2, #120	@ 0x78
 8005f98:	2100      	movs	r1, #0
 8005f9a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e02c      	b.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69da      	ldr	r2, [r3, #28]
 8005fa6:	2380      	movs	r3, #128	@ 0x80
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	401a      	ands	r2, r3
 8005fac:	2380      	movs	r3, #128	@ 0x80
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d112      	bne.n	8005fda <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2280      	movs	r2, #128	@ 0x80
 8005fba:	0112      	lsls	r2, r2, #4
 8005fbc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	f000 f81f 	bl	8006004 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2284      	movs	r2, #132	@ 0x84
 8005fca:	2120      	movs	r1, #32
 8005fcc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2278      	movs	r2, #120	@ 0x78
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e00f      	b.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	425a      	negs	r2, r3
 8005fea:	4153      	adcs	r3, r2
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	001a      	movs	r2, r3
 8005ff0:	1dfb      	adds	r3, r7, #7
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d0a4      	beq.n	8005f42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b004      	add	sp, #16
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08e      	sub	sp, #56	@ 0x38
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800600c:	f3ef 8310 	mrs	r3, PRIMASK
 8006010:	617b      	str	r3, [r7, #20]
  return(result);
 8006012:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006014:	637b      	str	r3, [r7, #52]	@ 0x34
 8006016:	2301      	movs	r3, #1
 8006018:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	f383 8810 	msr	PRIMASK, r3
}
 8006020:	46c0      	nop			@ (mov r8, r8)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4926      	ldr	r1, [pc, #152]	@ (80060c8 <UART_EndRxTransfer+0xc4>)
 800602e:	400a      	ands	r2, r1
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006034:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	f383 8810 	msr	PRIMASK, r3
}
 800603c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800603e:	f3ef 8310 	mrs	r3, PRIMASK
 8006042:	623b      	str	r3, [r7, #32]
  return(result);
 8006044:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	633b      	str	r3, [r7, #48]	@ 0x30
 8006048:	2301      	movs	r3, #1
 800604a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800604c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604e:	f383 8810 	msr	PRIMASK, r3
}
 8006052:	46c0      	nop			@ (mov r8, r8)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2101      	movs	r1, #1
 8006060:	438a      	bics	r2, r1
 8006062:	609a      	str	r2, [r3, #8]
 8006064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006066:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606a:	f383 8810 	msr	PRIMASK, r3
}
 800606e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006074:	2b01      	cmp	r3, #1
 8006076:	d118      	bne.n	80060aa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006078:	f3ef 8310 	mrs	r3, PRIMASK
 800607c:	60bb      	str	r3, [r7, #8]
  return(result);
 800607e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006082:	2301      	movs	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f383 8810 	msr	PRIMASK, r3
}
 800608c:	46c0      	nop			@ (mov r8, r8)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2110      	movs	r1, #16
 800609a:	438a      	bics	r2, r1
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f383 8810 	msr	PRIMASK, r3
}
 80060a8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2280      	movs	r2, #128	@ 0x80
 80060ae:	2120      	movs	r1, #32
 80060b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80060be:	46c0      	nop			@ (mov r8, r8)
 80060c0:	46bd      	mov	sp, r7
 80060c2:	b00e      	add	sp, #56	@ 0x38
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	46c0      	nop			@ (mov r8, r8)
 80060c8:	fffffedf 	.word	0xfffffedf

080060cc <siprintf>:
 80060cc:	b40e      	push	{r1, r2, r3}
 80060ce:	b500      	push	{lr}
 80060d0:	490b      	ldr	r1, [pc, #44]	@ (8006100 <siprintf+0x34>)
 80060d2:	b09c      	sub	sp, #112	@ 0x70
 80060d4:	ab1d      	add	r3, sp, #116	@ 0x74
 80060d6:	9002      	str	r0, [sp, #8]
 80060d8:	9006      	str	r0, [sp, #24]
 80060da:	9107      	str	r1, [sp, #28]
 80060dc:	9104      	str	r1, [sp, #16]
 80060de:	4809      	ldr	r0, [pc, #36]	@ (8006104 <siprintf+0x38>)
 80060e0:	4909      	ldr	r1, [pc, #36]	@ (8006108 <siprintf+0x3c>)
 80060e2:	cb04      	ldmia	r3!, {r2}
 80060e4:	9105      	str	r1, [sp, #20]
 80060e6:	6800      	ldr	r0, [r0, #0]
 80060e8:	a902      	add	r1, sp, #8
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	f000 f99e 	bl	800642c <_svfiprintf_r>
 80060f0:	2200      	movs	r2, #0
 80060f2:	9b02      	ldr	r3, [sp, #8]
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	b01c      	add	sp, #112	@ 0x70
 80060f8:	bc08      	pop	{r3}
 80060fa:	b003      	add	sp, #12
 80060fc:	4718      	bx	r3
 80060fe:	46c0      	nop			@ (mov r8, r8)
 8006100:	7fffffff 	.word	0x7fffffff
 8006104:	20000018 	.word	0x20000018
 8006108:	ffff0208 	.word	0xffff0208

0800610c <memset>:
 800610c:	0003      	movs	r3, r0
 800610e:	1882      	adds	r2, r0, r2
 8006110:	4293      	cmp	r3, r2
 8006112:	d100      	bne.n	8006116 <memset+0xa>
 8006114:	4770      	bx	lr
 8006116:	7019      	strb	r1, [r3, #0]
 8006118:	3301      	adds	r3, #1
 800611a:	e7f9      	b.n	8006110 <memset+0x4>

0800611c <__errno>:
 800611c:	4b01      	ldr	r3, [pc, #4]	@ (8006124 <__errno+0x8>)
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	4770      	bx	lr
 8006122:	46c0      	nop			@ (mov r8, r8)
 8006124:	20000018 	.word	0x20000018

08006128 <__libc_init_array>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	2600      	movs	r6, #0
 800612c:	4c0c      	ldr	r4, [pc, #48]	@ (8006160 <__libc_init_array+0x38>)
 800612e:	4d0d      	ldr	r5, [pc, #52]	@ (8006164 <__libc_init_array+0x3c>)
 8006130:	1b64      	subs	r4, r4, r5
 8006132:	10a4      	asrs	r4, r4, #2
 8006134:	42a6      	cmp	r6, r4
 8006136:	d109      	bne.n	800614c <__libc_init_array+0x24>
 8006138:	2600      	movs	r6, #0
 800613a:	f000 fc65 	bl	8006a08 <_init>
 800613e:	4c0a      	ldr	r4, [pc, #40]	@ (8006168 <__libc_init_array+0x40>)
 8006140:	4d0a      	ldr	r5, [pc, #40]	@ (800616c <__libc_init_array+0x44>)
 8006142:	1b64      	subs	r4, r4, r5
 8006144:	10a4      	asrs	r4, r4, #2
 8006146:	42a6      	cmp	r6, r4
 8006148:	d105      	bne.n	8006156 <__libc_init_array+0x2e>
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	00b3      	lsls	r3, r6, #2
 800614e:	58eb      	ldr	r3, [r5, r3]
 8006150:	4798      	blx	r3
 8006152:	3601      	adds	r6, #1
 8006154:	e7ee      	b.n	8006134 <__libc_init_array+0xc>
 8006156:	00b3      	lsls	r3, r6, #2
 8006158:	58eb      	ldr	r3, [r5, r3]
 800615a:	4798      	blx	r3
 800615c:	3601      	adds	r6, #1
 800615e:	e7f2      	b.n	8006146 <__libc_init_array+0x1e>
 8006160:	08006bb8 	.word	0x08006bb8
 8006164:	08006bb8 	.word	0x08006bb8
 8006168:	08006bbc 	.word	0x08006bbc
 800616c:	08006bb8 	.word	0x08006bb8

08006170 <__retarget_lock_acquire_recursive>:
 8006170:	4770      	bx	lr

08006172 <__retarget_lock_release_recursive>:
 8006172:	4770      	bx	lr

08006174 <_free_r>:
 8006174:	b570      	push	{r4, r5, r6, lr}
 8006176:	0005      	movs	r5, r0
 8006178:	1e0c      	subs	r4, r1, #0
 800617a:	d010      	beq.n	800619e <_free_r+0x2a>
 800617c:	3c04      	subs	r4, #4
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	da00      	bge.n	8006186 <_free_r+0x12>
 8006184:	18e4      	adds	r4, r4, r3
 8006186:	0028      	movs	r0, r5
 8006188:	f000 f8e0 	bl	800634c <__malloc_lock>
 800618c:	4a1d      	ldr	r2, [pc, #116]	@ (8006204 <_free_r+0x90>)
 800618e:	6813      	ldr	r3, [r2, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d105      	bne.n	80061a0 <_free_r+0x2c>
 8006194:	6063      	str	r3, [r4, #4]
 8006196:	6014      	str	r4, [r2, #0]
 8006198:	0028      	movs	r0, r5
 800619a:	f000 f8df 	bl	800635c <__malloc_unlock>
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	42a3      	cmp	r3, r4
 80061a2:	d908      	bls.n	80061b6 <_free_r+0x42>
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	1821      	adds	r1, r4, r0
 80061a8:	428b      	cmp	r3, r1
 80061aa:	d1f3      	bne.n	8006194 <_free_r+0x20>
 80061ac:	6819      	ldr	r1, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	1809      	adds	r1, r1, r0
 80061b2:	6021      	str	r1, [r4, #0]
 80061b4:	e7ee      	b.n	8006194 <_free_r+0x20>
 80061b6:	001a      	movs	r2, r3
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <_free_r+0x4e>
 80061be:	42a3      	cmp	r3, r4
 80061c0:	d9f9      	bls.n	80061b6 <_free_r+0x42>
 80061c2:	6811      	ldr	r1, [r2, #0]
 80061c4:	1850      	adds	r0, r2, r1
 80061c6:	42a0      	cmp	r0, r4
 80061c8:	d10b      	bne.n	80061e2 <_free_r+0x6e>
 80061ca:	6820      	ldr	r0, [r4, #0]
 80061cc:	1809      	adds	r1, r1, r0
 80061ce:	1850      	adds	r0, r2, r1
 80061d0:	6011      	str	r1, [r2, #0]
 80061d2:	4283      	cmp	r3, r0
 80061d4:	d1e0      	bne.n	8006198 <_free_r+0x24>
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	1841      	adds	r1, r0, r1
 80061dc:	6011      	str	r1, [r2, #0]
 80061de:	6053      	str	r3, [r2, #4]
 80061e0:	e7da      	b.n	8006198 <_free_r+0x24>
 80061e2:	42a0      	cmp	r0, r4
 80061e4:	d902      	bls.n	80061ec <_free_r+0x78>
 80061e6:	230c      	movs	r3, #12
 80061e8:	602b      	str	r3, [r5, #0]
 80061ea:	e7d5      	b.n	8006198 <_free_r+0x24>
 80061ec:	6820      	ldr	r0, [r4, #0]
 80061ee:	1821      	adds	r1, r4, r0
 80061f0:	428b      	cmp	r3, r1
 80061f2:	d103      	bne.n	80061fc <_free_r+0x88>
 80061f4:	6819      	ldr	r1, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	1809      	adds	r1, r1, r0
 80061fa:	6021      	str	r1, [r4, #0]
 80061fc:	6063      	str	r3, [r4, #4]
 80061fe:	6054      	str	r4, [r2, #4]
 8006200:	e7ca      	b.n	8006198 <_free_r+0x24>
 8006202:	46c0      	nop			@ (mov r8, r8)
 8006204:	200003c4 	.word	0x200003c4

08006208 <sbrk_aligned>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	4e0f      	ldr	r6, [pc, #60]	@ (8006248 <sbrk_aligned+0x40>)
 800620c:	000d      	movs	r5, r1
 800620e:	6831      	ldr	r1, [r6, #0]
 8006210:	0004      	movs	r4, r0
 8006212:	2900      	cmp	r1, #0
 8006214:	d102      	bne.n	800621c <sbrk_aligned+0x14>
 8006216:	f000 fb99 	bl	800694c <_sbrk_r>
 800621a:	6030      	str	r0, [r6, #0]
 800621c:	0029      	movs	r1, r5
 800621e:	0020      	movs	r0, r4
 8006220:	f000 fb94 	bl	800694c <_sbrk_r>
 8006224:	1c43      	adds	r3, r0, #1
 8006226:	d103      	bne.n	8006230 <sbrk_aligned+0x28>
 8006228:	2501      	movs	r5, #1
 800622a:	426d      	negs	r5, r5
 800622c:	0028      	movs	r0, r5
 800622e:	bd70      	pop	{r4, r5, r6, pc}
 8006230:	2303      	movs	r3, #3
 8006232:	1cc5      	adds	r5, r0, #3
 8006234:	439d      	bics	r5, r3
 8006236:	42a8      	cmp	r0, r5
 8006238:	d0f8      	beq.n	800622c <sbrk_aligned+0x24>
 800623a:	1a29      	subs	r1, r5, r0
 800623c:	0020      	movs	r0, r4
 800623e:	f000 fb85 	bl	800694c <_sbrk_r>
 8006242:	3001      	adds	r0, #1
 8006244:	d1f2      	bne.n	800622c <sbrk_aligned+0x24>
 8006246:	e7ef      	b.n	8006228 <sbrk_aligned+0x20>
 8006248:	200003c0 	.word	0x200003c0

0800624c <_malloc_r>:
 800624c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800624e:	2203      	movs	r2, #3
 8006250:	1ccb      	adds	r3, r1, #3
 8006252:	4393      	bics	r3, r2
 8006254:	3308      	adds	r3, #8
 8006256:	0005      	movs	r5, r0
 8006258:	001f      	movs	r7, r3
 800625a:	2b0c      	cmp	r3, #12
 800625c:	d234      	bcs.n	80062c8 <_malloc_r+0x7c>
 800625e:	270c      	movs	r7, #12
 8006260:	42b9      	cmp	r1, r7
 8006262:	d833      	bhi.n	80062cc <_malloc_r+0x80>
 8006264:	0028      	movs	r0, r5
 8006266:	f000 f871 	bl	800634c <__malloc_lock>
 800626a:	4e37      	ldr	r6, [pc, #220]	@ (8006348 <_malloc_r+0xfc>)
 800626c:	6833      	ldr	r3, [r6, #0]
 800626e:	001c      	movs	r4, r3
 8006270:	2c00      	cmp	r4, #0
 8006272:	d12f      	bne.n	80062d4 <_malloc_r+0x88>
 8006274:	0039      	movs	r1, r7
 8006276:	0028      	movs	r0, r5
 8006278:	f7ff ffc6 	bl	8006208 <sbrk_aligned>
 800627c:	0004      	movs	r4, r0
 800627e:	1c43      	adds	r3, r0, #1
 8006280:	d15f      	bne.n	8006342 <_malloc_r+0xf6>
 8006282:	6834      	ldr	r4, [r6, #0]
 8006284:	9400      	str	r4, [sp, #0]
 8006286:	9b00      	ldr	r3, [sp, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d14a      	bne.n	8006322 <_malloc_r+0xd6>
 800628c:	2c00      	cmp	r4, #0
 800628e:	d052      	beq.n	8006336 <_malloc_r+0xea>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	0028      	movs	r0, r5
 8006294:	18e3      	adds	r3, r4, r3
 8006296:	9900      	ldr	r1, [sp, #0]
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	f000 fb57 	bl	800694c <_sbrk_r>
 800629e:	9b01      	ldr	r3, [sp, #4]
 80062a0:	4283      	cmp	r3, r0
 80062a2:	d148      	bne.n	8006336 <_malloc_r+0xea>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	0028      	movs	r0, r5
 80062a8:	1aff      	subs	r7, r7, r3
 80062aa:	0039      	movs	r1, r7
 80062ac:	f7ff ffac 	bl	8006208 <sbrk_aligned>
 80062b0:	3001      	adds	r0, #1
 80062b2:	d040      	beq.n	8006336 <_malloc_r+0xea>
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	19db      	adds	r3, r3, r7
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	6833      	ldr	r3, [r6, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	2a00      	cmp	r2, #0
 80062c0:	d133      	bne.n	800632a <_malloc_r+0xde>
 80062c2:	9b00      	ldr	r3, [sp, #0]
 80062c4:	6033      	str	r3, [r6, #0]
 80062c6:	e019      	b.n	80062fc <_malloc_r+0xb0>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	dac9      	bge.n	8006260 <_malloc_r+0x14>
 80062cc:	230c      	movs	r3, #12
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	2000      	movs	r0, #0
 80062d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062d4:	6821      	ldr	r1, [r4, #0]
 80062d6:	1bc9      	subs	r1, r1, r7
 80062d8:	d420      	bmi.n	800631c <_malloc_r+0xd0>
 80062da:	290b      	cmp	r1, #11
 80062dc:	d90a      	bls.n	80062f4 <_malloc_r+0xa8>
 80062de:	19e2      	adds	r2, r4, r7
 80062e0:	6027      	str	r7, [r4, #0]
 80062e2:	42a3      	cmp	r3, r4
 80062e4:	d104      	bne.n	80062f0 <_malloc_r+0xa4>
 80062e6:	6032      	str	r2, [r6, #0]
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	6011      	str	r1, [r2, #0]
 80062ec:	6053      	str	r3, [r2, #4]
 80062ee:	e005      	b.n	80062fc <_malloc_r+0xb0>
 80062f0:	605a      	str	r2, [r3, #4]
 80062f2:	e7f9      	b.n	80062e8 <_malloc_r+0x9c>
 80062f4:	6862      	ldr	r2, [r4, #4]
 80062f6:	42a3      	cmp	r3, r4
 80062f8:	d10e      	bne.n	8006318 <_malloc_r+0xcc>
 80062fa:	6032      	str	r2, [r6, #0]
 80062fc:	0028      	movs	r0, r5
 80062fe:	f000 f82d 	bl	800635c <__malloc_unlock>
 8006302:	0020      	movs	r0, r4
 8006304:	2207      	movs	r2, #7
 8006306:	300b      	adds	r0, #11
 8006308:	1d23      	adds	r3, r4, #4
 800630a:	4390      	bics	r0, r2
 800630c:	1ac2      	subs	r2, r0, r3
 800630e:	4298      	cmp	r0, r3
 8006310:	d0df      	beq.n	80062d2 <_malloc_r+0x86>
 8006312:	1a1b      	subs	r3, r3, r0
 8006314:	50a3      	str	r3, [r4, r2]
 8006316:	e7dc      	b.n	80062d2 <_malloc_r+0x86>
 8006318:	605a      	str	r2, [r3, #4]
 800631a:	e7ef      	b.n	80062fc <_malloc_r+0xb0>
 800631c:	0023      	movs	r3, r4
 800631e:	6864      	ldr	r4, [r4, #4]
 8006320:	e7a6      	b.n	8006270 <_malloc_r+0x24>
 8006322:	9c00      	ldr	r4, [sp, #0]
 8006324:	6863      	ldr	r3, [r4, #4]
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	e7ad      	b.n	8006286 <_malloc_r+0x3a>
 800632a:	001a      	movs	r2, r3
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	42a3      	cmp	r3, r4
 8006330:	d1fb      	bne.n	800632a <_malloc_r+0xde>
 8006332:	2300      	movs	r3, #0
 8006334:	e7da      	b.n	80062ec <_malloc_r+0xa0>
 8006336:	230c      	movs	r3, #12
 8006338:	0028      	movs	r0, r5
 800633a:	602b      	str	r3, [r5, #0]
 800633c:	f000 f80e 	bl	800635c <__malloc_unlock>
 8006340:	e7c6      	b.n	80062d0 <_malloc_r+0x84>
 8006342:	6007      	str	r7, [r0, #0]
 8006344:	e7da      	b.n	80062fc <_malloc_r+0xb0>
 8006346:	46c0      	nop			@ (mov r8, r8)
 8006348:	200003c4 	.word	0x200003c4

0800634c <__malloc_lock>:
 800634c:	b510      	push	{r4, lr}
 800634e:	4802      	ldr	r0, [pc, #8]	@ (8006358 <__malloc_lock+0xc>)
 8006350:	f7ff ff0e 	bl	8006170 <__retarget_lock_acquire_recursive>
 8006354:	bd10      	pop	{r4, pc}
 8006356:	46c0      	nop			@ (mov r8, r8)
 8006358:	200003bc 	.word	0x200003bc

0800635c <__malloc_unlock>:
 800635c:	b510      	push	{r4, lr}
 800635e:	4802      	ldr	r0, [pc, #8]	@ (8006368 <__malloc_unlock+0xc>)
 8006360:	f7ff ff07 	bl	8006172 <__retarget_lock_release_recursive>
 8006364:	bd10      	pop	{r4, pc}
 8006366:	46c0      	nop			@ (mov r8, r8)
 8006368:	200003bc 	.word	0x200003bc

0800636c <__ssputs_r>:
 800636c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800636e:	688e      	ldr	r6, [r1, #8]
 8006370:	b085      	sub	sp, #20
 8006372:	001f      	movs	r7, r3
 8006374:	000c      	movs	r4, r1
 8006376:	680b      	ldr	r3, [r1, #0]
 8006378:	9002      	str	r0, [sp, #8]
 800637a:	9203      	str	r2, [sp, #12]
 800637c:	42be      	cmp	r6, r7
 800637e:	d830      	bhi.n	80063e2 <__ssputs_r+0x76>
 8006380:	210c      	movs	r1, #12
 8006382:	5e62      	ldrsh	r2, [r4, r1]
 8006384:	2190      	movs	r1, #144	@ 0x90
 8006386:	00c9      	lsls	r1, r1, #3
 8006388:	420a      	tst	r2, r1
 800638a:	d028      	beq.n	80063de <__ssputs_r+0x72>
 800638c:	2003      	movs	r0, #3
 800638e:	6921      	ldr	r1, [r4, #16]
 8006390:	1a5b      	subs	r3, r3, r1
 8006392:	9301      	str	r3, [sp, #4]
 8006394:	6963      	ldr	r3, [r4, #20]
 8006396:	4343      	muls	r3, r0
 8006398:	9801      	ldr	r0, [sp, #4]
 800639a:	0fdd      	lsrs	r5, r3, #31
 800639c:	18ed      	adds	r5, r5, r3
 800639e:	1c7b      	adds	r3, r7, #1
 80063a0:	181b      	adds	r3, r3, r0
 80063a2:	106d      	asrs	r5, r5, #1
 80063a4:	42ab      	cmp	r3, r5
 80063a6:	d900      	bls.n	80063aa <__ssputs_r+0x3e>
 80063a8:	001d      	movs	r5, r3
 80063aa:	0552      	lsls	r2, r2, #21
 80063ac:	d528      	bpl.n	8006400 <__ssputs_r+0x94>
 80063ae:	0029      	movs	r1, r5
 80063b0:	9802      	ldr	r0, [sp, #8]
 80063b2:	f7ff ff4b 	bl	800624c <_malloc_r>
 80063b6:	1e06      	subs	r6, r0, #0
 80063b8:	d02c      	beq.n	8006414 <__ssputs_r+0xa8>
 80063ba:	9a01      	ldr	r2, [sp, #4]
 80063bc:	6921      	ldr	r1, [r4, #16]
 80063be:	f000 fae2 	bl	8006986 <memcpy>
 80063c2:	89a2      	ldrh	r2, [r4, #12]
 80063c4:	4b18      	ldr	r3, [pc, #96]	@ (8006428 <__ssputs_r+0xbc>)
 80063c6:	401a      	ands	r2, r3
 80063c8:	2380      	movs	r3, #128	@ 0x80
 80063ca:	4313      	orrs	r3, r2
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	9b01      	ldr	r3, [sp, #4]
 80063d0:	6126      	str	r6, [r4, #16]
 80063d2:	18f6      	adds	r6, r6, r3
 80063d4:	6026      	str	r6, [r4, #0]
 80063d6:	003e      	movs	r6, r7
 80063d8:	6165      	str	r5, [r4, #20]
 80063da:	1aed      	subs	r5, r5, r3
 80063dc:	60a5      	str	r5, [r4, #8]
 80063de:	42be      	cmp	r6, r7
 80063e0:	d900      	bls.n	80063e4 <__ssputs_r+0x78>
 80063e2:	003e      	movs	r6, r7
 80063e4:	0032      	movs	r2, r6
 80063e6:	9903      	ldr	r1, [sp, #12]
 80063e8:	6820      	ldr	r0, [r4, #0]
 80063ea:	f000 fa9b 	bl	8006924 <memmove>
 80063ee:	2000      	movs	r0, #0
 80063f0:	68a3      	ldr	r3, [r4, #8]
 80063f2:	1b9b      	subs	r3, r3, r6
 80063f4:	60a3      	str	r3, [r4, #8]
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	199b      	adds	r3, r3, r6
 80063fa:	6023      	str	r3, [r4, #0]
 80063fc:	b005      	add	sp, #20
 80063fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006400:	002a      	movs	r2, r5
 8006402:	9802      	ldr	r0, [sp, #8]
 8006404:	f000 fac8 	bl	8006998 <_realloc_r>
 8006408:	1e06      	subs	r6, r0, #0
 800640a:	d1e0      	bne.n	80063ce <__ssputs_r+0x62>
 800640c:	6921      	ldr	r1, [r4, #16]
 800640e:	9802      	ldr	r0, [sp, #8]
 8006410:	f7ff feb0 	bl	8006174 <_free_r>
 8006414:	230c      	movs	r3, #12
 8006416:	2001      	movs	r0, #1
 8006418:	9a02      	ldr	r2, [sp, #8]
 800641a:	4240      	negs	r0, r0
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	89a2      	ldrh	r2, [r4, #12]
 8006420:	3334      	adds	r3, #52	@ 0x34
 8006422:	4313      	orrs	r3, r2
 8006424:	81a3      	strh	r3, [r4, #12]
 8006426:	e7e9      	b.n	80063fc <__ssputs_r+0x90>
 8006428:	fffffb7f 	.word	0xfffffb7f

0800642c <_svfiprintf_r>:
 800642c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800642e:	b0a1      	sub	sp, #132	@ 0x84
 8006430:	9003      	str	r0, [sp, #12]
 8006432:	001d      	movs	r5, r3
 8006434:	898b      	ldrh	r3, [r1, #12]
 8006436:	000f      	movs	r7, r1
 8006438:	0016      	movs	r6, r2
 800643a:	061b      	lsls	r3, r3, #24
 800643c:	d511      	bpl.n	8006462 <_svfiprintf_r+0x36>
 800643e:	690b      	ldr	r3, [r1, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10e      	bne.n	8006462 <_svfiprintf_r+0x36>
 8006444:	2140      	movs	r1, #64	@ 0x40
 8006446:	f7ff ff01 	bl	800624c <_malloc_r>
 800644a:	6038      	str	r0, [r7, #0]
 800644c:	6138      	str	r0, [r7, #16]
 800644e:	2800      	cmp	r0, #0
 8006450:	d105      	bne.n	800645e <_svfiprintf_r+0x32>
 8006452:	230c      	movs	r3, #12
 8006454:	9a03      	ldr	r2, [sp, #12]
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	2001      	movs	r0, #1
 800645a:	4240      	negs	r0, r0
 800645c:	e0cf      	b.n	80065fe <_svfiprintf_r+0x1d2>
 800645e:	2340      	movs	r3, #64	@ 0x40
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	2300      	movs	r3, #0
 8006464:	ac08      	add	r4, sp, #32
 8006466:	6163      	str	r3, [r4, #20]
 8006468:	3320      	adds	r3, #32
 800646a:	7663      	strb	r3, [r4, #25]
 800646c:	3310      	adds	r3, #16
 800646e:	76a3      	strb	r3, [r4, #26]
 8006470:	9507      	str	r5, [sp, #28]
 8006472:	0035      	movs	r5, r6
 8006474:	782b      	ldrb	r3, [r5, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <_svfiprintf_r+0x52>
 800647a:	2b25      	cmp	r3, #37	@ 0x25
 800647c:	d148      	bne.n	8006510 <_svfiprintf_r+0xe4>
 800647e:	1bab      	subs	r3, r5, r6
 8006480:	9305      	str	r3, [sp, #20]
 8006482:	42b5      	cmp	r5, r6
 8006484:	d00b      	beq.n	800649e <_svfiprintf_r+0x72>
 8006486:	0032      	movs	r2, r6
 8006488:	0039      	movs	r1, r7
 800648a:	9803      	ldr	r0, [sp, #12]
 800648c:	f7ff ff6e 	bl	800636c <__ssputs_r>
 8006490:	3001      	adds	r0, #1
 8006492:	d100      	bne.n	8006496 <_svfiprintf_r+0x6a>
 8006494:	e0ae      	b.n	80065f4 <_svfiprintf_r+0x1c8>
 8006496:	6963      	ldr	r3, [r4, #20]
 8006498:	9a05      	ldr	r2, [sp, #20]
 800649a:	189b      	adds	r3, r3, r2
 800649c:	6163      	str	r3, [r4, #20]
 800649e:	782b      	ldrb	r3, [r5, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d100      	bne.n	80064a6 <_svfiprintf_r+0x7a>
 80064a4:	e0a6      	b.n	80065f4 <_svfiprintf_r+0x1c8>
 80064a6:	2201      	movs	r2, #1
 80064a8:	2300      	movs	r3, #0
 80064aa:	4252      	negs	r2, r2
 80064ac:	6062      	str	r2, [r4, #4]
 80064ae:	a904      	add	r1, sp, #16
 80064b0:	3254      	adds	r2, #84	@ 0x54
 80064b2:	1852      	adds	r2, r2, r1
 80064b4:	1c6e      	adds	r6, r5, #1
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	60e3      	str	r3, [r4, #12]
 80064ba:	60a3      	str	r3, [r4, #8]
 80064bc:	7013      	strb	r3, [r2, #0]
 80064be:	65a3      	str	r3, [r4, #88]	@ 0x58
 80064c0:	4b54      	ldr	r3, [pc, #336]	@ (8006614 <_svfiprintf_r+0x1e8>)
 80064c2:	2205      	movs	r2, #5
 80064c4:	0018      	movs	r0, r3
 80064c6:	7831      	ldrb	r1, [r6, #0]
 80064c8:	9305      	str	r3, [sp, #20]
 80064ca:	f000 fa51 	bl	8006970 <memchr>
 80064ce:	1c75      	adds	r5, r6, #1
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d11f      	bne.n	8006514 <_svfiprintf_r+0xe8>
 80064d4:	6822      	ldr	r2, [r4, #0]
 80064d6:	06d3      	lsls	r3, r2, #27
 80064d8:	d504      	bpl.n	80064e4 <_svfiprintf_r+0xb8>
 80064da:	2353      	movs	r3, #83	@ 0x53
 80064dc:	a904      	add	r1, sp, #16
 80064de:	185b      	adds	r3, r3, r1
 80064e0:	2120      	movs	r1, #32
 80064e2:	7019      	strb	r1, [r3, #0]
 80064e4:	0713      	lsls	r3, r2, #28
 80064e6:	d504      	bpl.n	80064f2 <_svfiprintf_r+0xc6>
 80064e8:	2353      	movs	r3, #83	@ 0x53
 80064ea:	a904      	add	r1, sp, #16
 80064ec:	185b      	adds	r3, r3, r1
 80064ee:	212b      	movs	r1, #43	@ 0x2b
 80064f0:	7019      	strb	r1, [r3, #0]
 80064f2:	7833      	ldrb	r3, [r6, #0]
 80064f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80064f6:	d016      	beq.n	8006526 <_svfiprintf_r+0xfa>
 80064f8:	0035      	movs	r5, r6
 80064fa:	2100      	movs	r1, #0
 80064fc:	200a      	movs	r0, #10
 80064fe:	68e3      	ldr	r3, [r4, #12]
 8006500:	782a      	ldrb	r2, [r5, #0]
 8006502:	1c6e      	adds	r6, r5, #1
 8006504:	3a30      	subs	r2, #48	@ 0x30
 8006506:	2a09      	cmp	r2, #9
 8006508:	d950      	bls.n	80065ac <_svfiprintf_r+0x180>
 800650a:	2900      	cmp	r1, #0
 800650c:	d111      	bne.n	8006532 <_svfiprintf_r+0x106>
 800650e:	e017      	b.n	8006540 <_svfiprintf_r+0x114>
 8006510:	3501      	adds	r5, #1
 8006512:	e7af      	b.n	8006474 <_svfiprintf_r+0x48>
 8006514:	9b05      	ldr	r3, [sp, #20]
 8006516:	6822      	ldr	r2, [r4, #0]
 8006518:	1ac0      	subs	r0, r0, r3
 800651a:	2301      	movs	r3, #1
 800651c:	4083      	lsls	r3, r0
 800651e:	4313      	orrs	r3, r2
 8006520:	002e      	movs	r6, r5
 8006522:	6023      	str	r3, [r4, #0]
 8006524:	e7cc      	b.n	80064c0 <_svfiprintf_r+0x94>
 8006526:	9b07      	ldr	r3, [sp, #28]
 8006528:	1d19      	adds	r1, r3, #4
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	9107      	str	r1, [sp, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	db01      	blt.n	8006536 <_svfiprintf_r+0x10a>
 8006532:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006534:	e004      	b.n	8006540 <_svfiprintf_r+0x114>
 8006536:	425b      	negs	r3, r3
 8006538:	60e3      	str	r3, [r4, #12]
 800653a:	2302      	movs	r3, #2
 800653c:	4313      	orrs	r3, r2
 800653e:	6023      	str	r3, [r4, #0]
 8006540:	782b      	ldrb	r3, [r5, #0]
 8006542:	2b2e      	cmp	r3, #46	@ 0x2e
 8006544:	d10c      	bne.n	8006560 <_svfiprintf_r+0x134>
 8006546:	786b      	ldrb	r3, [r5, #1]
 8006548:	2b2a      	cmp	r3, #42	@ 0x2a
 800654a:	d134      	bne.n	80065b6 <_svfiprintf_r+0x18a>
 800654c:	9b07      	ldr	r3, [sp, #28]
 800654e:	3502      	adds	r5, #2
 8006550:	1d1a      	adds	r2, r3, #4
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	9207      	str	r2, [sp, #28]
 8006556:	2b00      	cmp	r3, #0
 8006558:	da01      	bge.n	800655e <_svfiprintf_r+0x132>
 800655a:	2301      	movs	r3, #1
 800655c:	425b      	negs	r3, r3
 800655e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006560:	4e2d      	ldr	r6, [pc, #180]	@ (8006618 <_svfiprintf_r+0x1ec>)
 8006562:	2203      	movs	r2, #3
 8006564:	0030      	movs	r0, r6
 8006566:	7829      	ldrb	r1, [r5, #0]
 8006568:	f000 fa02 	bl	8006970 <memchr>
 800656c:	2800      	cmp	r0, #0
 800656e:	d006      	beq.n	800657e <_svfiprintf_r+0x152>
 8006570:	2340      	movs	r3, #64	@ 0x40
 8006572:	1b80      	subs	r0, r0, r6
 8006574:	4083      	lsls	r3, r0
 8006576:	6822      	ldr	r2, [r4, #0]
 8006578:	3501      	adds	r5, #1
 800657a:	4313      	orrs	r3, r2
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	7829      	ldrb	r1, [r5, #0]
 8006580:	2206      	movs	r2, #6
 8006582:	4826      	ldr	r0, [pc, #152]	@ (800661c <_svfiprintf_r+0x1f0>)
 8006584:	1c6e      	adds	r6, r5, #1
 8006586:	7621      	strb	r1, [r4, #24]
 8006588:	f000 f9f2 	bl	8006970 <memchr>
 800658c:	2800      	cmp	r0, #0
 800658e:	d038      	beq.n	8006602 <_svfiprintf_r+0x1d6>
 8006590:	4b23      	ldr	r3, [pc, #140]	@ (8006620 <_svfiprintf_r+0x1f4>)
 8006592:	2b00      	cmp	r3, #0
 8006594:	d122      	bne.n	80065dc <_svfiprintf_r+0x1b0>
 8006596:	2207      	movs	r2, #7
 8006598:	9b07      	ldr	r3, [sp, #28]
 800659a:	3307      	adds	r3, #7
 800659c:	4393      	bics	r3, r2
 800659e:	3308      	adds	r3, #8
 80065a0:	9307      	str	r3, [sp, #28]
 80065a2:	6963      	ldr	r3, [r4, #20]
 80065a4:	9a04      	ldr	r2, [sp, #16]
 80065a6:	189b      	adds	r3, r3, r2
 80065a8:	6163      	str	r3, [r4, #20]
 80065aa:	e762      	b.n	8006472 <_svfiprintf_r+0x46>
 80065ac:	4343      	muls	r3, r0
 80065ae:	0035      	movs	r5, r6
 80065b0:	2101      	movs	r1, #1
 80065b2:	189b      	adds	r3, r3, r2
 80065b4:	e7a4      	b.n	8006500 <_svfiprintf_r+0xd4>
 80065b6:	2300      	movs	r3, #0
 80065b8:	200a      	movs	r0, #10
 80065ba:	0019      	movs	r1, r3
 80065bc:	3501      	adds	r5, #1
 80065be:	6063      	str	r3, [r4, #4]
 80065c0:	782a      	ldrb	r2, [r5, #0]
 80065c2:	1c6e      	adds	r6, r5, #1
 80065c4:	3a30      	subs	r2, #48	@ 0x30
 80065c6:	2a09      	cmp	r2, #9
 80065c8:	d903      	bls.n	80065d2 <_svfiprintf_r+0x1a6>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0c8      	beq.n	8006560 <_svfiprintf_r+0x134>
 80065ce:	9109      	str	r1, [sp, #36]	@ 0x24
 80065d0:	e7c6      	b.n	8006560 <_svfiprintf_r+0x134>
 80065d2:	4341      	muls	r1, r0
 80065d4:	0035      	movs	r5, r6
 80065d6:	2301      	movs	r3, #1
 80065d8:	1889      	adds	r1, r1, r2
 80065da:	e7f1      	b.n	80065c0 <_svfiprintf_r+0x194>
 80065dc:	aa07      	add	r2, sp, #28
 80065de:	9200      	str	r2, [sp, #0]
 80065e0:	0021      	movs	r1, r4
 80065e2:	003a      	movs	r2, r7
 80065e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006624 <_svfiprintf_r+0x1f8>)
 80065e6:	9803      	ldr	r0, [sp, #12]
 80065e8:	e000      	b.n	80065ec <_svfiprintf_r+0x1c0>
 80065ea:	bf00      	nop
 80065ec:	9004      	str	r0, [sp, #16]
 80065ee:	9b04      	ldr	r3, [sp, #16]
 80065f0:	3301      	adds	r3, #1
 80065f2:	d1d6      	bne.n	80065a2 <_svfiprintf_r+0x176>
 80065f4:	89bb      	ldrh	r3, [r7, #12]
 80065f6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80065f8:	065b      	lsls	r3, r3, #25
 80065fa:	d500      	bpl.n	80065fe <_svfiprintf_r+0x1d2>
 80065fc:	e72c      	b.n	8006458 <_svfiprintf_r+0x2c>
 80065fe:	b021      	add	sp, #132	@ 0x84
 8006600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006602:	aa07      	add	r2, sp, #28
 8006604:	9200      	str	r2, [sp, #0]
 8006606:	0021      	movs	r1, r4
 8006608:	003a      	movs	r2, r7
 800660a:	4b06      	ldr	r3, [pc, #24]	@ (8006624 <_svfiprintf_r+0x1f8>)
 800660c:	9803      	ldr	r0, [sp, #12]
 800660e:	f000 f87b 	bl	8006708 <_printf_i>
 8006612:	e7eb      	b.n	80065ec <_svfiprintf_r+0x1c0>
 8006614:	08006b7c 	.word	0x08006b7c
 8006618:	08006b82 	.word	0x08006b82
 800661c:	08006b86 	.word	0x08006b86
 8006620:	00000000 	.word	0x00000000
 8006624:	0800636d 	.word	0x0800636d

08006628 <_printf_common>:
 8006628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800662a:	0016      	movs	r6, r2
 800662c:	9301      	str	r3, [sp, #4]
 800662e:	688a      	ldr	r2, [r1, #8]
 8006630:	690b      	ldr	r3, [r1, #16]
 8006632:	000c      	movs	r4, r1
 8006634:	9000      	str	r0, [sp, #0]
 8006636:	4293      	cmp	r3, r2
 8006638:	da00      	bge.n	800663c <_printf_common+0x14>
 800663a:	0013      	movs	r3, r2
 800663c:	0022      	movs	r2, r4
 800663e:	6033      	str	r3, [r6, #0]
 8006640:	3243      	adds	r2, #67	@ 0x43
 8006642:	7812      	ldrb	r2, [r2, #0]
 8006644:	2a00      	cmp	r2, #0
 8006646:	d001      	beq.n	800664c <_printf_common+0x24>
 8006648:	3301      	adds	r3, #1
 800664a:	6033      	str	r3, [r6, #0]
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	069b      	lsls	r3, r3, #26
 8006650:	d502      	bpl.n	8006658 <_printf_common+0x30>
 8006652:	6833      	ldr	r3, [r6, #0]
 8006654:	3302      	adds	r3, #2
 8006656:	6033      	str	r3, [r6, #0]
 8006658:	6822      	ldr	r2, [r4, #0]
 800665a:	2306      	movs	r3, #6
 800665c:	0015      	movs	r5, r2
 800665e:	401d      	ands	r5, r3
 8006660:	421a      	tst	r2, r3
 8006662:	d027      	beq.n	80066b4 <_printf_common+0x8c>
 8006664:	0023      	movs	r3, r4
 8006666:	3343      	adds	r3, #67	@ 0x43
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	1e5a      	subs	r2, r3, #1
 800666c:	4193      	sbcs	r3, r2
 800666e:	6822      	ldr	r2, [r4, #0]
 8006670:	0692      	lsls	r2, r2, #26
 8006672:	d430      	bmi.n	80066d6 <_printf_common+0xae>
 8006674:	0022      	movs	r2, r4
 8006676:	9901      	ldr	r1, [sp, #4]
 8006678:	9800      	ldr	r0, [sp, #0]
 800667a:	9d08      	ldr	r5, [sp, #32]
 800667c:	3243      	adds	r2, #67	@ 0x43
 800667e:	47a8      	blx	r5
 8006680:	3001      	adds	r0, #1
 8006682:	d025      	beq.n	80066d0 <_printf_common+0xa8>
 8006684:	2206      	movs	r2, #6
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	2500      	movs	r5, #0
 800668a:	4013      	ands	r3, r2
 800668c:	2b04      	cmp	r3, #4
 800668e:	d105      	bne.n	800669c <_printf_common+0x74>
 8006690:	6833      	ldr	r3, [r6, #0]
 8006692:	68e5      	ldr	r5, [r4, #12]
 8006694:	1aed      	subs	r5, r5, r3
 8006696:	43eb      	mvns	r3, r5
 8006698:	17db      	asrs	r3, r3, #31
 800669a:	401d      	ands	r5, r3
 800669c:	68a3      	ldr	r3, [r4, #8]
 800669e:	6922      	ldr	r2, [r4, #16]
 80066a0:	4293      	cmp	r3, r2
 80066a2:	dd01      	ble.n	80066a8 <_printf_common+0x80>
 80066a4:	1a9b      	subs	r3, r3, r2
 80066a6:	18ed      	adds	r5, r5, r3
 80066a8:	2600      	movs	r6, #0
 80066aa:	42b5      	cmp	r5, r6
 80066ac:	d120      	bne.n	80066f0 <_printf_common+0xc8>
 80066ae:	2000      	movs	r0, #0
 80066b0:	e010      	b.n	80066d4 <_printf_common+0xac>
 80066b2:	3501      	adds	r5, #1
 80066b4:	68e3      	ldr	r3, [r4, #12]
 80066b6:	6832      	ldr	r2, [r6, #0]
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	42ab      	cmp	r3, r5
 80066bc:	ddd2      	ble.n	8006664 <_printf_common+0x3c>
 80066be:	0022      	movs	r2, r4
 80066c0:	2301      	movs	r3, #1
 80066c2:	9901      	ldr	r1, [sp, #4]
 80066c4:	9800      	ldr	r0, [sp, #0]
 80066c6:	9f08      	ldr	r7, [sp, #32]
 80066c8:	3219      	adds	r2, #25
 80066ca:	47b8      	blx	r7
 80066cc:	3001      	adds	r0, #1
 80066ce:	d1f0      	bne.n	80066b2 <_printf_common+0x8a>
 80066d0:	2001      	movs	r0, #1
 80066d2:	4240      	negs	r0, r0
 80066d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066d6:	2030      	movs	r0, #48	@ 0x30
 80066d8:	18e1      	adds	r1, r4, r3
 80066da:	3143      	adds	r1, #67	@ 0x43
 80066dc:	7008      	strb	r0, [r1, #0]
 80066de:	0021      	movs	r1, r4
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	3145      	adds	r1, #69	@ 0x45
 80066e4:	7809      	ldrb	r1, [r1, #0]
 80066e6:	18a2      	adds	r2, r4, r2
 80066e8:	3243      	adds	r2, #67	@ 0x43
 80066ea:	3302      	adds	r3, #2
 80066ec:	7011      	strb	r1, [r2, #0]
 80066ee:	e7c1      	b.n	8006674 <_printf_common+0x4c>
 80066f0:	0022      	movs	r2, r4
 80066f2:	2301      	movs	r3, #1
 80066f4:	9901      	ldr	r1, [sp, #4]
 80066f6:	9800      	ldr	r0, [sp, #0]
 80066f8:	9f08      	ldr	r7, [sp, #32]
 80066fa:	321a      	adds	r2, #26
 80066fc:	47b8      	blx	r7
 80066fe:	3001      	adds	r0, #1
 8006700:	d0e6      	beq.n	80066d0 <_printf_common+0xa8>
 8006702:	3601      	adds	r6, #1
 8006704:	e7d1      	b.n	80066aa <_printf_common+0x82>
	...

08006708 <_printf_i>:
 8006708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800670a:	b08b      	sub	sp, #44	@ 0x2c
 800670c:	9206      	str	r2, [sp, #24]
 800670e:	000a      	movs	r2, r1
 8006710:	3243      	adds	r2, #67	@ 0x43
 8006712:	9307      	str	r3, [sp, #28]
 8006714:	9005      	str	r0, [sp, #20]
 8006716:	9203      	str	r2, [sp, #12]
 8006718:	7e0a      	ldrb	r2, [r1, #24]
 800671a:	000c      	movs	r4, r1
 800671c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800671e:	2a78      	cmp	r2, #120	@ 0x78
 8006720:	d809      	bhi.n	8006736 <_printf_i+0x2e>
 8006722:	2a62      	cmp	r2, #98	@ 0x62
 8006724:	d80b      	bhi.n	800673e <_printf_i+0x36>
 8006726:	2a00      	cmp	r2, #0
 8006728:	d100      	bne.n	800672c <_printf_i+0x24>
 800672a:	e0bc      	b.n	80068a6 <_printf_i+0x19e>
 800672c:	497b      	ldr	r1, [pc, #492]	@ (800691c <_printf_i+0x214>)
 800672e:	9104      	str	r1, [sp, #16]
 8006730:	2a58      	cmp	r2, #88	@ 0x58
 8006732:	d100      	bne.n	8006736 <_printf_i+0x2e>
 8006734:	e090      	b.n	8006858 <_printf_i+0x150>
 8006736:	0025      	movs	r5, r4
 8006738:	3542      	adds	r5, #66	@ 0x42
 800673a:	702a      	strb	r2, [r5, #0]
 800673c:	e022      	b.n	8006784 <_printf_i+0x7c>
 800673e:	0010      	movs	r0, r2
 8006740:	3863      	subs	r0, #99	@ 0x63
 8006742:	2815      	cmp	r0, #21
 8006744:	d8f7      	bhi.n	8006736 <_printf_i+0x2e>
 8006746:	f7f9 fce7 	bl	8000118 <__gnu_thumb1_case_shi>
 800674a:	0016      	.short	0x0016
 800674c:	fff6001f 	.word	0xfff6001f
 8006750:	fff6fff6 	.word	0xfff6fff6
 8006754:	001ffff6 	.word	0x001ffff6
 8006758:	fff6fff6 	.word	0xfff6fff6
 800675c:	fff6fff6 	.word	0xfff6fff6
 8006760:	003600a1 	.word	0x003600a1
 8006764:	fff60080 	.word	0xfff60080
 8006768:	00b2fff6 	.word	0x00b2fff6
 800676c:	0036fff6 	.word	0x0036fff6
 8006770:	fff6fff6 	.word	0xfff6fff6
 8006774:	0084      	.short	0x0084
 8006776:	0025      	movs	r5, r4
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	3542      	adds	r5, #66	@ 0x42
 800677c:	1d11      	adds	r1, r2, #4
 800677e:	6019      	str	r1, [r3, #0]
 8006780:	6813      	ldr	r3, [r2, #0]
 8006782:	702b      	strb	r3, [r5, #0]
 8006784:	2301      	movs	r3, #1
 8006786:	e0a0      	b.n	80068ca <_printf_i+0x1c2>
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	6809      	ldr	r1, [r1, #0]
 800678c:	1d02      	adds	r2, r0, #4
 800678e:	060d      	lsls	r5, r1, #24
 8006790:	d50b      	bpl.n	80067aa <_printf_i+0xa2>
 8006792:	6806      	ldr	r6, [r0, #0]
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	2e00      	cmp	r6, #0
 8006798:	da03      	bge.n	80067a2 <_printf_i+0x9a>
 800679a:	232d      	movs	r3, #45	@ 0x2d
 800679c:	9a03      	ldr	r2, [sp, #12]
 800679e:	4276      	negs	r6, r6
 80067a0:	7013      	strb	r3, [r2, #0]
 80067a2:	4b5e      	ldr	r3, [pc, #376]	@ (800691c <_printf_i+0x214>)
 80067a4:	270a      	movs	r7, #10
 80067a6:	9304      	str	r3, [sp, #16]
 80067a8:	e018      	b.n	80067dc <_printf_i+0xd4>
 80067aa:	6806      	ldr	r6, [r0, #0]
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	0649      	lsls	r1, r1, #25
 80067b0:	d5f1      	bpl.n	8006796 <_printf_i+0x8e>
 80067b2:	b236      	sxth	r6, r6
 80067b4:	e7ef      	b.n	8006796 <_printf_i+0x8e>
 80067b6:	6808      	ldr	r0, [r1, #0]
 80067b8:	6819      	ldr	r1, [r3, #0]
 80067ba:	c940      	ldmia	r1!, {r6}
 80067bc:	0605      	lsls	r5, r0, #24
 80067be:	d402      	bmi.n	80067c6 <_printf_i+0xbe>
 80067c0:	0640      	lsls	r0, r0, #25
 80067c2:	d500      	bpl.n	80067c6 <_printf_i+0xbe>
 80067c4:	b2b6      	uxth	r6, r6
 80067c6:	6019      	str	r1, [r3, #0]
 80067c8:	4b54      	ldr	r3, [pc, #336]	@ (800691c <_printf_i+0x214>)
 80067ca:	270a      	movs	r7, #10
 80067cc:	9304      	str	r3, [sp, #16]
 80067ce:	2a6f      	cmp	r2, #111	@ 0x6f
 80067d0:	d100      	bne.n	80067d4 <_printf_i+0xcc>
 80067d2:	3f02      	subs	r7, #2
 80067d4:	0023      	movs	r3, r4
 80067d6:	2200      	movs	r2, #0
 80067d8:	3343      	adds	r3, #67	@ 0x43
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	6863      	ldr	r3, [r4, #4]
 80067de:	60a3      	str	r3, [r4, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	db03      	blt.n	80067ec <_printf_i+0xe4>
 80067e4:	2104      	movs	r1, #4
 80067e6:	6822      	ldr	r2, [r4, #0]
 80067e8:	438a      	bics	r2, r1
 80067ea:	6022      	str	r2, [r4, #0]
 80067ec:	2e00      	cmp	r6, #0
 80067ee:	d102      	bne.n	80067f6 <_printf_i+0xee>
 80067f0:	9d03      	ldr	r5, [sp, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00c      	beq.n	8006810 <_printf_i+0x108>
 80067f6:	9d03      	ldr	r5, [sp, #12]
 80067f8:	0030      	movs	r0, r6
 80067fa:	0039      	movs	r1, r7
 80067fc:	f7f9 fd1c 	bl	8000238 <__aeabi_uidivmod>
 8006800:	9b04      	ldr	r3, [sp, #16]
 8006802:	3d01      	subs	r5, #1
 8006804:	5c5b      	ldrb	r3, [r3, r1]
 8006806:	702b      	strb	r3, [r5, #0]
 8006808:	0033      	movs	r3, r6
 800680a:	0006      	movs	r6, r0
 800680c:	429f      	cmp	r7, r3
 800680e:	d9f3      	bls.n	80067f8 <_printf_i+0xf0>
 8006810:	2f08      	cmp	r7, #8
 8006812:	d109      	bne.n	8006828 <_printf_i+0x120>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	07db      	lsls	r3, r3, #31
 8006818:	d506      	bpl.n	8006828 <_printf_i+0x120>
 800681a:	6862      	ldr	r2, [r4, #4]
 800681c:	6923      	ldr	r3, [r4, #16]
 800681e:	429a      	cmp	r2, r3
 8006820:	dc02      	bgt.n	8006828 <_printf_i+0x120>
 8006822:	2330      	movs	r3, #48	@ 0x30
 8006824:	3d01      	subs	r5, #1
 8006826:	702b      	strb	r3, [r5, #0]
 8006828:	9b03      	ldr	r3, [sp, #12]
 800682a:	1b5b      	subs	r3, r3, r5
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	9b07      	ldr	r3, [sp, #28]
 8006830:	0021      	movs	r1, r4
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	9805      	ldr	r0, [sp, #20]
 8006836:	9b06      	ldr	r3, [sp, #24]
 8006838:	aa09      	add	r2, sp, #36	@ 0x24
 800683a:	f7ff fef5 	bl	8006628 <_printf_common>
 800683e:	3001      	adds	r0, #1
 8006840:	d148      	bne.n	80068d4 <_printf_i+0x1cc>
 8006842:	2001      	movs	r0, #1
 8006844:	4240      	negs	r0, r0
 8006846:	b00b      	add	sp, #44	@ 0x2c
 8006848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684a:	2220      	movs	r2, #32
 800684c:	6809      	ldr	r1, [r1, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	6022      	str	r2, [r4, #0]
 8006852:	2278      	movs	r2, #120	@ 0x78
 8006854:	4932      	ldr	r1, [pc, #200]	@ (8006920 <_printf_i+0x218>)
 8006856:	9104      	str	r1, [sp, #16]
 8006858:	0021      	movs	r1, r4
 800685a:	3145      	adds	r1, #69	@ 0x45
 800685c:	700a      	strb	r2, [r1, #0]
 800685e:	6819      	ldr	r1, [r3, #0]
 8006860:	6822      	ldr	r2, [r4, #0]
 8006862:	c940      	ldmia	r1!, {r6}
 8006864:	0610      	lsls	r0, r2, #24
 8006866:	d402      	bmi.n	800686e <_printf_i+0x166>
 8006868:	0650      	lsls	r0, r2, #25
 800686a:	d500      	bpl.n	800686e <_printf_i+0x166>
 800686c:	b2b6      	uxth	r6, r6
 800686e:	6019      	str	r1, [r3, #0]
 8006870:	07d3      	lsls	r3, r2, #31
 8006872:	d502      	bpl.n	800687a <_printf_i+0x172>
 8006874:	2320      	movs	r3, #32
 8006876:	4313      	orrs	r3, r2
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	2e00      	cmp	r6, #0
 800687c:	d001      	beq.n	8006882 <_printf_i+0x17a>
 800687e:	2710      	movs	r7, #16
 8006880:	e7a8      	b.n	80067d4 <_printf_i+0xcc>
 8006882:	2220      	movs	r2, #32
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	4393      	bics	r3, r2
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	e7f8      	b.n	800687e <_printf_i+0x176>
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	680d      	ldr	r5, [r1, #0]
 8006890:	1d10      	adds	r0, r2, #4
 8006892:	6949      	ldr	r1, [r1, #20]
 8006894:	6018      	str	r0, [r3, #0]
 8006896:	6813      	ldr	r3, [r2, #0]
 8006898:	062e      	lsls	r6, r5, #24
 800689a:	d501      	bpl.n	80068a0 <_printf_i+0x198>
 800689c:	6019      	str	r1, [r3, #0]
 800689e:	e002      	b.n	80068a6 <_printf_i+0x19e>
 80068a0:	066d      	lsls	r5, r5, #25
 80068a2:	d5fb      	bpl.n	800689c <_printf_i+0x194>
 80068a4:	8019      	strh	r1, [r3, #0]
 80068a6:	2300      	movs	r3, #0
 80068a8:	9d03      	ldr	r5, [sp, #12]
 80068aa:	6123      	str	r3, [r4, #16]
 80068ac:	e7bf      	b.n	800682e <_printf_i+0x126>
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	1d11      	adds	r1, r2, #4
 80068b2:	6019      	str	r1, [r3, #0]
 80068b4:	6815      	ldr	r5, [r2, #0]
 80068b6:	2100      	movs	r1, #0
 80068b8:	0028      	movs	r0, r5
 80068ba:	6862      	ldr	r2, [r4, #4]
 80068bc:	f000 f858 	bl	8006970 <memchr>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d001      	beq.n	80068c8 <_printf_i+0x1c0>
 80068c4:	1b40      	subs	r0, r0, r5
 80068c6:	6060      	str	r0, [r4, #4]
 80068c8:	6863      	ldr	r3, [r4, #4]
 80068ca:	6123      	str	r3, [r4, #16]
 80068cc:	2300      	movs	r3, #0
 80068ce:	9a03      	ldr	r2, [sp, #12]
 80068d0:	7013      	strb	r3, [r2, #0]
 80068d2:	e7ac      	b.n	800682e <_printf_i+0x126>
 80068d4:	002a      	movs	r2, r5
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	9906      	ldr	r1, [sp, #24]
 80068da:	9805      	ldr	r0, [sp, #20]
 80068dc:	9d07      	ldr	r5, [sp, #28]
 80068de:	47a8      	blx	r5
 80068e0:	3001      	adds	r0, #1
 80068e2:	d0ae      	beq.n	8006842 <_printf_i+0x13a>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	079b      	lsls	r3, r3, #30
 80068e8:	d415      	bmi.n	8006916 <_printf_i+0x20e>
 80068ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ec:	68e0      	ldr	r0, [r4, #12]
 80068ee:	4298      	cmp	r0, r3
 80068f0:	daa9      	bge.n	8006846 <_printf_i+0x13e>
 80068f2:	0018      	movs	r0, r3
 80068f4:	e7a7      	b.n	8006846 <_printf_i+0x13e>
 80068f6:	0022      	movs	r2, r4
 80068f8:	2301      	movs	r3, #1
 80068fa:	9906      	ldr	r1, [sp, #24]
 80068fc:	9805      	ldr	r0, [sp, #20]
 80068fe:	9e07      	ldr	r6, [sp, #28]
 8006900:	3219      	adds	r2, #25
 8006902:	47b0      	blx	r6
 8006904:	3001      	adds	r0, #1
 8006906:	d09c      	beq.n	8006842 <_printf_i+0x13a>
 8006908:	3501      	adds	r5, #1
 800690a:	68e3      	ldr	r3, [r4, #12]
 800690c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800690e:	1a9b      	subs	r3, r3, r2
 8006910:	42ab      	cmp	r3, r5
 8006912:	dcf0      	bgt.n	80068f6 <_printf_i+0x1ee>
 8006914:	e7e9      	b.n	80068ea <_printf_i+0x1e2>
 8006916:	2500      	movs	r5, #0
 8006918:	e7f7      	b.n	800690a <_printf_i+0x202>
 800691a:	46c0      	nop			@ (mov r8, r8)
 800691c:	08006b8d 	.word	0x08006b8d
 8006920:	08006b9e 	.word	0x08006b9e

08006924 <memmove>:
 8006924:	b510      	push	{r4, lr}
 8006926:	4288      	cmp	r0, r1
 8006928:	d806      	bhi.n	8006938 <memmove+0x14>
 800692a:	2300      	movs	r3, #0
 800692c:	429a      	cmp	r2, r3
 800692e:	d008      	beq.n	8006942 <memmove+0x1e>
 8006930:	5ccc      	ldrb	r4, [r1, r3]
 8006932:	54c4      	strb	r4, [r0, r3]
 8006934:	3301      	adds	r3, #1
 8006936:	e7f9      	b.n	800692c <memmove+0x8>
 8006938:	188b      	adds	r3, r1, r2
 800693a:	4298      	cmp	r0, r3
 800693c:	d2f5      	bcs.n	800692a <memmove+0x6>
 800693e:	3a01      	subs	r2, #1
 8006940:	d200      	bcs.n	8006944 <memmove+0x20>
 8006942:	bd10      	pop	{r4, pc}
 8006944:	5c8b      	ldrb	r3, [r1, r2]
 8006946:	5483      	strb	r3, [r0, r2]
 8006948:	e7f9      	b.n	800693e <memmove+0x1a>
	...

0800694c <_sbrk_r>:
 800694c:	2300      	movs	r3, #0
 800694e:	b570      	push	{r4, r5, r6, lr}
 8006950:	4d06      	ldr	r5, [pc, #24]	@ (800696c <_sbrk_r+0x20>)
 8006952:	0004      	movs	r4, r0
 8006954:	0008      	movs	r0, r1
 8006956:	602b      	str	r3, [r5, #0]
 8006958:	f7fa ffca 	bl	80018f0 <_sbrk>
 800695c:	1c43      	adds	r3, r0, #1
 800695e:	d103      	bne.n	8006968 <_sbrk_r+0x1c>
 8006960:	682b      	ldr	r3, [r5, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d000      	beq.n	8006968 <_sbrk_r+0x1c>
 8006966:	6023      	str	r3, [r4, #0]
 8006968:	bd70      	pop	{r4, r5, r6, pc}
 800696a:	46c0      	nop			@ (mov r8, r8)
 800696c:	200003b8 	.word	0x200003b8

08006970 <memchr>:
 8006970:	b2c9      	uxtb	r1, r1
 8006972:	1882      	adds	r2, r0, r2
 8006974:	4290      	cmp	r0, r2
 8006976:	d101      	bne.n	800697c <memchr+0xc>
 8006978:	2000      	movs	r0, #0
 800697a:	4770      	bx	lr
 800697c:	7803      	ldrb	r3, [r0, #0]
 800697e:	428b      	cmp	r3, r1
 8006980:	d0fb      	beq.n	800697a <memchr+0xa>
 8006982:	3001      	adds	r0, #1
 8006984:	e7f6      	b.n	8006974 <memchr+0x4>

08006986 <memcpy>:
 8006986:	2300      	movs	r3, #0
 8006988:	b510      	push	{r4, lr}
 800698a:	429a      	cmp	r2, r3
 800698c:	d100      	bne.n	8006990 <memcpy+0xa>
 800698e:	bd10      	pop	{r4, pc}
 8006990:	5ccc      	ldrb	r4, [r1, r3]
 8006992:	54c4      	strb	r4, [r0, r3]
 8006994:	3301      	adds	r3, #1
 8006996:	e7f8      	b.n	800698a <memcpy+0x4>

08006998 <_realloc_r>:
 8006998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800699a:	0006      	movs	r6, r0
 800699c:	000c      	movs	r4, r1
 800699e:	0015      	movs	r5, r2
 80069a0:	2900      	cmp	r1, #0
 80069a2:	d105      	bne.n	80069b0 <_realloc_r+0x18>
 80069a4:	0011      	movs	r1, r2
 80069a6:	f7ff fc51 	bl	800624c <_malloc_r>
 80069aa:	0004      	movs	r4, r0
 80069ac:	0020      	movs	r0, r4
 80069ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069b0:	2a00      	cmp	r2, #0
 80069b2:	d103      	bne.n	80069bc <_realloc_r+0x24>
 80069b4:	f7ff fbde 	bl	8006174 <_free_r>
 80069b8:	2400      	movs	r4, #0
 80069ba:	e7f7      	b.n	80069ac <_realloc_r+0x14>
 80069bc:	f000 f81b 	bl	80069f6 <_malloc_usable_size_r>
 80069c0:	0007      	movs	r7, r0
 80069c2:	4285      	cmp	r5, r0
 80069c4:	d802      	bhi.n	80069cc <_realloc_r+0x34>
 80069c6:	0843      	lsrs	r3, r0, #1
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	d3ef      	bcc.n	80069ac <_realloc_r+0x14>
 80069cc:	0029      	movs	r1, r5
 80069ce:	0030      	movs	r0, r6
 80069d0:	f7ff fc3c 	bl	800624c <_malloc_r>
 80069d4:	9001      	str	r0, [sp, #4]
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d0ee      	beq.n	80069b8 <_realloc_r+0x20>
 80069da:	002a      	movs	r2, r5
 80069dc:	42bd      	cmp	r5, r7
 80069de:	d900      	bls.n	80069e2 <_realloc_r+0x4a>
 80069e0:	003a      	movs	r2, r7
 80069e2:	0021      	movs	r1, r4
 80069e4:	9801      	ldr	r0, [sp, #4]
 80069e6:	f7ff ffce 	bl	8006986 <memcpy>
 80069ea:	0021      	movs	r1, r4
 80069ec:	0030      	movs	r0, r6
 80069ee:	f7ff fbc1 	bl	8006174 <_free_r>
 80069f2:	9c01      	ldr	r4, [sp, #4]
 80069f4:	e7da      	b.n	80069ac <_realloc_r+0x14>

080069f6 <_malloc_usable_size_r>:
 80069f6:	1f0b      	subs	r3, r1, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	1f18      	subs	r0, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	da01      	bge.n	8006a04 <_malloc_usable_size_r+0xe>
 8006a00:	580b      	ldr	r3, [r1, r0]
 8006a02:	18c0      	adds	r0, r0, r3
 8006a04:	4770      	bx	lr
	...

08006a08 <_init>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	46c0      	nop			@ (mov r8, r8)
 8006a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0e:	bc08      	pop	{r3}
 8006a10:	469e      	mov	lr, r3
 8006a12:	4770      	bx	lr

08006a14 <_fini>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	46c0      	nop			@ (mov r8, r8)
 8006a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1a:	bc08      	pop	{r3}
 8006a1c:	469e      	mov	lr, r3
 8006a1e:	4770      	bx	lr
